{
  "openapi": "3.0.0",
  "info": {
    "description": "The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).",
    "version": "1.0.0",
    "title": "IAM Identity Services",
    "x-ibm-name": "iam-token-service-api",
    "x-alternate-name": "iam_identity",
    "x-codegen-config": {
      "java": {
        "apiPackage": "com.ibm.cloud.platform_services"
      },
      "go": {
        "apiPackage": "github.com/IBM/platform-services-go-sdk",
        "improvedNameFormattingV2": true
      },
      "python": {
        "apiPackage": "ibm_platform_services"
      }
    },
    "x-last-updated": "2023-09-08"
  },
  "tags": [
    {
      "name": "API key operations"
    },
    {
      "name": "Service ID operations"
    },
    {
      "name": "Trusted profiles operations"
    },
    {
      "name": "Token operations"
    },
    {
      "name": "Account settings"
    },
    {
      "name": "MFA enrollment status"
    }
  ],
  "paths": {
    "/v1/accounts/{account_id}/settings/identity": {
      "get": {
        "tags": [
          "Account settings"
        ],
        "summary": "Get account configurations",
        "description": "Returns the details of an account's configuration.",
        "operationId": "getAccountSettings",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID of the account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response. No further actions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSettingsResponse"
                },
                "example": {
                  "account_id": "5bbe28be34524avs8a34d37d1f2294a8a",
                  "restrict_create_service_id": "NOT_SET",
                  "restrict_create_platform_apikey": "NOT_SET",
                  "entity_tag": "1-b67c932537dee167ce71be73d59d6a5c",
                  "mfa": "NONE",
                  "user_mfa": {
                    "iam_id": "IBMid-1234567898",
                    "mfa": "NONE"
                  },
                  "session_expiration_in_seconds": "NOT_SET",
                  "session_invalidation_in_seconds": "NOT_SET",
                  "max_sessions_per_identity": "NOT_SET",
                  "system_access_token_expiration_in_seconds": "NOT_SET",
                  "system_refresh_token_expiration_in_seconds": "NOT_SET"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation happened."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account.get"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/accounts/ACCOUNT_ID/settings/identity' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getAccountSettingsOptions := iamIdentityService.NewGetAccountSettingsOptions(accountID)\n",
                      "\n",
                      "accountSettingsResponse, response, err := iamIdentityService.GetAccountSettings(getAccountSettingsOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(accountSettingsResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetAccountSettingsOptions getAccountSettingsOptions = new GetAccountSettingsOptions.Builder()\n",
                      "    .accountId(accountId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<AccountSettingsResponse> response = service.getAccountSettings(getAccountSettingsOptions).execute();\n",
                      "AccountSettingsResponse accountSettingsResponse = response.getResult();\n",
                      "\n",
                      "accountSettingsEtag = response.getHeaders().values(\"Etag\").get(0);\n",
                      "\n",
                      "System.out.println(accountSettingsResponse);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  accountId: accountId,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getAccountSettings(params);\n",
                      "  accountSettingsEtag = res.headers['etag'];\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.get_account_settings(account_id=account_id)\n",
                      "settings = response.get_result()\n",
                      "account_settings_etag = response.get_headers()['Etag']\n",
                      "\n",
                      "print(json.dumps(settings, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "parameters": [],
      "put": {
        "tags": [
          "Account settings"
        ],
        "summary": "Update account configurations",
        "description": "Allows a user to configure settings on their account with regards to MFA, MFA excemption list, session lifetimes, access control for creating new identities, and enforcing IP restrictions on token creation.",
        "operationId": "updateAccountSettings",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Version of the account settings to be updated. Specify the version that you retrieved as entity_tag (ETag header) when reading the account. This value helps identifying parallel usage of this API. Pass * to indicate to update any version available. This might result in stale updates.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "The id of the account to update the settings for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountSettingsRequest"
              }
            }
          },
          "description": "Request to update an account's settings.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful account configuration update.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSettingsResponse"
                },
                "example": {
                  "account_id": "5bbe28be34524avs8a34d37d1f2294a8a",
                  "restrict_create_service_id": "RESTRICTED",
                  "restrict_create_platform_apikey": "RESTRICTED",
                  "allowed_ip_addresses": "127.0.0.1",
                  "entity_tag": "2-b67acg2537dee167ce71be73d59d6a5c",
                  "mfa": "NONE",
                  "user_mfa": {
                    "iam_id": "IBMid-1234567898",
                    "mfa": "LEVEL1"
                  },
                  "session_expiration_in_seconds": "3600",
                  "session_invalidation_in_seconds": "1800",
                  "max_sessions_per_identity": "10",
                  "system_access_token_expiration_in_seconds": "3600",
                  "system_refresh_token_expiration_in_seconds": "259200"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account.update"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.accountsettings.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PUT \\\n",
                      "'https://iam.cloud.ibm.com/v1/accounts/ACCOUNT_ID/settings/identity' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n",
                      "-d '{\n",
                      "  \"restrict_create_service_id\": \"RESTRICTED\",\n",
                      "  \"restrict_create_platform_apikey\": \"RESTRICTED\",\n",
                      "  \"allowed_ip_addresses\": \"127.0.0.1\",\n",
                      "  \"mfa\": \"NONE\",\n",
                      "  \"session_expiration_in_seconds\": \"3600\",\n",
                      "  \"session_invalidation_in_seconds\": \"1800\"\n",
                      "  \"max_sessions_per_identity\": \"10\"\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "accountSettingsUserMFA := new(iamidentityv1.AccountSettingsUserMfa)\n",
                      "accountSettingsUserMFA.IamID = core.StringPtr(iamIDMember)\n",
                      "accountSettingsUserMFA.Mfa = core.StringPtr(\"NONE\")\n",
                      "\n",
                      "updateAccountSettingsOptions := iamIdentityService.NewUpdateAccountSettingsOptions(\n",
                      "  accountSettingEtag,\n",
                      "  accountID,\n",
                      ")\n",
                      "updateAccountSettingsOptions.SetSessionExpirationInSeconds(\"86400\")\n",
                      "updateAccountSettingsOptions.SetSessionInvalidationInSeconds(\"7200\")\n",
                      "updateAccountSettingsOptions.SetMfa(\"NONE\")\n",
                      "updateAccountSettingsOptions.SetUserMfa([]iamidentityv1.AccountSettingsUserMfa{*accountSettingsUserMFA})\n",
                      "updateAccountSettingsOptions.SetRestrictCreatePlatformApikey(\"NOT_RESTRICTED\")\n",
                      "updateAccountSettingsOptions.SetRestrictCreatePlatformApikey(\"NOT_RESTRICTED\")\n",
                      "updateAccountSettingsOptions.SetSystemAccessTokenExpirationInSeconds(\"3600\")\n",
                      "updateAccountSettingsOptions.SetSystemRefreshTokenExpirationInSeconds(\"259200\")\n",
                      "\n",
                      "accountSettingsResponse, response, err := iamIdentityService.UpdateAccountSettings(updateAccountSettingsOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(accountSettingsResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "AccountSettingsUserMFA userMFA = new AccountSettingsUserMFA.Builder()\n",
                      "    .iamId(iamIdMember)\n",
                      "    .mfa(\"NONE\")\n",
                      "    .build();\n",
                      "\n",
                      "List<AccountSettingsUserMFA> userMFAExpList = new ArrayList<>();\n",
                      "userMFAExpList.add(userMFA);\n",
                      "\n",
                      "UpdateAccountSettingsOptions updateAccountSettingsOptions = new UpdateAccountSettingsOptions.Builder()\n",
                      "    .ifMatch(accountSettingsEtag)\n",
                      "    .accountId(accountId)\n",
                      "    .sessionExpirationInSeconds(\"86400\")\n",
                      "    .sessionInvalidationInSeconds(\"7200\")\n",
                      "    .restrictCreatePlatformApikey(\"NOT_RESTRICTED\")\n",
                      "    .restrictCreateServiceId(\"NOT_RESTRICTED\")\n",
                      "    .mfa(\"NONE\")\n",
                      "    .userMfa(userMFAExpList)\n",
                      "    .systemAccessTokenExpirationInSeconds(\"3600\")\n",
                      "    .systemRefreshTokenExpirationInSeconds(\"259200\")\n",
                      "    .build();\n",
                      "\n",
                      "Response<AccountSettingsResponse> response = service.updateAccountSettings(updateAccountSettingsOptions).execute();\n",
                      "AccountSettingsResponse accountSettingsResponse = response.getResult();\n",
                      "\n",
                      "System.out.println(accountSettingsResponse);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const accountSettingsUserMFA = {\n",
                      "  iam_id: iamIdMember,\n",
                      "  mfa: 'NONE',\n",
                      "};\n",
                      "\n",
                      "const userMfa = [accountSettingsUserMFA];\n",
                      "\n",
                      "const params = {\n",
                      "  ifMatch: accountSettingsEtag,\n",
                      "  accountId: accountId,\n",
                      "  restrictCreateServiceId: \"NOT_RESTRICTED\",\n",
                      "  restrictCreatePlatformApikey: \"NOT_RESTRICTED\",\n",
                      "  mfa: \"NONE\",\n",
                      "  userMfa,\n",
                      "  sessionExpirationInSeconds: \"86400\",\n",
                      "  sessionInvalidationInSeconds: \"7200\",\n",
                      "  systemAccessTokenExpirationInSeconds: '3600',\n",
                      "  systemRefreshTokenExpirationInSeconds: '259200',\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.updateAccountSettings(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "account_settings_user_mfa = {}\n",
                      "account_settings_user_mfa['iam_id'] = iam_id_member\n",
                      "account_settings_user_mfa['mfa'] = 'NONE'\n",
                      "\n",
                      "account_settings_response = iam_identity_service.update_account_settings(\n",
                      "  account_id=account_id,\n",
                      "  if_match=account_settings_etag,\n",
                      "  restrict_create_service_id=\"NOT_RESTRICTED\",\n",
                      "  restrict_create_platform_apikey=\"NOT_RESTRICTED\",\n",
                      "  mfa=\"NONE\",\n",
                      "  user_mfa=[account_settings_user_mfa],\n",
                      "  session_expiration_in_seconds=\"86400\",\n",
                      "  session_invalidation_in_seconds=\"7200\",\n",
                      "  max_sessions_per_identity='10',\n",
                      "  system_access_token_expiration_in_seconds='3600',\n",
                      "  system_refresh_token_expiration_in_seconds='259200',\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(account_settings_response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/apikeys": {
      "get": {
        "tags": [
          "API key operations"
        ],
        "summary": "Get API keys for a given service or user IAM ID and account ID",
        "description": "Returns the list of API key details for a given service or user IAM ID and account ID.\nUsers can manage user API keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to. In case of service IDs and their API keys, a user must be either an account owner, a IBM Cloud org manager or IBM Cloud space developer in order to manage service IDs of the entity.",
        "operationId": "list_api_keys",
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "description": "Account ID of the API keys(s) to query. If a service IAM ID is specified in iam_id then account_id must match the account of the IAM ID. If a user IAM ID is specified in iam_id then then account_id must match the account of the Authorization token.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "iam_id",
            "in": "query",
            "description": "IAM ID of the API key(s) to be queried. The IAM ID may be that of a user or a service. For a user IAM ID iam_id must match the Authorization token.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagesize",
            "in": "query",
            "description": "Optional size of a single page. Default is 20 items per page. Valid range is 1 to 100.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pagetoken",
            "in": "query",
            "description": "Optional Prev or Next page token returned from a previous query execution. Default is start with first page.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Optional parameter to define the scope of the queried API Keys. Can be 'entity' (default) or 'account'.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "entity",
              "enum": [
                "entity",
                "account"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Optional parameter to filter the type of the queried API Keys. Can be 'user' or 'serviceid'.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "serviceid"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Optional sort property, valid values are name, description, created_at and created_by. If specified, the items are sorted by the value of this property.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Optional sort order, valid values are asc and desc. Default: asc.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyList"
                },
                "example": {
                  "limit": 1,
                  "first": {
                    "href": "https://iam.cloud.ibm.com/v1/apikeys?pagetoken=PageToken"
                  },
                  "next": {
                    "href": "https://iam.cloud.ibm.com/v1/apikeys?pagetoken=PageToken"
                  },
                  "apikeys": {
                    "id": "ApiKey-fffc06c0-f3fd-49e5-82b5-b9dec9a3c47c",
                    "entity_tag": "3-5c26819c7a9df67ac5d51c5761e1ac8a",
                    "crn": "crn:v1:bluemix:public:iam-identity::a/100abcde100a41abc100aza678abc0zz::apikey:ApiKey-fffc06c0-f3fd-49e5-82b5-b9dec9a3c47c",
                    "locked": false,
                    "created_at": "2020-09-28T17:49+0000",
                    "created_by": "IBMid-110000AB1Z",
                    "modified_at": "2020-09-28T17:49+0000",
                    "name": "apikeyNew",
                    "description": "test",
                    "iam_id": "IBMid-110000AB1Z",
                    "account_id": "100abcde100a41abc100aza678abc0zz"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "User iam_id or account_id does not match Authorization token, service ID of the IAM ID not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.apikey.list"
            },
            {
              "name": "iam-identity.apikey.manage (if scope='account')"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/apikeys?account_id=ACCOUNT_ID&iam_id=IBMid-123WEREW' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "listAPIKeysOptions := iamIdentityService.NewListAPIKeysOptions()\n",
                      "listAPIKeysOptions.SetAccountID(accountID)\n",
                      "listAPIKeysOptions.SetIamID(iamID)\n",
                      "listAPIKeysOptions.SetIncludeHistory(true)\n",
                      "\n",
                      "apiKeyList, response, err := iamIdentityService.ListAPIKeys(listAPIKeysOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(apiKeyList, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "ListApiKeysOptions listApiKeysOptions = new ListApiKeysOptions.Builder()\n",
                      "    .accountId(accountId)\n",
                      "    .iamId(iamId)\n",
                      "    .includeHistory(true)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ApiKeyList> response = service.listApiKeys(listApiKeysOptions).execute();\n",
                      "ApiKeyList apiKeyList = response.getResult();\n",
                      "\n",
                      "System.out.println(apiKeyList);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  accountId: accountId,\n",
                      "  iamId: iamId,\n",
                      "  includeHistory: true,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.listApiKeys(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "api_key_list = iam_identity_service.list_api_keys(\n",
                      "  account_id=account_id, iam_id=iam_id, include_history=True\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(api_key_list, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "tags": [
          "API key operations"
        ],
        "summary": "Create an API key",
        "description": "Creates an API key for a UserID or service ID.\nUsers can manage user API keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to.\n\n",
        "operationId": "create_api_key",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Entity-Lock",
            "in": "header",
            "description": "Indicates if the API key is locked for further write operations. False by default.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "false"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiKeyRequest"
              }
            }
          },
          "description": "Request to create an API key.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "API key successfully created. Response if the Object could be created in the persistence layer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                },
                "example": {
                  "id": "ApiKey-5ccff000-9ff1-4481-a760-29c22a7603e7",
                  "entity_tag": "1-b4053b5d441613fdad4ff3c28db3e7cc",
                  "crn": "crn:v1:bluemix:public:iam-identity::a/100abcde100a41abc100aza678abc0zz::apikey:ApiKey-5ccff000-9ff1-4481-a760-29c22a7603e7",
                  "locked": false,
                  "created_at": "2020-11-10T12:28+0000",
                  "created_by": "IBMid-110000AB1Z",
                  "modified_at": "2020-11-10T12:28+0000",
                  "name": "apikey-test",
                  "description": "apikey-test",
                  "iam_id": "IBMid-110000AB1Z",
                  "account_id": "100abcde100a41abc100aza678abc0zz",
                  "apikey": "created_apikey"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "409": {
            "description": "Create Conflict - API key could not be created. Response if the Object could not be created in the persistence layer."
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation. happened."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.apikey.create"
            }
          ]
        },
        "x-ibm-events": {
          "description": "Depending on the type of API key that you create, one of the following events is generated.",
          "events": [
            {
              "name": "iam-identity.user-apikey.create"
            },
            {
              "name": "iam-identity.serviceid-apikey.create"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST \\\n",
                      "'https://iam.cloud.ibm.com/v1/apikeys' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-d '{\n",
                      "  \"name\": \"My-apikey\",\n",
                      "  \"description\": \"my personal key\",\n",
                      "  \"iam_id\": \"IBMid-123WEREW\",\n",
                      "  \"account_id\": \"ACCOUNT_ID\"\n",
                      "  \"store_value\": false\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "createAPIKeyOptions := iamIdentityService.NewCreateAPIKeyOptions(apikeyName, iamID)\n",
                      "createAPIKeyOptions.SetDescription(\"Example ApiKey\")\n",
                      "\n",
                      "apiKey, response, err := iamIdentityService.CreateAPIKey(createAPIKeyOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(apiKey, \"\", \"  \")\n",
                      "fmt.Println(string(b))\n",
                      "apikeyID = *apiKey.ID"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CreateApiKeyOptions createApiKeyOptions = new CreateApiKeyOptions.Builder()\n",
                      "    .name(apiKeyName)\n",
                      "    .iamId(iamId)\n",
                      "    .description(\"Example ApiKey\")\n",
                      "    .build();\n",
                      "\n",
                      "Response<ApiKey> response = service.createApiKey(createApiKeyOptions).execute();\n",
                      "ApiKey apiKey = response.getResult();\n",
                      "apikeyId = apiKey.getId();\n",
                      "\n",
                      "System.out.println(apiKey);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  name: apikeyName,\n",
                      "  iamId: iamId,\n",
                      "  description: 'Example ApiKey',\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.createApiKey(params);\n",
                      "  apikeyId = res.result.id\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "api_key = iam_identity_service.create_api_key(name=apikey_name, iam_id=iam_id).get_result()\n",
                      "\n",
                      "apikey_id = api_key['id']\n",
                      "\n",
                      "print(json.dumps(api_key, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "parameters": []
    },
    "/v1/apikeys/details": {
      "get": {
        "tags": [
          "API key operations"
        ],
        "summary": "Get details of an API key by its value",
        "description": "Returns the details of an API key by its value.\nUsers can manage user API keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to.\n\n",
        "operationId": "get_api_keys_details",
        "parameters": [
          {
            "name": "IAM-ApiKey",
            "in": "header",
            "description": "API key value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Get of API key details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                },
                "example": {
                  "id": "ApiKey-5ccff000-9ff1-4481-a760-29c22a7603e7",
                  "entity_tag": "1-b4053b5d441613fdad4ff3c28db3e7cc",
                  "crn": "crn:v1:bluemix:public:iam-identity::a/100abcde100a41abc100aza678abc0zz::apikey:ApiKey-5ccff000-9ff1-4481-a760-29c22a7603e7",
                  "locked": false,
                  "created_at": "2020-11-10T12:28+0000",
                  "created_by": "IBMid-110000AB1Z",
                  "modified_at": "2020-11-10T12:28+0000",
                  "name": "apikey-test",
                  "description": "apikey-test",
                  "iam_id": "IBMid-110000AB1Z",
                  "account_id": "100abcde100a41abc100aza678abc0zz"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "API key not found."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.apikey.get"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/apikeys/details' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'IAM-Apikey: APIKEY_VALUE' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getAPIKeysDetailsOptions := iamIdentityService.NewGetAPIKeysDetailsOptions()\n",
                      "getAPIKeysDetailsOptions.SetIamAPIKey(iamAPIKey)\n",
                      "getAPIKeysDetailsOptions.SetIncludeHistory(false)\n",
                      "\n",
                      "apiKey, response, err := iamIdentityService.GetAPIKeysDetails(getAPIKeysDetailsOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(apiKey, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetApiKeysDetailsOptions getApiKeysDetailsOptions = new GetApiKeysDetailsOptions.Builder()\n",
                      "    .iamApiKey(iamApiKey)\n",
                      "    .includeHistory(false)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ApiKey> response = service.getApiKeysDetails(getApiKeysDetailsOptions).execute();\n",
                      "ApiKey apiKey = response.getResult();\n",
                      "\n",
                      "System.out.println(apiKey);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  iamApiKey: iamApikey,\n",
                      "  includeHistory: false,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getApiKeysDetails(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "api_key = iam_identity_service.get_api_keys_details(iam_api_key=apikey).get_result()\n",
                      "\n",
                      "print(json.dumps(api_key, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "parameters": []
    },
    "/v1/apikeys/{id}": {
      "get": {
        "tags": [
          "API key operations"
        ],
        "summary": "Get details of an API key",
        "description": "Returns the details of an API key.\nUsers can manage user API keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to. In case of service IDs and their API keys, a user must be either an account owner, a IBM Cloud org manager or IBM Cloud space developer in order to manage service IDs of the entity.",
        "operationId": "get_api_key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of the API key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "include_activity",
            "in": "query",
            "description": "Defines if the entity's activity is included in the response. Retrieving activity data is an expensive operation, so only request this when needed.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Get of API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                },
                "example": {
                  "id": "ApiKey-5ccff000-9ff1-4481-a760-29c22a7603e7",
                  "entity_tag": "1-b4053b5d441613fdad4ff3c28db3e7cc",
                  "crn": "crn:v1:bluemix:public:iam-identity::a/100abcde100a41abc100aza678abc0zz::apikey:ApiKey-5ccff000-9ff1-4481-a760-29c22a7603e7",
                  "locked": false,
                  "created_at": "2020-11-10T12:28+0000",
                  "created_by": "IBMid-110000AB1Z",
                  "modified_at": "2020-11-10T12:28+0000",
                  "name": "apikey-test",
                  "description": "apikey-test",
                  "iam_id": "IBMid-110000AB1Z",
                  "account_id": "100abcde100a41abc100aza678abc0zz"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "API key with provided ID not found."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.apikey.get"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/apikeys/APIKEY_UNIQUE_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getAPIKeyOptions := iamIdentityService.NewGetAPIKeyOptions(apikeyID)\n",
                      "\n",
                      "getAPIKeyOptions.SetIncludeHistory(false)\n",
                      "getAPIKeyOptions.SetIncludeActivity(false)\n",
                      "\n",
                      "apiKey, response, err := iamIdentityService.GetAPIKey(getAPIKeyOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "apikeyEtag = response.GetHeaders().Get(\"Etag\")\n",
                      "b, _ := json.MarshalIndent(apiKey, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetApiKeyOptions getApiKeyOptions = new GetApiKeyOptions.Builder()\n",
                      "    .id(apikeyId)\n",
                      "    .includeHistory(true)\n",
                      "    .includeActivity(true)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ApiKey> response = service.getApiKey(getApiKeyOptions).execute();\n",
                      "ApiKey apiKey = response.getResult();\n",
                      "apikeyEtag = response.getHeaders().values(\"Etag\").get(0);\n",
                      "\n",
                      "System.out.println(apiKey);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  id: apikeyId,\n",
                      "  includeActivity: true,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getApiKey(params);\n",
                      "  apikeyEtag = res.headers['etag'];\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.get_api_key(\n",
                      "  id=apikey_id,\n",
                      "  include_activity=True,\n",
                      ")\n",
                      "\n",
                      "apikey_etag = response.get_headers()['Etag']\n",
                      "api_key = response.get_result()\n",
                      "\n",
                      "print(json.dumps(api_key, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "put": {
        "tags": [
          "API key operations"
        ],
        "summary": "Updates an API key",
        "description": "Updates properties of an API key. This does NOT affect existing access tokens. Their token content will stay unchanged until the access token is refreshed. To update an API key, pass the property to be modified. To delete one property's value, pass the property with an empty value \"\".Users can manage user API keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to.\n\n",
        "operationId": "update_api_key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of the API key to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Version of the API key to be updated. Specify the version\nthat you retrieved when reading the API key. This value\nhelps identifying parallel usage of this API.\nPass * to indicate to update any version available. This\nmight result in stale updates.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiKeyRequest"
              }
            }
          },
          "description": "Request to update an API key.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful - API key updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                },
                "example": {
                  "id": "ApiKey-5ccff000-9ff1-4481-a760-29c22a7603e7",
                  "entity_tag": "2-cc66d399c705d12b439f1992a465fd5b",
                  "crn": "crn:v1:bluemix:public:iam-identity::a/100abcde100a41abc100aza678abc0zz::apikey:ApiKey-5ccff000-9ff1-4481-a760-29c22a7603e7",
                  "locked": false,
                  "created_at": "2020-11-10T12:28+0000",
                  "created_by": "IBMid-110000AB1Z",
                  "modified_at": "2020-11-10T13:45+0000",
                  "name": "Apikey-test1",
                  "description": "Apikey-test1",
                  "iam_id": "IBMid-110000AB1Z",
                  "account_id": "100abcde100a41abc100aza678abc0zz"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "API key with provided parameters not found."
          },
          "409": {
            "description": "Conflict - there must have been an update in parallel,\nthe specified If-Match header does not match the\ncurrent API key record. Retrieve the current API key\nagain and apply the changes to that version.\n"
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.apikey.update"
            }
          ]
        },
        "x-ibm-events": {
          "description": "Depending on the type of API key that you update, one of the following events is generated.",
          "events": [
            {
              "name": "iam-identity.user-apikey.update"
            },
            {
              "name": "iam-identity.serviceid-apikey.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PUT \\\n",
                      "'https://iam.cloud.ibm.com/v1/apikeys/APIKEY_UNIQUE_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'If-Match: <value of etag header from GET request>' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-d '{\n",
                      "  \"name\": \"My-apikey\",\n",
                      "  \"description\": \"my personal key\"\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "updateAPIKeyOptions := iamIdentityService.NewUpdateAPIKeyOptions(apikeyID, apikeyEtag)\n",
                      "updateAPIKeyOptions.SetDescription(\"This is an updated description\")\n",
                      "\n",
                      "apiKey, response, err := iamIdentityService.UpdateAPIKey(updateAPIKeyOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(apiKey, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "UpdateApiKeyOptions updateApiKeyOptions = new UpdateApiKeyOptions.Builder()\n",
                      "    .id(apikeyId)\n",
                      "    .ifMatch(apikeyEtag)\n",
                      "    .description(\"This is an updated description\")\n",
                      "    .build();\n",
                      "\n",
                      "Response<ApiKey> response = service.updateApiKey(updateApiKeyOptions).execute();\n",
                      "ApiKey apiKey = response.getResult();\n",
                      "\n",
                      "System.out.println(apiKey);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  id: apikeyId,\n",
                      "  ifMatch: apikeyEtag,\n",
                      "  description: 'This is an updated description',\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.updateApiKey(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "api_key = iam_identity_service.update_api_key(\n",
                      "  id=apikey_id, if_match=apikey_etag, description='This is an updated description'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(api_key, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "API key operations"
        ],
        "summary": "Deletes an API key",
        "description": "Deletes an API key.\nExisting tokens will remain valid until expired.\nUsers can manage user API keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to.\n\n",
        "operationId": "delete_api_key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of the API key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted Successful - no further details."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "API key with given ID not found."
          },
          "409": {
            "description": "Conflict - ApiKey could not be deleted."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.apikey.delete"
            }
          ]
        },
        "x-ibm-events": {
          "description": "Depending on the type of API key that you delete, one of the following events is generated.",
          "events": [
            {
              "name": "iam-identity.user-apikey.delete"
            },
            {
              "name": "iam-identity.serviceid-apikey.delete"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE \\\n",
                      "'https://iam.cloud.ibm.com/v1/apikeys/APIKEY_UNIQUE_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "deleteAPIKeyOptions := iamIdentityService.NewDeleteAPIKeyOptions(apikeyID)\n",
                      "\n",
                      "response, err := iamIdentityService.DeleteAPIKey(deleteAPIKeyOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "DeleteApiKeyOptions deleteApiKeyOptions = new DeleteApiKeyOptions.Builder()\n",
                      "    .id(apikeyId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<Void> response = service.deleteApiKey(deleteApiKeyOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  id: apikeyId,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  await iamIdentityService.deleteApiKey(params);\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.delete_api_key(id=apikey_id)"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "parameters": []
    },
    "/v1/apikeys/{id}/lock": {
      "post": {
        "tags": [
          "API key operations"
        ],
        "summary": "Lock the API key",
        "description": "Locks an API key by ID. Users can manage user API keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to. In case of service IDs and their API keys, a user must be either an account owner, a IBM Cloud org manager or IBM Cloud space developer in order to manage service IDs of the entity.",
        "operationId": "lock_api_key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of the API key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful locked."
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "API key with provided ID not found."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-events": {
          "description": "Depending on the type of API key that you lock, one of the following events is generated.",
          "events": [
            {
              "name": "iam-identity.user-apikey.update"
            },
            {
              "name": "iam-identity.serviceid-apikey.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST \\\n",
                      "'https://iam.cloud.ibm.com/v1/apikeys/APIKEY_UNIQUE_ID/lock' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "lockAPIKeyOptions := iamIdentityService.NewLockAPIKeyOptions(apikeyID)\n",
                      "\n",
                      "response, err := iamIdentityService.LockAPIKey(lockAPIKeyOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "LockApiKeyOptions lockApiKeyOptions = new LockApiKeyOptions.Builder()\n",
                      "    .id(apikeyId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<Void> response = service.lockApiKey(lockApiKeyOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  id: apikeyId,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  await iamIdentityService.lockApiKey(params);\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.lock_api_key(id=apikey_id)"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "API key operations"
        ],
        "summary": "Unlock the API key",
        "description": "Unlocks an API key by ID. Users can manage user API keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to. In case of service IDs and their API keys, a user must be either an account owner, a IBM Cloud org manager or IBM Cloud space developer in order to manage service IDs of the entity.",
        "operationId": "unlock_api_key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of the API key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful unlocked."
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "API key with provided ID not found."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-events": {
          "description": "Depending on the type of API key that you unlock, one of the following events is generated.",
          "events": [
            {
              "name": "iam-identity.user-apikey.update"
            },
            {
              "name": "iam-identity.serviceid-apikey.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE \\\n",
                      "'https://iam.cloud.ibm.com/v1/apikeys/APIKEY_UNIQUE_ID/lock' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "unlockAPIKeyOptions := iamIdentityService.NewUnlockAPIKeyOptions(apikeyID)\n",
                      "\n",
                      "response, err := iamIdentityService.UnlockAPIKey(unlockAPIKeyOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "UnlockApiKeyOptions unlockApiKeyOptions = new UnlockApiKeyOptions.Builder()\n",
                      "    .id(apikeyId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<Void> response = service.unlockApiKey(unlockApiKeyOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  id: apikeyId,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  await iamIdentityService.unlockApiKey(params);\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.unlock_api_key(id=apikey_id)"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "parameters": []
    },
    "/v1/serviceids/": {
      "get": {
        "tags": [
          "Service ID operations"
        ],
        "summary": "List service IDs",
        "description": "Returns a list of service IDs. Users can manage user API keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to. Note: apikey details are only included in the response when creating a Service ID with an apikey.\n\n",
        "operationId": "list_service_ids",
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "description": "Account ID of the service ID(s) to query. This parameter is required (unless using a pagetoken).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the service ID(s) to query. Optional.20 items per page. Valid range is 1 to 100.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagesize",
            "in": "query",
            "description": "Optional size of a single page. Default is 20 items per page. Valid range is 1 to 100.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pagetoken",
            "in": "query",
            "description": "Optional Prev or Next page token returned from a previous query execution. Default is start with first page.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Optional sort property, valid values are name, description, created_at and modified_at. If specified, the items are sorted by the value of this property.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Optional sort order, valid values are asc and desc. Default: asc.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response. No further actions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIdList"
                },
                "example": {
                  "offset": 0,
                  "limit": 1,
                  "first": {
                    "href": "https://iam.cloud.ibm.com/v1/serviceids?account_id=accountId"
                  },
                  "next": {
                    "href": "https://iam.cloud.ibm.com/v1/serviceids?pagetoken=pageToken"
                  },
                  "serviceids": {
                    "id": "ServiceId-ee1103f8-e03b-4d02-a977-e540ebdffb16",
                    "iam_id": "iam-ServiceId-ee1103f8-e03b-4d02-a977-e540ebdffb16",
                    "entity_tag": "3-c46d2fd21b701adf7eb67cfd1a498fde",
                    "crn": "crn:v1:bluemix:public:iam-identity::a/100abcde100a41abc100aza678abc0zz::serviceid:ServiceId-ee1103f8-e03b-4d02-a977-e540ebdffb16",
                    "locked": false,
                    "created_at": "2020-10-16T10:36+0000",
                    "modified_at": "2020-10-16T10:36+0000",
                    "account_id": "100abcde100a41abc100aza678abc0zz",
                    "name": "serviceId-test",
                    "description": "serviceId-test",
                    "unique_instance_crns": []
                  }
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation happened."
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/serviceids?account_id=ACCOUNT_ID&name=My-serviceID' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "listServiceIdsOptions := iamIdentityService.NewListServiceIdsOptions()\n",
                      "listServiceIdsOptions.SetAccountID(accountID)\n",
                      "listServiceIdsOptions.SetName(serviceIDName)\n",
                      "\n",
                      "serviceIDList, response, err := iamIdentityService.ListServiceIds(listServiceIdsOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(serviceIDList, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "ListServiceIdsOptions listServiceIdsOptions = new ListServiceIdsOptions.Builder()\n",
                      "    .accountId(accountId)\n",
                      "    .name(serviceIdName)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ServiceIdList> response = service.listServiceIds(listServiceIdsOptions).execute();\n",
                      "ServiceIdList serviceIdList = response.getResult();\n",
                      "\n",
                      "System.out.println(serviceIdList);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  accountId: accountId,\n",
                      "  name: serviceIdName,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.listServiceIds(params)\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "service_id_list = iam_identity_service.list_service_ids(\n",
                      "  account_id=account_id, name=serviceid_name\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(service_id_list, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "tags": [
          "Service ID operations"
        ],
        "summary": "Create a service ID",
        "description": "Creates a service ID for an IBM Cloud account. Users can manage user API keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to.\n\n",
        "operationId": "create_service_id",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Entity-Lock",
            "in": "header",
            "description": "Indicates if the service ID is locked for further write operations. False by default.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "false"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceIdRequest"
              }
            }
          },
          "description": "Request to create a service ID.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Service ID successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceId"
                },
                "example": {
                  "id": "ServiceId-cb36c9a9-778f-4985-a398-dbec6523054a",
                  "iam_id": "iam-ServiceId-cb36c9a9-778f-4985-a398-dbec6523054a",
                  "entity_tag": "1-b5edc4362f94fb1fa5f009467b1db039",
                  "crn": "crn:v1:bluemix:public:iam-identity::a/100abcde100a41abc100aza678abc0zz::serviceid:ServiceId-cb36c9a9-778f-4985-a398-dbec6523054a",
                  "locked": false,
                  "created_at": "2020-11-10T14:05+0000",
                  "modified_at": "2020-11-10T14:05+0000",
                  "account_id": "100abcde100a41abc100aza678abc0zz",
                  "name": "New-serviceID",
                  "description": "New-serviceID-desc",
                  "unique_instance_crns": []
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "409": {
            "description": "Create Conflict - service ID could not be created. Response if the Object could not be created in the persistence layer."
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation happened."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.serviceid.create"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.account-serviceid.create"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST \\\n",
                      "'https://iam.cloud.ibm.com/v1/serviceids' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-d '{\n",
                      "  \"name\": \"My-serviceID\",\n",
                      "  \"description\": \"my special service ID\",\n",
                      "  \"account_id\": \"ACCOUNT_ID\"\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "createServiceIDOptions := iamIdentityService.NewCreateServiceIDOptions(accountID, serviceIDName)\n",
                      "createServiceIDOptions.SetDescription(\"Example ServiceId\")\n",
                      "\n",
                      "serviceID, response, err := iamIdentityService.CreateServiceID(createServiceIDOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "svcID = *serviceID.ID\n",
                      "b, _ := json.MarshalIndent(serviceID, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CreateServiceIdOptions createServiceIdOptions = new CreateServiceIdOptions.Builder()\n",
                      "    .accountId(accountId)\n",
                      "    .name(serviceIdName)\n",
                      "    .description(\"Example ServiceId\")\n",
                      "    .build();\n",
                      "\n",
                      "Response<ServiceId> response = service.createServiceId(createServiceIdOptions).execute();\n",
                      "ServiceId serviceId = response.getResult();\n",
                      "svcId = serviceId.getId();\n",
                      "\n",
                      "System.out.println(serviceId);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  accountId: accountId,\n",
                      "  name: serviceIdName,\n",
                      "  description: 'Example ServiceId',\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.createServiceId(params);\n",
                      "  svcId = res.result.id;\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "service_id = iam_identity_service.create_service_id(\n",
                      "  account_id=account_id, name=serviceid_name, description='Example ServiceId'\n",
                      ").get_result()\n",
                      "\n",
                      "svc_id = service_id['id']\n",
                      "\n",
                      "print(json.dumps(service_id, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "parameters": []
    },
    "/v1/serviceids/{id}": {
      "get": {
        "tags": [
          "Service ID operations"
        ],
        "summary": "Get details of a service ID",
        "description": "Returns the details of a service ID. Users can manage user API keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to. Note: apikey details are only included in the response when creating a Service ID with an apikey.\n\n",
        "operationId": "get_service_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of the service ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "include_activity",
            "in": "query",
            "description": "Defines if the entity's activity is included in the response. Retrieving activity data is an expensive operation, so only request this when needed.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response. No further actions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceId"
                },
                "example": {
                  "id": "ServiceId-cb36c9a9-778f-4985-a398-dbec6523054a",
                  "iam_id": "iam-ServiceId-cb36c9a9-778f-4985-a398-dbec6523054a",
                  "entity_tag": "1-b5edc4362f94fb1fa5f009467b1db039",
                  "crn": "crn:v1:bluemix:public:iam-identity::a/100abcde100a41abc100aza678abc0zz::serviceid:ServiceId-cb36c9a9-778f-4985-a398-dbec6523054a",
                  "locked": false,
                  "created_at": "2020-11-10T14:05+0000",
                  "modified_at": "2020-11-10T14:05+0000",
                  "account_id": "100abcde100a41abc100aza678abc0zz",
                  "name": "New-serviceID",
                  "description": "New-serviceID-desc",
                  "unique_instance_crns": []
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "service ID with provided ID not found."
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation happened."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.serviceid.get"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/serviceids/SERVICE_ID_UNIQUE_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getServiceIDOptions := iamIdentityService.NewGetServiceIDOptions(svcID)\n",
                      "\n",
                      "getServiceIDOptions.SetIncludeActivity(false)\n",
                      "\n",
                      "serviceID, response, err := iamIdentityService.GetServiceID(getServiceIDOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "svcIDEtag = response.GetHeaders().Get(\"Etag\")\n",
                      "b, _ := json.MarshalIndent(serviceID, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetServiceIdOptions getServiceIdOptions = new GetServiceIdOptions.Builder()\n",
                      "    .id(svcId)\n",
                      "    .includeActivity(false)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ServiceId> response = service.getServiceId(getServiceIdOptions).execute();\n",
                      "ServiceId serviceId = response.getResult();\n",
                      "svcIdEtag = response.getHeaders().values(\"Etag\").get(0);\n",
                      "\n",
                      "System.out.println(serviceId);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  id: svcId,\n",
                      "  includeActivity: true,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getServiceId(params)\n",
                      "  svcIdEtag = res.headers['etag'];\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.get_service_id(\n",
                      "  id=svc_id,\n",
                      "  include_history=True,\n",
                      "  include_activity=True,\n",
                      ")\n",
                      "\n",
                      "svc_id_etag = response.get_headers()['Etag']\n",
                      "service_id = response.get_result()\n",
                      "\n",
                      "print(json.dumps(service_id, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "put": {
        "tags": [
          "Service ID operations"
        ],
        "summary": "Update service ID",
        "description": "Updates properties of a service ID. This does NOT affect existing access tokens. Their token content will stay unchanged until the access token is refreshed. To update a service ID, pass the property to be modified. To delete one property's value, pass the property with an empty value \"\".Users can manage user API keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to. Note: apikey details are only included in the response when creating a Service ID with an apikey.\n\n",
        "operationId": "update_service_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of the service ID to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Version of the service ID to be updated. Specify the version that you retrieved as entity_tag (ETag header) when reading the service ID. This value helps identifying parallel usage of this API. Pass * to indicate to update any version available. This might result in stale updates.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceIdRequest"
              }
            }
          },
          "description": "Request to update a service ID.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful - service ID updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceId"
                },
                "example": {
                  "id": "ServiceId-cb36c9a9-778f-4985-a398-dbec6523054a",
                  "iam_id": "iam-ServiceId-cb36c9a9-778f-4985-a398-dbec6523054a",
                  "entity_tag": "2-6dd669bd2257898957b2d117ec93e730",
                  "crn": "crn:v1:bluemix:public:iam-identity::a/100abcde100a41abc100aza678abc0zz::serviceid:ServiceId-cb36c9a9-778f-4985-a398-dbec6523054a",
                  "locked": false,
                  "created_at": "2020-11-10T14:05+0000",
                  "modified_at": "2020-11-10T14:13+0000",
                  "account_id": "100abcde100a41abc100aza678abc0zz",
                  "name": "New-serviceID-updated",
                  "description": "New-serviceID-desc-updated",
                  "unique_instance_crns": []
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Service ID with provided parameters not found"
          },
          "409": {
            "description": "Conflict - there must have been an update in parallel, the specified If-Match header does not match the current service ID record. Retrieve the current service ID again and apply the changes to that version.\n"
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.serviceid.update"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.account-serviceid.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PUT \\\n",
                      "'https://iam.cloud.ibm.com/v1/serviceids/SERVICE_ID_UNIQUE_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'If-Match: <value of etag header from GET request>' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-d '{\n",
                      "  \"name\": \"My-super-secret-serviceid\",\n",
                      "  \"description\": \"super secret service ID\"\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "updateServiceIDOptions := iamIdentityService.NewUpdateServiceIDOptions(svcID, svcIDEtag)\n",
                      "updateServiceIDOptions.SetDescription(\"This is an updated description\")\n",
                      "\n",
                      "serviceID, response, err := iamIdentityService.UpdateServiceID(updateServiceIDOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(serviceID, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "UpdateServiceIdOptions updateServiceIdOptions = new UpdateServiceIdOptions.Builder()\n",
                      "    .id(svcId)\n",
                      "    .ifMatch(svcIdEtag)\n",
                      "    .description(\"This is an updated description\")\n",
                      "    .build();\n",
                      "\n",
                      "Response<ServiceId> response = service.updateServiceId(updateServiceIdOptions).execute();\n",
                      "ServiceId serviceId = response.getResult();\n",
                      "\n",
                      "System.out.println(serviceId);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  id: svcId,\n",
                      "  ifMatch: svcIdEtag,\n",
                      "  description: 'This is an updated description',\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.updateServiceId(params)\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "service_id = iam_identity_service.update_service_id(\n",
                      "  id=svc_id, if_match=svc_id_etag, description='This is an updated description'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(service_id, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Service ID operations"
        ],
        "summary": "Deletes a service ID and associated API keys",
        "description": "Deletes a service ID and all API keys associated to it. Before deleting the service ID, all associated API keys are deleted. In case a Delete Conflict (status code 409) a retry of the request may help as the service ID is only deleted if the associated API keys were successfully deleted before. Users can manage user API keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to.\n\n",
        "operationId": "delete_service_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of the service ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "service ID successfully deleted. Response if the Object was successfully deleted from the persistence layer."
          },
          "400": {
            "description": "The service ID is locked."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "service ID with provided ID not found."
          },
          "409": {
            "description": "Delete Conflict - service ID could not be deleted. Response if the Object could not be deleted from the persistence layer."
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation happened."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.serviceid.delete"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.account-serviceid.delete"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE \\\n",
                      "'https://iam.cloud.ibm.com/v1/serviceids/SERVICE_ID_UNIQUE_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "deleteServiceIDOptions := iamIdentityService.NewDeleteServiceIDOptions(svcID)\n",
                      "\n",
                      "response, err := iamIdentityService.DeleteServiceID(deleteServiceIDOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "DeleteServiceIdOptions deleteServiceIdOptions = new DeleteServiceIdOptions.Builder()\n",
                      "    .id(svcId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<Void> response = service.deleteServiceId(deleteServiceIdOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  id: svcId,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  await iamIdentityService.deleteServiceId(params)\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.delete_service_id(id=svc_id)"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "parameters": []
    },
    "/v1/serviceids/{id}/lock": {
      "post": {
        "tags": [
          "Service ID operations"
        ],
        "summary": "Lock the service ID",
        "description": "Locks a service ID by ID. Users can manage user API keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to. In case of service IDs and their API keys, a user must be either an account owner, a IBM Cloud org manager or IBM Cloud space developer in order to manage service IDs of the entity.",
        "operationId": "lock_service_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of the service ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful locked."
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Service ID with provided uuid not found."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.serviceid.update"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.account-serviceid.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST \\\n",
                      "'https://iam.cloud.ibm.com/v1/serviceids/SERVICE_ID_UNIQUE_ID/lock' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "lockServiceIDOptions := iamIdentityService.NewLockServiceIDOptions(svcID)\n",
                      "\n",
                      "response, err := iamIdentityService.LockServiceID(lockServiceIDOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "LockServiceIdOptions lockServiceIdOptions = new LockServiceIdOptions.Builder()\n",
                      "    .id(svcId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<Void> response = service.lockServiceId(lockServiceIdOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  id: svcId,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  await iamIdentityService.lockServiceId(params);\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.lock_service_id(id=svc_id)"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Service ID operations"
        ],
        "summary": "Unlock the service ID",
        "description": "Unlocks a service ID by ID. Users can manage user API keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to. In case of service IDs and their API keys, a user must be either an account owner, a IBM Cloud org manager or IBM Cloud space developer in order to manage service IDs of the entity.",
        "operationId": "unlock_service_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of the service ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful unlocked."
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Service ID with provided uuid not found."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.serviceid.update"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.account-serviceid.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE \\\n",
                      "'https://iam.cloud.ibm.com/v1/serviceids/SERVICE_ID_UNIQUE_ID/lock' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "unlockServiceIDOptions := iamIdentityService.NewUnlockServiceIDOptions(svcID)\n",
                      "\n",
                      "response, err := iamIdentityService.UnlockServiceID(unlockServiceIDOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "UnlockServiceIdOptions unlockServiceIdOptions = new UnlockServiceIdOptions.Builder()\n",
                      "    .id(svcId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<Void> response = service.unlockServiceId(unlockServiceIdOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  id: svcId,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  await iamIdentityService.unlockServiceId(params);\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.unlock_service_id(id=svc_id)"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "parameters": []
    },
    "/v1/profiles": {
      "post": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "Create a trusted profile",
        "description": "Create a trusted profile for a given account ID.",
        "operationId": "create_profile",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTrustedProfileRequest"
              }
            }
          },
          "description": "Request to create a trusted profile.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Trusted profile successfully created. Response if the Object could be created in the persistence layer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustedProfile"
                },
                "example": {
                  "iam_id": "iam-Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c",
                  "crn": "crn:v1:bluemix:public:iam-identity::a/18e3020749ce4744b0b472466d61fdb4::profile:Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c",
                  "id": "Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c",
                  "entity_tag": "1-eb85ef473fd681c90c8743fc13a38119",
                  "created_at": "2021-07-28T10:23+0000",
                  "modified_at": "2021-07-28T10:23+0000",
                  "account_id": "18e3020749ce4744b0b472466d61fdb4",
                  "name": "My profile",
                  "description": "A superb profile"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "409": {
            "description": "Create Conflict - Trusted profile could not be created. Response if the Object could not be created in the persistence layer."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.create"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.create"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Accept: application/json' \\\n",
                      "-d '{\n",
                      "  \"name\": \"My Nice Profile\",\n",
                      "  \"description\": \"My Nice Profile - desc\",\n",
                      "  \"account_id\": \"ACCOUNT_ID\"\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "createProfileOptions := iamIdentityService.NewCreateProfileOptions(profileName, accountID)\n",
                      "createProfileOptions.SetDescription(\"Example Profile\")\n",
                      "\n",
                      "profile, response, err := iamIdentityService.CreateProfile(createProfileOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(profile, \"\", \"  \")\n",
                      "fmt.Println(string(b))\n",
                      "profileId = *profile.ID"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CreateProfileOptions createProfileOptions = new CreateProfileOptions.Builder()\n",
                      "    .name(profileName)\n",
                      "    .description(\"Example Profile\")\n",
                      "    .accountId(accountId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<TrustedProfile> response = service.createProfile(createProfileOptions).execute();\n",
                      "TrustedProfile profile = response.getResult();\n",
                      "profileId = profile.getId();\n",
                      "\n",
                      "System.out.println(profile);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  name: 'profileName',\n",
                      "  description: 'Example Profile',\n",
                      "  accountId,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.createProfile(params);\n",
                      "  profileId = res.result.id\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "profile = iam_identity_service.create_profile(\n",
                      "  name=\"example profile\", description=\"example profile\", account_id=account_id\n",
                      ").get_result()\n",
                      "\n",
                      "profile_id = profile['id']\n",
                      "\n",
                      "print(json.dumps(profile, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "List trusted profiles",
        "description": "List the trusted profiles in an account. The `account_id` query parameter determines the account from which to retrieve the list of trusted profiles.",
        "operationId": "list_profiles",
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "description": "Account ID to query for trusted profiles.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the trusted profile to query.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagesize",
            "in": "query",
            "description": "Optional size of a single page. Default is 20 items per page. Valid range is 1 to 100.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Optional sort property, valid values are name, description, created_at and modified_at. If specified, the items are sorted by the value of this property.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Optional sort order, valid values are asc and desc. Default: asc.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pagetoken",
            "in": "query",
            "description": "Optional Prev or Next page token returned from a previous query execution. Default is start with first page.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustedProfilesList"
                },
                "example": {
                  "offset": 0,
                  "limit": 20,
                  "first": "https://iam.cloud.ibm.com/v1/profiles?account_id=18e3020749ce4744b0b472466d61fdb4",
                  "profiles": [
                    {
                      "id": "Profile-94188726-7725-4c78-a686-b5deb4d47cb5",
                      "entity_tag": "5-29d5f70272e5f13930938ca32f30223d",
                      "crn": "crn:v1:bluemix:public:iam-identity::a/18e3020749ce4744b0b472466d61fdb4::profile:Profile-94188726-7725-4c78-a686-b5deb4d47cb5",
                      "name": "My profile v1",
                      "description": "A superb profile v1",
                      "created_at": "2021-07-28T09:59+0000",
                      "modified_at": "2021-07-28T16:29+0000",
                      "iam_id": "iam-Profile-94188726-7725-4c78-a686-b5deb4d47cb5",
                      "account_id": "18e3020749ce4744b0b472466d61fdb4",
                      "ims_account_id": 8794967,
                      "ims_user_id": 234876
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "account_id does not match Authorization token, account_id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.get"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.get"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles?account_id=ACCOUNT_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Accept: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "listProfilesOptions := iamIdentityService.NewListProfilesOptions(accountID)\n",
                      "listProfilesOptions.SetIncludeHistory(false)\n",
                      "\n",
                      "trustedProfiles, response, err := iamIdentityService.ListProfiles(listProfilesOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(trustedProfiles, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "ListProfilesOptions listProfilesOptions = new ListProfilesOptions.Builder()\n",
                      "    .accountId(accountId)\n",
                      "    .includeHistory(false)\n",
                      "    .build();\n",
                      "\n",
                      "Response<TrustedProfilesList> response = service.listProfiles(listProfilesOptions).execute();\n",
                      "TrustedProfilesList profiles = response.getResult();\n",
                      "\n",
                      "System.out.println(profiles);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  accountId: accountId,\n",
                      "  includeHistory: false,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.listProfiles(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "profile_list = iam_identity_service.list_profiles(account_id=account_id, include_history=True).get_result()\n",
                      "\n",
                      "print(json.dumps(profile_list, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/profiles/{profile-id}": {
      "get": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "Get a trusted profile",
        "description": "Retrieve a trusted profile by its `profile-id`. Only the trusted profile's data is returned (`name`, `description`, `iam_id`, etc.), not the federated users or compute resources that qualify to apply the trusted profile.",
        "operationId": "get_profile",
        "parameters": [
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_activity",
            "in": "query",
            "description": "Defines if the entity's activity is included in the response. Retrieving activity data is an expensive operation, so only request this when needed.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful - Get of Trusted profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustedProfile"
                },
                "example": {
                  "id": "Profile-94188726-7725-4c78-a686-b5deb4d47cb5",
                  "entity_tag": "5-29d5f70272e5f13930938ca32f30223d",
                  "crn": "crn:v1:bluemix:public:iam-identity::a/18e3020749ce4744b0b472466d61fdb4::profile:Profile-94188726-7725-4c78-a686-b5deb4d47cb5",
                  "name": "My profile v1",
                  "description": "A superb profile v1",
                  "created_at": "2021-07-28T09:59+0000",
                  "modified_at": "2021-07-28T16:29+0000",
                  "iam_id": "iam-Profile-94188726-7725-4c78-a686-b5deb4d47cb5",
                  "account_id": "18e3020749ce4744b0b472466d61fdb4",
                  "ims_account_id": 8794967,
                  "ims_user_id": 234876
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Trusted profile with provided parameters not found."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.get"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.get"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Accept: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getProfileOptions := iamIdentityService.NewGetProfileOptions(profileId)\n",
                      "\n",
                      "getProfileOptions.SetIncludeActivity(false)\n",
                      "\n",
                      "profile, response, err := iamIdentityService.GetProfile(getProfileOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "profileEtag = response.GetHeaders().Get(\"Etag\")\n",
                      "b, _ := json.MarshalIndent(profile, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetProfileOptions getProfileOptions = new GetProfileOptions.Builder()\n",
                      "    .profileId(profileId)\n",
                      "    .includeActivity(false)\n",
                      "    .build();\n",
                      "\n",
                      "Response<TrustedProfile> response = service.getProfile(getProfileOptions).execute();\n",
                      "TrustedProfile profile = response.getResult();\n",
                      "profileEtag = response.getHeaders().values(\"Etag\").get(0);\n",
                      "\n",
                      "System.out.println(profile);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  profileId,\n",
                      "  includeActivity: true,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getProfile(params)\n",
                      "  profileEtag = res.headers['etag'];\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.get_profile(\n",
                      "  profile_id=profile_id,\n",
                      "  include_activity=True,\n",
                      ")\n",
                      "\n",
                      "profile_etag = response.get_headers()['Etag']\n",
                      "profile = response.get_result()\n",
                      "\n",
                      "print(json.dumps(profile, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "put": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "Update a trusted profile",
        "description": "Update the name or description of an existing trusted profile.",
        "operationId": "update_profile",
        "parameters": [
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Version of the trusted profile to be updated.\nSpecify the version that you retrived when reading list of trusted profiles.\nThis value helps to identify any parallel usage of trusted profile.\nPass * to indicate to update any version available. This might result in stale updates.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTrustedProfileRequest"
              }
            }
          },
          "description": "Request to update a trusted profile.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful - Trusted profile updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustedProfile"
                },
                "example": {
                  "id": "Profile-94188726-7725-4c78-a686-b5deb4d47cb5",
                  "entity_tag": "5-29d5f70272e5f13930938ca32f30223d",
                  "crn": "crn:v1:bluemix:public:iam-identity::a/18e3020749ce4744b0b472466d61fdb4::profile:Profile-94188726-7725-4c78-a686-b5deb4d47cb5",
                  "name": "My profile updated",
                  "description": "A superb profile updated",
                  "created_at": "2021-07-28T09:59+0000",
                  "modified_at": "2021-07-28T16:29+0000",
                  "iam_id": "iam-Profile-94188726-7725-4c78-a686-b5deb4d47cb5",
                  "account_id": "18e3020749ce4744b0b472466d61fdb4",
                  "ims_account_id": 8794967,
                  "ims_user_id": 234876
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Trusted profile with provided parameters not found."
          },
          "409": {
            "description": "Conflict - there must have been an update in parallel,\nthe specified If-Match header does not match the\ncurrent Trusted profile record. Retrieve the current Trusted profile\nagain and apply the changes to that version.\n"
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.update"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PUT \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'If-Match: <value of etag header from GET request>' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Accept: application/json' \\\n",
                      "-d '{\n",
                      "  \"name\": \"My Profile updated\",\n",
                      "  \"description\": \"My updated desc\"\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "updateProfileOptions := iamIdentityService.NewUpdateProfileOptions(profileId, profileEtag)\n",
                      "updateProfileOptions.SetDescription(\"This is an updated description\")\n",
                      "\n",
                      "profile, response, err := iamIdentityService.UpdateProfile(updateProfileOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(profile, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "String newDescription = \"updated description\";\n",
                      "UpdateProfileOptions updateProfileOptions = new UpdateProfileOptions.Builder()\n",
                      "    .profileId(profileId)\n",
                      "    .ifMatch(profileEtag)\n",
                      "    .description(newDescription)\n",
                      "    .build();\n",
                      "\n",
                      "Response<TrustedProfile> response = service.updateProfile(updateProfileOptions).execute();\n",
                      "TrustedProfile profile = response.getResult();\n",
                      "\n",
                      "System.out.println(profile);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  profileId: profileId,\n",
                      "  ifMatch: profileEtag,\n",
                      "  description: 'This is an updated description',\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.updateProfile(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "profile = iam_identity_service.update_profile(\n",
                      "  profile_id=profile_id, if_match=profile_etag, description='This is an updated description'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(profile, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "Delete a trusted profile",
        "description": "Delete a trusted profile. When you delete trusted profile, compute resources and federated users are unlinked from the profile and can no longer apply the trusted profile identity.",
        "operationId": "delete_profile",
        "parameters": [
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted Successful - no further details."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Trusted profile with given ID not found."
          },
          "409": {
            "description": "Conflict - Trusted profile could not be deleted."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.delete"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.delete"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "deleteProfileOptions := iamIdentityService.NewDeleteProfileOptions(profileId)\n",
                      "\n",
                      "response, err := iamIdentityService.DeleteProfile(deleteProfileOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "DeleteProfileOptions deleteProfileOptions = new DeleteProfileOptions.Builder()\n",
                      "    .profileId(profileId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<Void> response = service.deleteProfile(deleteProfileOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  profileId\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  await iamIdentityService.deleteProfile(params);\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.delete_profile(profile_id=profile_id)"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/profiles/{profile-id}/rules": {
      "post": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "Create claim rule for a trusted profile",
        "description": "Create a claim rule for a trusted profile. There is a limit of 20 rules per trusted profile.",
        "operationId": "create_claim_rule",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile to create a claim rule.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileClaimRuleRequest"
              }
            }
          },
          "description": "Request to create a claim rule for trusted profile.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileClaimRule"
                },
                "example": {
                  "id": "ClaimRule-faa0b1f4-d9e0-42f3-b61c-3927db1cef9b",
                  "entity_tag": "1-cd52f1eaf1e7464f9ba30f37c5c5fe32",
                  "created_at": "2021-07-28T10:23+0000",
                  "modified_at": "2021-07-28T10:23+0000",
                  "name": "My Claim rule",
                  "type": "Profile-SAML",
                  "realm_name": "https://www.example.org/my-nice-idp",
                  "expiration": 3600,
                  "conditions": {
                    "claim": "groups",
                    "operator\"": "EQUALS",
                    "value": "\"cloud-docs-dev\""
                  }
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "409": {
            "description": "Create Conflict - Claim rule could not be created. Response if the Object could not be created in the persistence layer."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.update"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID/rules' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Accept: application/json' \\\n",
                      "-d '{\n",
                      "  \"type\": \"Profile-SAML\",\n",
                      "  \"realm_name\": \"https://www.example.org/my-nice-idp\",\n",
                      "  \"expiration\": 43200,\n",
                      "  \"conditions\": [\n",
                      "  {\n",
                      "\"claim\": \"groups\",\n",
                      "\"operator\": \"EQUALS\",\n",
                      "\"value\": \"\\\"cloud-docs-dev\\\"\"\n",
                      "  }\n",
                      "  ]\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "profileClaimRuleConditions := new(iamidentityv1.ProfileClaimRuleConditions)\n",
                      "profileClaimRuleConditions.Claim = core.StringPtr(\"blueGroups\")\n",
                      "profileClaimRuleConditions.Operator = core.StringPtr(\"EQUALS\")\n",
                      "profileClaimRuleConditions.Value = core.StringPtr(\"\\\"cloud-docs-dev\\\"\")\n",
                      "\n",
                      "createClaimRuleOptions := iamIdentityService.NewCreateClaimRuleOptions(profileId, claimRuleType, []iamidentityv1.ProfileClaimRuleConditions{*profileClaimRuleConditions})\n",
                      "createClaimRuleOptions.SetName(\"claimRule\")\n",
                      "createClaimRuleOptions.SetRealmName(realmName)\n",
                      "createClaimRuleOptions.SetExpiration(int64(43200))\n",
                      "\n",
                      "claimRule, response, err := iamIdentityService.CreateClaimRule(createClaimRuleOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(claimRule, \"\", \"  \")\n",
                      "fmt.Println(string(b))\n",
                      "claimRuleId = *claimRule.ID"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "ProfileClaimRuleConditions condition = new ProfileClaimRuleConditions.Builder()\n",
                      "    .claim(\"blueGroups\")\n",
                      "    .operator(\"EQUALS\")\n",
                      "    .value(\"\\\"cloud-docs-dev\\\"\")\n",
                      "    .build();\n",
                      "\n",
                      "List<ProfileClaimRuleConditions> conditions = new ArrayList<>();\n",
                      "conditions.add(condition);\n",
                      "\n",
                      "CreateClaimRuleOptions createClaimRuleOptions = new CreateClaimRuleOptions.Builder()\n",
                      "    .profileId(profileId)\n",
                      "    .type(claimRuleType)\n",
                      "    .realmName(realmName)\n",
                      "    .expiration(43200)\n",
                      "    .conditions(conditions)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ProfileClaimRule> response = service.createClaimRule(createClaimRuleOptions).execute();\n",
                      "ProfileClaimRule claimRule = response.getResult();\n",
                      "claimRuleId = claimRule.getId();\n",
                      "\n",
                      "System.out.println(claimRule);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const val = \"{'Europe_Group'}\";\n",
                      "const profileClaimRuleConditionsModel = {\n",
                      "  claim: 'blueGroups',\n",
                      "  operator: 'EQUALS',\n",
                      "  value: JSON.stringify(val),\n",
                      "};\n",
                      "\n",
                      "const conditions = [profileClaimRuleConditionsModel];\n",
                      "\n",
                      "const params = {\n",
                      "  profileId: profileId,\n",
                      "  type: 'Profile-SAML',\n",
                      "  realmName: realmName,\n",
                      "  expiration: 43200,\n",
                      "  conditions,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.createClaimRule(params);\n",
                      "  claimRuleId = res.result.id\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "profile_claim_rule_conditions_model = {}\n",
                      "profile_claim_rule_conditions_model['claim'] = 'blueGroups'\n",
                      "profile_claim_rule_conditions_model['operator'] = 'EQUALS'\n",
                      "profile_claim_rule_conditions_model['value'] = '\\\"cloud-docs-dev\\\"'\n",
                      "\n",
                      "claimRule = iam_identity_service.create_claim_rule(\n",
                      "  profile_id=profile_id,\n",
                      "  type='Profile-SAML',\n",
                      "  realm_name='https://sdk.test.realm/1234',\n",
                      "  expiration=43200,\n",
                      "  conditions=[profile_claim_rule_conditions_model],\n",
                      ").get_result()\n",
                      "\n",
                      "claimRule_id = claimRule['id']\n",
                      "\n",
                      "print(json.dumps(claimRule, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "List claim rules for a trusted profile",
        "description": "Get a list of all claim rules for a trusted profile. The `profile-id` query parameter determines the profile from which to retrieve the list of claim rules.",
        "operationId": "list_claim_rules",
        "parameters": [
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileClaimRuleList"
                },
                "example": {
                  "rules": [
                    {
                      "id": "ClaimRule-faa0b1f4-d9e0-42f3-b61c-3927db1cef9b",
                      "entity_tag": "1-cd52f1eaf1e7464f9ba30f37c5c5fe32",
                      "created_at": "2021-07-28T10:23+0000",
                      "modified_at": "2021-07-28T10:23+0000",
                      "name": "My Claim rule",
                      "type": "Profile-SAML",
                      "realm_name": "https://www.example.org/my-nice-idp",
                      "expiration": 3600,
                      "conditions": [
                        {
                          "claim": "groups",
                          "operator\"": "EQUALS",
                          "value": "\"cloud-docs-dev\""
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Trusted profile ID does not match Authorization token, Trusted profile ID not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.get"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.get"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID/rules' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Accept: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "listClaimRulesOptions := iamIdentityService.NewListClaimRulesOptions(profileId)\n",
                      "\n",
                      "claimRulesList, response, err := iamIdentityService.ListClaimRules(listClaimRulesOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(claimRulesList, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "ListClaimRulesOptions listClaimRulesOptions = new ListClaimRulesOptions.Builder()\n",
                      "    .profileId(profileId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ProfileClaimRuleList> response = service.listClaimRules(listClaimRulesOptions).execute();\n",
                      "ProfileClaimRuleList claimRules = response.getResult();\n",
                      "\n",
                      "System.out.println(claimRules);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  profileId,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.listClaimRules(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "claimRule_list = iam_identity_service.list_claim_rules(\n",
                      "  profile_id=profile_id,\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(claimRule_list, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/profiles/{profile-id}/rules/{rule-id}": {
      "get": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "Get a claim rule for a trusted profile",
        "description": "A specific claim rule can be fetched for a given trusted profile ID and rule ID.",
        "operationId": "get_claim_rule",
        "parameters": [
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rule-id",
            "in": "path",
            "description": "ID of the claim rule to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful - Get of Claim rule.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileClaimRule"
                },
                "example": {
                  "id": "ClaimRule-faa0b1f4-d9e0-42f3-b61c-3927db1cef9b",
                  "entity_tag": "1-cd52f1eaf1e7464f9ba30f37c5c5fe32",
                  "created_at": "2021-07-28T10:23+0000",
                  "modified_at": "2021-07-28T10:23+0000",
                  "name": "My Claim rule",
                  "type": "Profile-SAML",
                  "realm_name": "https://www.example.org/my-nice-idp",
                  "expiration": 3600,
                  "conditions": {
                    "claim": "groups",
                    "operator\"": "EQUALS",
                    "value": "\"cloud-docs-dev\""
                  }
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Claim rule with provided parameters not found."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.get"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.get"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID/rules/CLAIM_RULE_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Accept: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getClaimRuleOptions := iamIdentityService.NewGetClaimRuleOptions(profileId, claimRuleId)\n",
                      "\n",
                      "claimRule, response, err := iamIdentityService.GetClaimRule(getClaimRuleOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "claimRuleEtag = response.GetHeaders().Get(\"Etag\")\n",
                      "b, _ := json.MarshalIndent(claimRule, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetClaimRuleOptions getClaimRuleOptions = new GetClaimRuleOptions.Builder()\n",
                      "    .profileId(profileId)\n",
                      "    .ruleId(claimRuleId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ProfileClaimRule> response = service.getClaimRule(getClaimRuleOptions).execute();\n",
                      "ProfileClaimRule claimRule = response.getResult();\n",
                      "claimRuleEtag = response.getHeaders().values(\"Etag\").get(0);\n",
                      "\n",
                      "System.out.println(claimRule);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  profileId,\n",
                      "  ruleId: claimRuleId,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getClaimRule(params);\n",
                      "  claimRuleEtag = res.headers['etag'];\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.get_claim_rule(profile_id=profile_id, rule_id=claimRule_id)\n",
                      "\n",
                      "claimRule_etag = response.get_headers()['Etag']\n",
                      "claimRule = response.get_result()\n",
                      "\n",
                      "print(json.dumps(claimRule, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "put": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "Update claim rule for a trusted profile",
        "description": "Update a specific claim rule for a given trusted profile ID and rule ID.",
        "operationId": "update_claim_rule",
        "parameters": [
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rule-id",
            "in": "path",
            "description": "ID of the claim rule to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Version of the claim rule to be updated.\nSpecify the version that you retrived when reading list of claim rules.\nThis value helps to identify any parallel usage of claim rule.\nPass * to indicate to update any version available. This might result in stale updates.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileClaimRuleRequest"
              }
            }
          },
          "description": "Request to update a claim rule.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful - Claim rule updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileClaimRule"
                },
                "example": {
                  "id": "ClaimRule-faa0b1f4-d9e0-42f3-b61c-3927db1cef9b",
                  "entity_tag": "1-cd52f1eaf1e7464f9ba30f37c5c5fe32",
                  "created_at": "2021-07-28T10:23+0000",
                  "modified_at": "2021-07-28T17:16+0000",
                  "name": "My Claim rule updated",
                  "type": "Profile-SAML",
                  "realm_name": "https://www.example.org/my-nice-idp",
                  "expiration": 2600,
                  "conditions": {
                    "claim": "groups",
                    "operator\"": "CONTAINS",
                    "value": "\"cloud-docs-dev\""
                  }
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Claim rule with provided parameters not found."
          },
          "409": {
            "description": "Conflict - there must have been an update in parallel,\nthe specified If-Match header does not match the\ncurrent claim rule record. Retrieve the current claim rule\nagain and apply the changes to that version.\n"
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.update"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PUT \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID/rules/CLAIM_RULE_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'If-Match: <value of etag header from GET request>' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Accept: application/json' \\\n",
                      "-d '{\n",
                      "  \"type\": \"Profile-SAML\",\n",
                      "  \"realm_name\": \"https://w3id.sso.ibm.com/auth/sps/samlidp2/saml20\",\n",
                      "  \"expiration\": 10000,\n",
                      "  \"conditions\": [\n",
                      "  {\n",
                      "\"claim\": \"groups\",\n",
                      "\"operator\": \"CONTAINS\",\n",
                      "\"value\": \"\\\"cloud-docs-dev\\\"\"\n",
                      "  }\n",
                      "  ]\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "profileClaimRuleConditions := new(iamidentityv1.ProfileClaimRuleConditions)\n",
                      "profileClaimRuleConditions.Claim = core.StringPtr(\"blueGroups\")\n",
                      "profileClaimRuleConditions.Operator = core.StringPtr(\"EQUALS\")\n",
                      "profileClaimRuleConditions.Value = core.StringPtr(\"\\\"Europe_Group\\\"\")\n",
                      "\n",
                      "updateClaimRuleOptions := iamIdentityService.NewUpdateClaimRuleOptions(profileId, claimRuleId, claimRuleEtag, claimRuleType, []iamidentityv1.ProfileClaimRuleConditions{*profileClaimRuleConditions})\n",
                      "updateClaimRuleOptions.SetRealmName(realmName)\n",
                      "updateClaimRuleOptions.SetExpiration(int64(33200))\n",
                      "\n",
                      "claimRule, response, err := iamIdentityService.UpdateClaimRule(updateClaimRuleOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(claimRule, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "ProfileClaimRuleConditions condition = new ProfileClaimRuleConditions.Builder()\n",
                      "    .claim(\"blueGroups\")\n",
                      "    .operator(\"CONTAINS\")\n",
                      "    .value(\"\\\"Europe_Group\\\"\")\n",
                      "    .build();\n",
                      "\n",
                      "List<ProfileClaimRuleConditions> conditions = new ArrayList<>();\n",
                      "conditions.add(condition);\n",
                      "\n",
                      "UpdateClaimRuleOptions updateClaimRuleOptions = new UpdateClaimRuleOptions.Builder()\n",
                      "    .profileId(profileId)\n",
                      "    .ruleId(claimRuleId)\n",
                      "    .ifMatch(claimRuleEtag)\n",
                      "    .expiration(33200)\n",
                      "    .conditions(conditions)\n",
                      "    .type(claimRuleType)\n",
                      "    .realmName(realmName)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ProfileClaimRule> response = service.updateClaimRule(updateClaimRuleOptions).execute();\n",
                      "ProfileClaimRule claimRule = response.getResult();\n",
                      "\n",
                      "System.out.println(claimRule);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const val = \"{'Europe_Group'}\";\n",
                      "const profileClaimRuleConditionsModel = {\n",
                      "  claim: 'blueGroups',\n",
                      "  operator: 'EQUALS',\n",
                      "  value: JSON.stringify(val),\n",
                      "};\n",
                      "\n",
                      "const conditions = [profileClaimRuleConditionsModel];\n",
                      "\n",
                      "const params = {\n",
                      "  profileId,\n",
                      "  ruleId: claimRuleId,\n",
                      "  ifMatch: claimRuleEtag,\n",
                      "  type: 'Profile-SAML',\n",
                      "  realmName: realmName,\n",
                      "  expiration: 33200,\n",
                      "  conditions,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.updateClaimRule(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "profile_claim_rule_conditions_model = {}\n",
                      "profile_claim_rule_conditions_model['claim'] = 'blueGroups'\n",
                      "profile_claim_rule_conditions_model['operator'] = 'EQUALS'\n",
                      "profile_claim_rule_conditions_model['value'] = '\\\"Europe_Group\\\"'\n",
                      "\n",
                      "claimRule = iam_identity_service.update_claim_rule(\n",
                      "  profile_id=profile_id,\n",
                      "  rule_id=claimRule_id,\n",
                      "  if_match=claimRule_etag,\n",
                      "  expiration=33200,\n",
                      "  conditions=[profile_claim_rule_conditions_model],\n",
                      "  type='Profile-SAML',\n",
                      "  realm_name='https://sdk.test.realm/1234',\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(claimRule, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "Delete a claim rule",
        "description": "Delete a claim rule. When you delete a claim rule, federated user or compute resources are no longer required to meet the conditions of the claim rule in order to apply the trusted profile.",
        "operationId": "delete_claim_rule",
        "parameters": [
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rule-id",
            "in": "path",
            "description": "ID of the claim rule to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted Successful - no further details."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Claim rule with given ID not found."
          },
          "409": {
            "description": "Conflict - Claim rule could not be deleted."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.update"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID/rules/CLAIM_RULE_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "deleteClaimRuleOptions := iamIdentityService.NewDeleteClaimRuleOptions(profileId, claimRuleId)\n",
                      "\n",
                      "response, err := iamIdentityService.DeleteClaimRule(deleteClaimRuleOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "DeleteClaimRuleOptions deleteClaimRuleOptions = new DeleteClaimRuleOptions.Builder()\n",
                      "    .profileId(profileId)\n",
                      "    .ruleId(claimRuleId)\n",
                      "    .build();\n",
                      "Response<Void> response = service.deleteClaimRule(deleteClaimRuleOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  profileId,\n",
                      "  ruleId: claimRuleId,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  await iamIdentityService.deleteClaimRule(params);\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.delete_claim_rule(profile_id=profile_id, rule_id=claimRule_id)"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/profiles/{profile-id}/links": {
      "post": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "Create link to a trusted profile",
        "description": "Create a direct link between a specific compute resource and a trusted profile, rather than creating conditions that a compute resource must fulfill to apply a trusted profile.",
        "operationId": "create_link",
        "parameters": [
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProfileLinkRequest"
              }
            }
          },
          "description": "Request to create a Link to Trusted profile.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Link successfully created for trusted profile. Response if the Object could be created in the persistence layer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileLink"
                },
                "example": {
                  "id": "ClaimRule-faa0b1f4-d9e0-42f3-b61c-3927db1cef9b",
                  "entity_tag": "1-cd52f1eaf1e7464f9ba30f37c5c5fe32",
                  "created_at": "2021-07-28T10:23+0000",
                  "modified_at": "2021-07-28T10:23+0000",
                  "name": "Link to Compute Resource",
                  "cr_type": "VSI",
                  "link": {
                    "crn": "crn:v1:bluemix:public:iam-identity::a/18e3020749ce4744b0b472466d61fdb4::profile:ClaimRule-faa0b1f4-d9e0-42f3-b61c-3927db1cef9b",
                    "namespace": "default",
                    "name": "my compute resource name"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "409": {
            "description": "Create Conflict - Link could not be created. Response if the Object could not be created in the persistence layer."
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation. happened."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.update"
            },
            {
              "name": "iam-identity.profile.linkToResource"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID/links' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Accept: application/json' \\\n",
                      "-d '{\n",
                      "  \"name\": \"my link\",\n",
                      "  \"cr_type\": \"VSI\",\n",
                      "  \"link\": {\n",
                      "\"crn\": \"crn:v1:bluemix:public:iam-identity::a/18e3020749ce4744b0b472466d61fdb4::computeresource:Fake-Compute-Resource\",\n",
                      "\"namespace\": \"default\",\n",
                      "\"name\": \"my compute resource name\"\n",
                      "  }\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "createProfileLinkRequestLink := new(iamidentityv1.CreateProfileLinkRequestLink)\n",
                      "createProfileLinkRequestLink.CRN = core.StringPtr(\"crn:v1:staging:public:iam-identity::a/\" + accountID + \"::computeresource:Fake-Compute-Resource\")\n",
                      "createProfileLinkRequestLink.Namespace = core.StringPtr(\"default\")\n",
                      "createProfileLinkRequestLink.Name = core.StringPtr(\"niceName\")\n",
                      "\n",
                      "createLinkOptions := iamIdentityService.NewCreateLinkOptions(profileId, \"ROKS_SA\", createProfileLinkRequestLink)\n",
                      "createLinkOptions.SetName(\"niceLink\")\n",
                      "\n",
                      "link, response, err := iamIdentityService.CreateLink(createLinkOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(link, \"\", \"  \")\n",
                      "fmt.Println(string(b))\n",
                      "linkId = *link.ID"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CreateProfileLinkRequestLink link = new CreateProfileLinkRequestLink.Builder()\n",
                      "    .crn(\"crn:v1:staging:public:iam-identity::a/\" + accountId + \"::computeresource:Fake-Compute-Resource\")\n",
                      "    .namespace(\"default\")\n",
                      "    .name(\"nice name\")\n",
                      "    .build();\n",
                      "\n",
                      "CreateLinkOptions createLinkOptions = new CreateLinkOptions.Builder()\n",
                      "    .profileId(profileId)\n",
                      "    .name(\"Nice link\")\n",
                      "    .crType(\"ROKS_SA\")\n",
                      "    .link(link)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ProfileLink> response = service.createLink(createLinkOptions).execute();\n",
                      "ProfileLink linkResponse = response.getResult();\n",
                      "linkId = linkResponse.getId();\n",
                      "\n",
                      "System.out.println(linkResponse);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const CreateProfileLinkRequestLink = {\n",
                      "  crn: `crn:v1:staging:public:iam-identity::a/{accountId}::computeresource:Fake-Compute-Resource`,\n",
                      "  namespace: 'default',\n",
                      "  name: 'nice name',\n",
                      "};\n",
                      "\n",
                      "const params = {\n",
                      "  profileId: profileId,\n",
                      "  name: 'nice link',\n",
                      "  crType: 'ROKS_SA',\n",
                      "  link: CreateProfileLinkRequestLink,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.createLink(params)\n",
                      "  linkId = res.result.id\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CreateProfileLinkRequestLink = {}\n",
                      "CreateProfileLinkRequestLink['crn'] = (\n",
                      "  'crn:v1:staging:public:iam-identity::a/' + account_id + '::computeresource:Fake-Compute-Resource'\n",
                      ")\n",
                      "CreateProfileLinkRequestLink['namespace'] = 'default'\n",
                      "CreateProfileLinkRequestLink['name'] = 'nice name'\n",
                      "\n",
                      "link = iam_identity_service.create_link(\n",
                      "  profile_id=profile_id, name='nice link', cr_type='ROKS_SA', link=CreateProfileLinkRequestLink\n",
                      ").get_result()\n",
                      "\n",
                      "link_id = link['id']\n",
                      "\n",
                      "print(json.dumps(link, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "List links to a trusted profile",
        "description": "Get a list of links to a trusted profile.",
        "operationId": "list_links",
        "parameters": [
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful - Get list of link to a trusted profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileLinkList"
                },
                "example": {
                  "links": [
                    {
                      "id": "ClaimRule-faa0b1f4-d9e0-42f3-b61c-3927db1cef9b",
                      "entity_tag": "1-cd52f1eaf1e7464f9ba30f37c5c5fe32",
                      "created_at": "2021-07-28T10:23+0000",
                      "modified_at": "2021-07-28T10:23+0000",
                      "name": "Link to Compute Resource",
                      "cr_type": "VSI",
                      "link": {
                        "crn": "crn:v1:bluemix:public:iam-identity::a/18e3020749ce4744b0b472466d61fdb4::profile:ClaimRule-faa0b1f4-d9e0-42f3-b61c-3927db1cef9b",
                        "namespace": "default",
                        "name": "my compute resource name"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "profile with provided ID not found."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.get"
            },
            {
              "name": "iam-identity.profile.linkToResource"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.get"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID/links' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Accept: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "listLinksOptions := iamIdentityService.NewListLinksOptions(profileId)\n",
                      "\n",
                      "linkList, response, err := iamIdentityService.ListLinks(listLinksOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(linkList, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "ListLinksOptions listLinksOptions = new ListLinksOptions.Builder()\n",
                      "    .profileId(profileId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ProfileLinkList> response = service.listLinks(listLinksOptions).execute();\n",
                      "ProfileLinkList links = response.getResult();\n",
                      "\n",
                      "System.out.println(links);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  profileId,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.listLinks(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "link_list = iam_identity_service.list_links(\n",
                      "  profile_id=profile_id,\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(link_list, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/profiles/{profile-id}/links/{link-id}": {
      "get": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "Get link to a trusted profile",
        "description": "Get a specific link to a trusted profile by `link_id`.",
        "operationId": "get_link",
        "parameters": [
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "link-id",
            "in": "path",
            "description": "ID of the link",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful - Get of link to a trusted profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileLink"
                },
                "example": {
                  "id": "ClaimRule-faa0b1f4-d9e0-42f3-b61c-3927db1cef9b",
                  "entity_tag": "1-cd52f1eaf1e7464f9ba30f37c5c5fe32",
                  "created_at": "2021-07-28T10:23+0000",
                  "modified_at": "2021-07-28T10:23+0000",
                  "name": "Link to Compute Resource",
                  "cr_type": "VSI",
                  "link": {
                    "crn": "crn:v1:bluemix:public:iam-identity::a/18e3020749ce4744b0b472466d61fdb4::profile:ClaimRule-faa0b1f4-d9e0-42f3-b61c-3927db1cef9b",
                    "namespace": "default",
                    "name": "my compute resource name"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Link with provided ID not found."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.get"
            },
            {
              "name": "iam-identity.profile.linkToResource"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.get"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID/links/LINK_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getLinkOptions := iamIdentityService.NewGetLinkOptions(profileId, linkId)\n",
                      "\n",
                      "link, response, err := iamIdentityService.GetLink(getLinkOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetLinkOptions getLinkOptions = new GetLinkOptions.Builder()\n",
                      "    .profileId(profileId)\n",
                      "    .linkId(linkId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ProfileLink> response = service.getLink(getLinkOptions).execute();\n",
                      "ProfileLink link = response.getResult();\n",
                      "\n",
                      "System.out.println(link);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  profileId: profileId,\n",
                      "  linkId,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getLink(params)\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.get_link(profile_id=profile_id, link_id=link_id)\n",
                      "\n",
                      "link = response.get_result()\n",
                      "\n",
                      "print(json.dumps(link, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "Delete link to a trusted profile",
        "description": "Delete a link between a compute resource and a trusted profile.",
        "operationId": "delete_link",
        "parameters": [
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "link-id",
            "in": "path",
            "description": "ID of the link",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted Successful - no further details."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Link with given ID not found."
          },
          "409": {
            "description": "Conflict - Link could not be deleted."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.update"
            },
            {
              "name": "iam-identity.profile.linkToResource"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID/links/LINKS_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "deleteLinkOptions := iamIdentityService.NewDeleteLinkOptions(profileId, linkId)\n",
                      "\n",
                      "response, err := iamIdentityService.DeleteLink(deleteLinkOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "DeleteLinkOptions deleteLinkOptions = new DeleteLinkOptions.Builder()\n",
                      "    .profileId(profileId)\n",
                      "    .linkId(linkId)\n",
                      "    .build();\n",
                      "Response<Void> response = service.deleteLink(deleteLinkOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  profileId,\n",
                      "  linkId,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  await iamIdentityService.deleteLink(params);\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.delete_link(profile_id=profile_id, link_id=link_id)"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/profiles/{profile-id}/identities": {
      "get": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "Get a list of identities that can assume the trusted profile",
        "description": "Get a list of identities that can assume the trusted profile",
        "operationId": "get_profile_identities",
        "parameters": [
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with identities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileIdentitiesResponse"
                },
                "example": {
                  "entity_tag": "1-cd52f1eaf1e7464f9ba30f37c5c5fe32",
                  "identities": [
                    {
                      "iam_id": "IBMid-1234567898",
                      "identifier": "IBMid-1234567898",
                      "type": "user",
                      "name": "user@ibm.com",
                      "email": "user@ibm.com",
                      "accounts": "account in the token",
                      "description": "description"
                    },
                    {
                      "iam_id": "iam-ServiceId-ee1103f8-e03b-4d02-a977-e540ebdffb16",
                      "identifier": "ServiceId-ee1103f8-e03b-4d02-a977-e540ebdffb16",
                      "type": "serviceid"
                    },
                    {
                      "iam_id": "crn-crn:v1:staging:public:cloudantnosqldb:us-south:a/36d797c19715462e8a0eaeacefe82f8b:4adba58a-c3f7-4c37-b904-bc965e6d562a::",
                      "identifier": "crn:v1:staging:public:cloudantnosqldb:us-south:a/36d797c19715462e8a0eaeacefe82f8b:4adba58a-c3f7-4c37-b904-bc965e6d562a::",
                      "type": "crn",
                      "description": "cloudant database shared with profile"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Profile not found."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.get"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.get"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID/identities' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Accept: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getProfileIdentitiesOptions := iamidentityv1.GetProfileIdentitiesOptions{\n",
                      "  ProfileID: &profileId,\n",
                      "}\n",
                      "\n",
                      "profileIdentities, response, err := iamIdentityService.GetProfileIdentities(&getProfileIdentitiesOptions)\n",
                      "\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(profileIdentities, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetProfileIdentitiesOptions getProfileIdentitiesOptions = new GetProfileIdentitiesOptions.Builder()\n",
                      "    .profileId(profileId).build();\n",
                      "Response<ProfileIdentitiesResponse> response = service.getProfileIdentities(getProfileIdentitiesOptions)\n",
                      "    .execute();\n",
                      "\n",
                      "ProfileIdentitiesResponse profileIdentityResponseResult = response.getResult();\n",
                      "profileIdentitiesEtag = profileIdentityResponseResult.getEntityTag();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  profileId,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getProfileIdentities(params);\n",
                      "  const { result } = res;\n",
                      "  profileIdentitiesEtag = result.entity_tag;\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.get_profile_identities(profile_id=profile_id)"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "put": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "Update the list of identities that can assume the trusted profile",
        "description": "Update the list of identities that can assume the trusted profile",
        "operationId": "set_profile_identities",
        "parameters": [
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Entity tag of the Identities to be updated. Specify the tag that you retrieved when reading the Profile Identities. This value helps identify parallel usage of this API. Pass * to indicate updating any available version, which may result in stale updates.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileIdentitiesUpdateRequest"
              }
            }
          },
          "description": "Request to update identities.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response with identities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileIdentitiesResponse"
                },
                "example": {
                  "entity_tag": "1-cd52f1eaf1e7464f9ba30f37c5c5fe32",
                  "identities": [
                    {
                      "iam_id": "IBMid-12345678",
                      "identifier": "IBMid-12345678",
                      "type": "user",
                      "accounts": "BSS_account_id in token",
                      "description": "description"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Profile not found."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.update"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PUT \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID/identities' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'If-Match: <value of etag header from GET request>' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Accept: application/json'\n",
                      "-d '{\n",
                      "  \"identities\": [\n",
                      "{\n",
                      "\"iam_id\": \"IBMid-665002HHL3\",\n",
                      "\"identifier\": \"IBMid-665002HHL3\",\n",
                      "\"type\": \"user\",\n",
                      "\"description\": \"memeber of main account\",\n",
                      "\"accounts\": [\"36d797c19715462e8a0eaeacefe82f8b\"]\n",
                      "}]\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "accounts := []string{accountID}\n",
                      "identity := &iamidentityv1.ProfileIdentityRequest{\n",
                      "  Identifier:  &iamID,\n",
                      "  Accounts:    accounts,\n",
                      "  Type:        core.StringPtr(\"user\"),\n",
                      "  Description: core.StringPtr(\"Identity description\"),\n",
                      "}\n",
                      "listProfileIdentity := []iamidentityv1.ProfileIdentityRequest{*identity}\n",
                      "setProfileIdentitiesOptions := iamidentityv1.SetProfileIdentitiesOptions{\n",
                      "  ProfileID:  &profileId,\n",
                      "  Identities: listProfileIdentity,\n",
                      "  IfMatch:    &profileEtag,\n",
                      "}\n",
                      "\n",
                      "profileIdnetities, response, err := iamIdentityService.SetProfileIdentities(&setProfileIdentitiesOptions)\n",
                      "\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(profileIdnetities, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "List<String> accounts = new ArrayList<String>();\n",
                      "accounts.add(accountId);\n",
                      "String type = \"user\";\n",
                      "String description = \"Identity description\";\n",
                      "ProfileIdentityRequest profileIdentity = new ProfileIdentityRequest.Builder()\n",
                      "    .identifier(iamId)\n",
                      "    .accounts(accounts)\n",
                      "    .type(type)\n",
                      "    .description(description)\n",
                      "    .build();\n",
                      "List<ProfileIdentityRequest> listProfileIdentity = new ArrayList<ProfileIdentityRequest>();\n",
                      "listProfileIdentity.add(profileIdentity);\n",
                      "\n",
                      "SetProfileIdentitiesOptions setProfileIdentitiesOptions = new SetProfileIdentitiesOptions.Builder()\n",
                      "    .profileId(profileId)\n",
                      "    .identities(listProfileIdentity)\n",
                      "    .ifMatch(profileIdentitiesEtag)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ProfileIdentitiesResponse> response = service.setProfileIdentities(setProfileIdentitiesOptions)\n",
                      "    .execute();\n",
                      "ProfileIdentitiesResponse profileIdentitiesResponseResult = response.getResult();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const profileaccounts=[accountId];\n",
                      "const ProfileIdentity= {\n",
                      "  identifier: iamId,\n",
                      "  type: 'user',\n",
                      "  accounts: profileaccounts,\n",
                      "  description: 'identity description'\n",
                      "}\n",
                      "const profileIdentities= [ProfileIdentity]\n",
                      "const params = {\n",
                      "  profileId: profileId,\n",
                      "  identities: profileIdentities,\n",
                      "  ifMatch: profileIdentitiesEtag\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.setProfileIdentities(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "accounts = [account_id]\n",
                      "profileIdentity = ProfileIdentityRequest(\n",
                      "  identifier=iam_id, accounts=accounts, type=\"user\", description=\"Identity description\"\n",
                      ")\n",
                      "profile_identities_input = [profileIdentity]\n",
                      "\n",
                      "response = iam_identity_service.set_profile_identities(\n",
                      "  profile_id=profile_id, if_match=profile_identity_etag, identities=profile_identities_input\n",
                      ")"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/profiles/{profile-id}/identities/{identity-type}": {
      "post": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "Add a specific identity that can assume the trusted profile",
        "description": "Add a specific identity that can assume the trusted profile",
        "operationId": "set_profile_identity",
        "parameters": [
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identity-type",
            "in": "path",
            "description": "Type of the identity",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "serviceid",
                "crn"
              ]
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileIdentityRequest"
              }
            }
          },
          "description": "Request to update identities.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response with identities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileIdentityResponse"
                },
                "example": {
                  "entity_tag": "1-cd52f1eaf1e7464f9ba30f37c5c5fe32",
                  "identities": [
                    {
                      "iam_id": "IBMid-12345678",
                      "identifier": "IBMid-12345678",
                      "type": "user",
                      "accounts": [
                        "BSS_account_id"
                      ],
                      "description": "description"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Profile not found."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.update"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID/identities/IDENTITY_TYPE' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Accept: application/json'\n",
                      "-d '{\n",
                      "  \"iam_id\": \"IBMid-665002HHL3\",\n",
                      "  \"identifier\": \"IBMid-665002HHL3\",\n",
                      "  \"type\": \"user\",\n",
                      "  \"description\": \"memeber of main account\",\n",
                      "  \"accounts\": [\"36d797c19715462e8a0eaeacefe82f8b\"]\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "accounts := []string{accountID}\n",
                      "setProfileIdentityOptions := iamidentityv1.SetProfileIdentityOptions{\n",
                      "  ProfileID:    &profileId,\n",
                      "  IdentityType: core.StringPtr(\"user\"),\n",
                      "  Identifier:   &iamIDMember,\n",
                      "  Accounts:     accounts,\n",
                      "  Type:         core.StringPtr(\"user\"),\n",
                      "  Description:  core.StringPtr(\"Identity description\"),\n",
                      "}\n",
                      "\n",
                      "profileIdnetity, response, err := iamIdentityService.SetProfileIdentity(&setProfileIdentityOptions)\n",
                      "\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(profileIdnetity, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "List<String> accounts = new ArrayList<String>();\n",
                      "accounts.add(accountId);\n",
                      "String type = \"user\";\n",
                      "String description = \"Identity description\";\n",
                      "\n",
                      "SetProfileIdentityOptions setProfileIdentityOptions = new SetProfileIdentityOptions.Builder()\n",
                      "    .profileId(profileId)\n",
                      "    .identityType(type)\n",
                      "    .identifier(iamIdMember)\n",
                      "    .type(\"user\")\n",
                      "    .accounts(accounts)\n",
                      "    .description(description)\n",
                      "    .build();\n",
                      "Response<ProfileIdentityResponse> response = service.setProfileIdentity(setProfileIdentityOptions).execute();\n",
                      "\n",
                      "ProfileIdentityResponse profileIdentityResponseResult = response.getResult();\n",
                      "System.out.println(profileIdentityResponseResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const profileaccounts=[accountId];\n",
                      "const params = {\n",
                      "  profileId: profileId,\n",
                      "  identityType: 'user',\n",
                      "  identifier: iamIdMember,\n",
                      "  type: 'user',\n",
                      "  accounts: profileaccounts,\n",
                      "  description: 'identity description'\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.setProfileIdentity(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "accounts = [account_id]\n",
                      "response = iam_identity_service.set_profile_identity(\n",
                      "  profile_id=profile_id,\n",
                      "  identity_type=\"user\",\n",
                      "  identifier=iam_id_member,\n",
                      "  type=\"user\",\n",
                      "  accounts=accounts,\n",
                      "  description=\"Identity description\",\n",
                      ")"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/profiles/{profile-id}/identities/{identity-type}/{identifier-id}": {
      "get": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "Get the identity that can assume the trusted profile",
        "description": "Get the identity that can assume the trusted profile",
        "operationId": "get_profile_identity",
        "parameters": [
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identity-type",
            "in": "path",
            "description": "Type of the identity",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "serviceid",
                "crn"
              ]
            }
          },
          {
            "name": "identifier-id",
            "in": "path",
            "description": "Identifier of the identity that can assume the trusted profiles.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with identities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileIdentityResponse"
                },
                "example": {
                  "iam_id": "IBMid-12345678",
                  "identifier": "IBMid-12345678",
                  "type": "user",
                  "accounts": [
                    "BSS_account_id"
                  ],
                  "description": "description"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Profile not found."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.get"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.get"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID/identities/IDENTITY_TYPE/IDENTIFIER_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Accept: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getProfileIdentityOptions := iamidentityv1.GetProfileIdentityOptions{\n",
                      "  ProfileID:    &profileId,\n",
                      "  IdentityType: core.StringPtr(\"user\"),\n",
                      "  IdentifierID: &iamIDMember,\n",
                      "}\n",
                      "\n",
                      "profileIdnetity, response, err := iamIdentityService.GetProfileIdentity(&getProfileIdentityOptions)\n",
                      "\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(profileIdnetity, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetProfileIdentityOptions getProfileIdentityOptions = new GetProfileIdentityOptions.Builder()\n",
                      "    .profileId(profileId)\n",
                      "    .identityType(\"user\")\n",
                      "    .identifierId(iamIdMember)\n",
                      "    .build();\n",
                      "Response<ProfileIdentityResponse> response = service.getProfileIdentity(getProfileIdentityOptions).execute();\n",
                      "\n",
                      "ProfileIdentityResponse profileIdentityResponseResult = response.getResult();\n",
                      "System.out.println(profileIdentityResponseResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  profileId: profileId,\n",
                      "  identityType: 'user',\n",
                      "  identifierId: iamId\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getProfileIdentity(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.get_profile_identity(\n",
                      "  profile_id=profile_id, identity_type=\"user\", identifier_id=iam_id_member\n",
                      ")"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Trusted profiles operations"
        ],
        "summary": "Delete the identity that can assume the trusted profile",
        "description": "Delete the identity that can assume the trusted profile",
        "operationId": "delete_profile_identity",
        "parameters": [
          {
            "name": "profile-id",
            "in": "path",
            "description": "ID of the trusted profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identity-type",
            "in": "path",
            "description": "Type of the identity",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "serviceid",
                "crn"
              ]
            }
          },
          {
            "name": "identifier-id",
            "in": "path",
            "description": "Identifier of the identity that can assume the trusted profiles.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted Successful - no further details."
          },
          "400": {
            "description": "Parameter validation failed."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Profile not found."
          },
          "500": {
            "description": "Internal Server error."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile.update"
            }
          ]
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.profile.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE \\\n",
                      "'https://iam.cloud.ibm.com/v1/profiles/PROFILE_ID/identities/IDENTITY_TYPE/IDENTIFIER_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Accept: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "deleteProfileIdentityOptions := iamidentityv1.DeleteProfileIdentityOptions{\n",
                      "  ProfileID:    &profileId,\n",
                      "  IdentityType: core.StringPtr(\"user\"),\n",
                      "  IdentifierID: &iamIDMember,\n",
                      "}\n",
                      "\n",
                      "response, err := iamIdentityService.DeleteProfileIdentity(&deleteProfileIdentityOptions)\n",
                      "\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "DeleteProfileIdentityOptions deleteProfileIdentityOptions = new DeleteProfileIdentityOptions.Builder()\n",
                      "    .profileId(profileId)\n",
                      "    .identityType(\"user\")\n",
                      "    .identifierId(iamIdMember)\n",
                      "    .build();\n",
                      "Response<Void> response = service.deleteProfileIdentity(deleteProfileIdentityOptions).execute();\n",
                      "\n",
                      "Void profileIdentityResponseResult = response.getResult();\n",
                      "System.out.println(profileIdentityResponseResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  profileId: profileId,\n",
                      "  identityType: 'user',\n",
                      "  identifierId: iamIdMember\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.deleteProfileIdentity(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.delete_profile_identity(\n",
                      "  profile_id=profile_id, identity_type=\"user\", identifier_id=iam_id_member\n",
                      ")"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/activity/accounts/{account_id}/report": {
      "post": {
        "tags": [
          "Activity Operations"
        ],
        "summary": "Trigger activity report for the account",
        "description": "Trigger activity report for the account by specifying the account ID. It can take a few minutes to generate the report for retrieval.",
        "operationId": "create_report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Optional report type. The supported value is 'inactive'. List all identities that have not authenticated within the time indicated by duration.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "inactive"
            }
          },
          {
            "name": "duration",
            "in": "query",
            "description": "Optional duration of the report, supported unit of duration is hours",
            "required": false,
            "schema": {
              "type": "string",
              "default": "720"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Create report accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportReference"
                },
                "example": {
                  "reference": "abc11111-b222-c333-d444-abc123def456"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation happened."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.report.create"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST \\\n",
                      "'https://iam.cloud.ibm.com/v1/activity/accounts/ACCOUNT_ID/report' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "createReportOptions := iamIdentityService.NewCreateReportOptions(accountID)\n",
                      "createReportOptions.SetType(\"inactive\")\n",
                      "createReportOptions.SetDuration(\"120\")\n",
                      "\n",
                      "report, response, err := iamIdentityService.CreateReport(createReportOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(report, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CreateReportOptions createReportOptions = new CreateReportOptions.Builder()\n",
                      "    .accountId(accountId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ReportReference> response = service.createReport(createReportOptions).execute();\n",
                      "ReportReference reportReference = response.getResult();\n",
                      "\n",
                      "reportReferenceValue = reportReference.getReference();\n",
                      "\n",
                      "System.out.println(reportReferenceValue);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  accountId: accountId,\n",
                      "  type: 'inactive',\n",
                      "  duration: '120',\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.createReport(params);\n",
                      "  reportReference = res.reference;\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "create_report_response = iam_identity_service.create_report(\n",
                      "  account_id=account_id,\n",
                      "  type=\"inactive\",\n",
                      "  duration=\"120\",\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(create_report_response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/activity/accounts/{account_id}/report/{reference}": {
      "get": {
        "tags": [
          "Activity Operations"
        ],
        "summary": "Get activity report across on account scope",
        "description": "Get activity report for the account by specifying the account ID and the reference that is generated by triggering the report. Reports older than a day are deleted when generating a new report.",
        "operationId": "get_report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reference",
            "in": "path",
            "description": "Reference for the report to be generated, You can use 'latest' to get the latest report for the given account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful - report retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                },
                "example": {
                  "created_by": "iam-id",
                  "reference": "abc11111-b222-c333-d444-abc123def456",
                  "report_duration": 720,
                  "report_start_time": "2022-01-24T19:07:37:999+0000",
                  "report_end_time": "2022-30-24T19:07:37:999+0000",
                  "users": {
                    "iam_id": "IBMid-12345678",
                    "name": "Name123",
                    "username": "user@ibm.com",
                    "email": "user@ibm.com",
                    "last_authn": "2022-03-18T19:07:37:999+0000"
                  },
                  "serviceids": {
                    "id": "serviceid-123",
                    "name": "nice serviceid",
                    "last_authn": "2022-03-18T19:07:37:999+0000"
                  },
                  "profiles": {
                    "id": "profileid-123",
                    "name": "nice profile",
                    "last_authn": "2022-03-18T19:07:37:999+0000"
                  },
                  "apikeys": [
                    {
                      "id": "apikey-123",
                      "name": "sample serviceid apikey",
                      "type": "serviceid",
                      "serviceid": {
                        "id": "serviceid-123",
                        "name": "sample serviceid"
                      },
                      "last_authn": "2022-03-18T19:07:37:999+0000"
                    },
                    {
                      "id": "apikey-456",
                      "name": "sample user apikey",
                      "type": "user",
                      "user": {
                        "iam_id": "IBMid-4567",
                        "name": "Name456",
                        "username": "user@ibm.com",
                        "email": "user@ibm.com"
                      },
                      "last_authn": "2022-03-10T19:07:37:999+0000"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Report not complete yet."
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Report not found."
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation happened."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.report.get"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/activity/accounts/ACCOUNT_ID/report/REFERENCE' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getReportOptions := iamIdentityService.NewGetReportOptions(accountID, \"latest\")\n",
                      "\n",
                      "report, response, err := iamIdentityService.GetReport(getReportOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(report, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetReportOptions getReportOptions = new GetReportOptions.Builder()\n",
                      "    .accountId(accountId)\n",
                      "    .reference(reportReferenceValue)\n",
                      "    .build();\n",
                      "\n",
                      "Response<Report> response = service.getReport(getReportOptions).execute();\n",
                      "Report fetchedReport = response.getResult();\n",
                      "\n",
                      "System.out.println(fetchedReport);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  accountId: accountId,\n",
                      "  reference: 'latest',\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getReport(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "get_report_response = iam_identity_service.get_report(\n",
                      "  account_id=account_id, reference=\"latest\"\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(get_report_response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/identity/token#apikey": {
      "post": {
        "tags": [
          "Token operations"
        ],
        "summary": "Create an IAM access token for a user or service ID using an API key",
        "description": "Creates a non-opaque access token for an API key.",
        "operationId": "getToken_ApiKey",
        "x-sdk-exclude": true,
        "parameters": [
          {
            "name": "ibm-cloud-tenant",
            "in": "header",
            "description": "A comma separated list of enterprise ids and/or account ids. If present, an IAM token for the API key can only be created if the account id or enterprise id of the API key is contained in this header.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "description": "Grant type for this API call. You must set the grant type to `urn:ibm:params:oauth:grant-type:apikey`.",
                    "type": "string"
                  },
                  "apikey": {
                    "description": "The value of the api key.",
                    "type": "string"
                  }
                },
                "required": [
                  "grant_type",
                  "apikey"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token-response"
                },
                "example": {
                  "access_token": "ACCESS_TOKEN",
                  "refresh_token": "not_supported",
                  "token_type": "bearer",
                  "expires_in": 3600,
                  "expiration": 1616750582
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation happened.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.serviceid-apikey.login"
            },
            {
              "name": "iam-identity.user-apikey.login"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST \\\n",
                      "'https://iam.cloud.ibm.com/identity/token' \\\n",
                      "-H 'Content-Type: application/x-www-form-urlencoded' \\\n",
                      "-d 'grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=MY_APIKEY'\n"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "parameters": []
    },
    "/identity/token#password": {
      "post": {
        "tags": [
          "Token operations"
        ],
        "summary": "Create an IAM access token for a user using username / password credentials and an optional account identifier",
        "description": "Creates a non-opaque access token for a username and password. To be able to call IBM Cloud APIs, the token must be made account-specific. For this purpose, also pass the 32 character long identifier for your account in the API call. This API call is possible only for non-federated IBMid users.",
        "operationId": "getToken_Password",
        "x-sdk-exclude": true,
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Basic Authorization Header containing a valid client ID and secret. If this header is omitted the request fails with BXNIM0308E: 'No authorization header found'. You can use the client ID and secret that is used by the IBM Cloud CLI: `bx / bx`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ibm-cloud-tenant",
            "in": "header",
            "description": "A comma separated list of enterprise ids and/or account ids. If present, an IAM token for the username / password / account combination can only be created if the account id matches the passed account or the account is member of the enterprise id in this header.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "description": "Grant type for this API call. You must set the grant type to `password`.",
                    "type": "string"
                  },
                  "username": {
                    "description": "The value of the username.",
                    "type": "string"
                  },
                  "password": {
                    "description": "The value of the password.",
                    "type": "string"
                  },
                  "account": {
                    "description": "The 32 character identifier of the account. Specify this parameter to get an account-specific IAM token. IBM Cloud APIs require that IAM tokens are account-specific.",
                    "type": "string"
                  }
                },
                "required": [
                  "grant_type",
                  "username",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token-response"
                },
                "example": {
                  "access_token": "ACCESS_TOKEN",
                  "refresh_token": "not_supported",
                  "token_type": "bearer",
                  "expires_in": 3600,
                  "expiration": 1616750582
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request did not contain valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. Response if unexpected error situation happened.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-events": {
          "description": "An event is generated only when an account is provided.",
          "events": [
            {
              "name": "iam-identity.user-password.login"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST \\\n",
                      "-u 'bx:bx' \\\n",
                      "'https://iam.cloud.ibm.com/identity/token' \\\n",
                      "-H 'Content-Type: application/x-www-form-urlencoded' \\\n",
                      "-d 'grant_type=password&username=USERNAME&password=PASSWORD&account=ACCOUNTIDENTIFIER'\n"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "parameters": []
    },
    "/identity/token#iam-authz": {
      "post": {
        "tags": [
          "Token operations"
        ],
        "summary": "Create an IAM access token based on an authorization policy",
        "description": "Creates a non-opaque access token, if an appropriate authorization policy is in place. This kind of IAM access token is typically used for access between services.",
        "operationId": "getToken_IamAuthz",
        "x-sdk-exclude": true,
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "description": "Grant type for this API call. You must set the grant type to `urn:ibm:params:oauth:grant-type:iam-authz`.",
                    "type": "string"
                  },
                  "access_token": {
                    "description": "The IAM access token of the identity that has the appropriate authorization to create an IAM access token for a given resource.",
                    "type": "string"
                  },
                  "desired_iam_id": {
                    "description": "The IAM ID of the IAM access token identity that should be created. The desired_iam_id identifies a resource identity. The IAM ID consists of the prefix crn- and the CRN of the target identity, e.g. crn-crn:v1:bluemix:public:cloud-object-storage:global:a/59bcbfa6ea2f006b4ed7094c1a08dcdd:1a0ec336-f391-4091-a6fb-5e084a4c56f4::.",
                    "type": "string"
                  }
                },
                "required": [
                  "grant_type",
                  "access_token",
                  "desired_iam_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token-response"
                },
                "example": {
                  "access_token": "ACCESS_TOKEN",
                  "refresh_token": "not_supported",
                  "token_type": "bearer",
                  "expires_in": 3600,
                  "expiration": 1616750582
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation happened.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST \\\n",
                      "'https://iam.cloud.ibm.com/identity/token' \\\n",
                      "-H 'Content-Type: application/x-www-form-urlencoded' \\\n",
                      "-d 'grant_type=urn:ibm:params:oauth:grant-type:iam-authz&access_token=...&desired_iam_id=crn-crn:v1:bluemix:public:cloud-object-storage:global:a/59bcbfa6ea2f006b4ed7094c1a08dcdd:1a0ec336-f391-4091-a6fb-5e084a4c56f4::'\n"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "parameters": []
    },
    "/identity/token#apikey-delegated-refresh-token": {
      "post": {
        "tags": [
          "Token operations"
        ],
        "summary": "Create an IAM access token and delegated refresh token for a user or service ID",
        "description": "Creates a non-opaque access token and a delegated refresh token for an API key.",
        "operationId": "getToken_ApiKey_DelegatedRefreshToken",
        "x-sdk-exclude": true,
        "parameters": [
          {
            "name": "ibm-cloud-tenant",
            "in": "header",
            "description": "A comma separated list of enterprise ids and/or account ids. If present, an IAM token for the API key can only be created if the account id or enterprise id of the API key is contained in this header.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "description": "Grant type for this API call. You must set the grant type to `urn:ibm:params:oauth:grant-type:apikey`.",
                    "type": "string"
                  },
                  "apikey": {
                    "description": "The value of the API key.",
                    "type": "string"
                  },
                  "response_type": {
                    "description": "Either 'delegated_refresh_token' to receive a delegated refresh token only, or 'cloud_iam delegated_refresh_token' to receive both an IAM access token and a delegated refresh token in one API call.",
                    "type": "string"
                  },
                  "receiver_client_ids": {
                    "description": "A comma separated list of one or more client IDs that will be able to consume the delegated refresh token. The service that accepts a delegated refresh token as API parameter must expose its client ID to allow this API call. The receiver of the delegated refresh token will be able to use the refresh token until it expires.",
                    "type": "string"
                  },
                  "delegated_refresh_token_expiry": {
                    "description": "Expiration in seconds until the delegated refresh token must be consumed by the receiver client IDs. After the expiration, no client ID can consume the delegated refresh token, even if the life time of the refresh token inside is still not expired. The default, if not specified, is 518,400 seconds which corresponds to 6 days.",
                    "type": "integer"
                  }
                },
                "required": [
                  "grant_type",
                  "apikey",
                  "response_type",
                  "receiver_client_ids"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token-response"
                },
                "example": {
                  "access_token": "ACCESS_TOKEN",
                  "refresh_token": "not_supported",
                  "delegated_refresh_token": "DELEGATED_REFRESH_TOKEN",
                  "token_type": "bearer",
                  "expires_in": 3600,
                  "expiration": 1616750582
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation happened.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.user-apikey.login"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST \\\n",
                      "'https://iam.cloud.ibm.com/identity/token' \\\n",
                      "-H 'Content-Type: application/x-www-form-urlencoded' \\\n",
                      "-d 'grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=MY_APIKEY&response_type=cloud_iam+delegated_refresh_token&receiver_client_ids=RECEIVER_CLIENTS&delegated_refresh_token_expiry=300'\n"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "parameters": []
    },
    "/identity/token#cr-token": {
      "post": {
        "tags": [
          "Token operations"
        ],
        "summary": "Create an IAM access token for a Trusted Profile based on the provided Compute Resource token",
        "description": "Creates a non-opaque access token without a refresh token for a Trusted Profile",
        "operationId": "getToken_crToken",
        "x-sdk-exclude": true,
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "IBM Services can pass in a Basic Authorization Header representing a client id with a secret. For customers, omit this header parameter. To build a valid Basic Authorization Header, concatenate the client id with a colon and the secret, i.e. `client_id:client_secret`. This sequence must be Base64 encoded, and prefixed with `Basic`, so that a valid Basic Authorization Header would be: `Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ibm-cloud-tenant",
            "in": "header",
            "description": "A comma separated list of enterprise ids and/or account ids. If present, an IAM token for the Trusted Profile can only be created if the Trusted Profile is part of one of the account ids or enterprise ids provided in this header.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "description": "Grant type for this API call. You must set the grant type to `urn:ibm:params:oauth:grant-type:cr-token`.",
                    "type": "string"
                  },
                  "cr_token": {
                    "description": "The value of the Compute Resource token. As this is a JWT token, the string can get very long.",
                    "type": "string"
                  },
                  "profile_id": {
                    "description": "Pass one of 'profile_id', 'profile_name' or 'profile_crn to select which profile should be used for this IAM token. This call can only succeed if you have also linked the Trusted Profile to the Compute Resource, or you have created a Trust Rule from the Trusted Profile to the Compute Resource. If you pass a 'profile_name', then the profile is looked up based on the account_id of the Compute resource. If you pass a 'profile_id' or 'profile_crn', then the profile must exist in the same account like the Compute Resource.",
                    "type": "string"
                  },
                  "profile_name": {
                    "description": "see 'profile_id'",
                    "type": "string"
                  },
                  "profile_crn": {
                    "description": "see 'profile_id'",
                    "type": "string"
                  }
                },
                "required": [
                  "grant_type",
                  "cr_token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token-response"
                },
                "example": {
                  "access_token": "ACCESS_TOKEN",
                  "refresh_token": "",
                  "token_type": "bearer",
                  "expires_in": 3600,
                  "expiration": 1616750582
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation happened.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.computeresource-token.login"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST \\\n",
                      "'https://iam.cloud.ibm.com/identity/token' \\\n",
                      "-H 'Content-Type: application/x-www-form-urlencoded' \\\n",
                      "-H 'Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=' \\\n",
                      "--data-urlencode \"grant_type=urn:ibm:params:oauth:grant-type:cr-token\" \\\n",
                      "--data-urlencode \"cr_token=CR-TOKEN\" \\\n",
                      "--data-urlencode \"profile_name=My first profile\"\n"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "parameters": []
    },
    "/identity/token#assume": {
      "post": {
        "tags": [
          "Token operations"
        ],
        "summary": "Create an IAM access token for a Trusted Profile based on the provided entity. Provided entity can be a identity based token which can be a user token, service id token or a cookie.",
        "description": "Creates a non-opaque access token for a profile.",
        "operationId": "getToken_Assume",
        "x-sdk-exclude": true,
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Basic Authorization Header containing a valid client ID \\ and secret. If this header is omitted the request fails with \\ BXNIM0308E: 'No authorization header found'. Make sure your clientId\\ is enabled for assume grant type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "description": "Grant type for this API call. You must set the grant type to `urn:ibm:params:oauth:grant-type:assume`.",
                    "type": "string"
                  },
                  "access_token": {
                    "description": "Pass one of 'access_token', 'refresh_token' or 'cookie' to get a token for the profile. Provided access_token/refresh_token/iam_cookie need to be generated for the user or service id that has trust relationship with the profile. If the profile being assumed must satisfy an MFA requirement for the account, the access_token/refresh_token (...etc) used to assume the profile must meet the same requirement, using the same level MFA or higher.",
                    "type": "string"
                  },
                  "refresh_token": {
                    "description": "see 'access_token'",
                    "type": "string"
                  },
                  "cookie": {
                    "description": "see 'access_token'",
                    "type": "string"
                  },
                  "profile_id": {
                    "description": "Pass one of 'profile_id', 'profile_crn' or 'profile_name' and 'account_id' to select which profile should be used for this IAM token. If you pass a 'profile_id' or 'profile_crn', then the profile must exist in the same account. If you pass a 'profile_name' then 'account_id' need to be passed in the request where the profile is looked up based on the account_id.",
                    "type": "string"
                  },
                  "profile_name": {
                    "description": "see 'profile_id'",
                    "type": "string"
                  },
                  "profile_crn": {
                    "description": "see 'profile_id'",
                    "type": "string"
                  },
                  "account_id": {
                    "description": "ID of the account the profile belongs to",
                    "type": "string"
                  }
                },
                "required": [
                  "grant_type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token-response"
                },
                "example": {
                  "access_token": "ACCESS_TOKEN",
                  "refresh_token": "REFRESH_TOKEN",
                  "token_type": "bearer",
                  "expires_in": 3600,
                  "expiration": 1616750582
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation happened.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-events": {
          "events": [
            {
              "name": "iam-identity.assume-profile.login"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST \\\n",
                      "'https://iam.cloud.ibm.com/identity/token' \\\n",
                      "-H 'Content-Type: application/x-www-form-urlencoded' \\\n",
                      "-H 'Authorization: <client-id>:<client-secret>' \\\n",
                      "--data-urlencode \"grant_type=urn:ibm:params:oauth:grant-type:assume\" \\\n",
                      "--data-urlencode \"access_token=ACCESS-TOKEN\" \\\n",
                      "--data-urlencode \"profile_name=My first profile\"\n"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "parameters": []
    },
    "/v1/mfa/accounts/{account_id}/status": {
      "get": {
        "tags": [
          "MFA enrollment status"
        ],
        "summary": "Get MFA enrollment status for a single user in the account.",
        "description": "Get MFA enrollment status for a single user in the account.",
        "operationId": "get_mfa_status",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "iam_id",
            "in": "query",
            "description": "iam_id of the user. This user must be the member of the account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response. No further actions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMfaEnrollments"
                },
                "example": {
                  "iam_id": "IBMid-12345678",
                  "effective_mfa_type": "id_based_mfa",
                  "id_based_mfa": {
                    "trait_account_default": "LEVEL3",
                    "trait_user_specific\"": "LEVEL2",
                    "trait_effective": "LEVEL2",
                    "complies": true
                  },
                  "account_based_mfa": {
                    "complies": true,
                    "security_questions": {
                      "required": true,
                      "enrolled": true
                    },
                    "totp": {
                      "required\"": true,
                      "enrolled\"": true
                    },
                    "verisign": {
                      "required\"": false,
                      "enrolled": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Report not found."
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation happened."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.mfa-status.get"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/mfa/accounts/ACCOUNT_ID/status?iam_id=IAM_ID' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getMfaStatusOptions := iamIdentityService.NewGetMfaStatusOptions(accountID, iamID)\n",
                      "\n",
                      "mfaStatusResponse, response, err := iamIdentityService.GetMfaStatus(getMfaStatusOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(mfaStatusResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetMfaStatusOptions getMfaStatusOptions = new GetMfaStatusOptions.Builder()\n",
                      "    .accountId(accountId)\n",
                      "    .iamId(iamId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<UserMfaEnrollments> response = service.getMfaStatus(getMfaStatusOptions).execute();\n",
                      "UserMfaEnrollments userMfaEnrollmentsResponse = response.getResult();\n",
                      "\n",
                      "System.out.println(userMfaEnrollmentsResponse);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  accountId: accountId,\n",
                      "  iamId: iamId,\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getMfaStatus(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "get_mfa_status_response = iam_identity_service.get_mfa_status(\n",
                      "  account_id=account_id, iam_id=iam_id\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(get_mfa_status_response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/mfa/accounts/{account_id}/report": {
      "post": {
        "tags": [
          "MFA enrollment status"
        ],
        "summary": "Trigger MFA enrollment status report for the account",
        "description": "Trigger MFA enrollment status report for the account by specifying the account ID. It can take a few minutes to generate the report for retrieval.",
        "operationId": "create_mfa_report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Optional report type. The supported value is 'mfa_status'. List MFA enrollment status for all the identities.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Create report accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportReference"
                },
                "example": {
                  "reference": "abc11111-b222-c333-d444-abc123def456"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation happened."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.report.create"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST \\\n",
                      "'https://iam.cloud.ibm.com/v1/mfa/accounts/ACCOUNT_ID/report?type=mfa_status' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "createMfaReportOptions := iamIdentityService.NewCreateMfaReportOptions(accountID)\n",
                      "createMfaReportOptions.SetType(\"mfa_status\")\n",
                      "\n",
                      "report, response, err := iamIdentityService.CreateMfaReport(createMfaReportOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(report, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CreateMfaReportOptions createMfaReportOptions = new CreateMfaReportOptions.Builder()\n",
                      "    .accountId(accountId)\n",
                      "    .type(\"mfa_status\")\n",
                      "    .build();\n",
                      "\n",
                      "Response<ReportReference> response = service.createMfaReport(createMfaReportOptions).execute();\n",
                      "ReportReference reportReference = response.getResult();\n",
                      "\n",
                      "reportReferenceValue = reportReference.getReference();\n",
                      "\n",
                      "System.out.println(reportReferenceValue);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  accountId: accountId,\n",
                      "  type: 'mfa_status',\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.createMfaReport(params);\n",
                      "  reportReferenceMfa = res.result.reference;\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "create_report_response = iam_identity_service.create_mfa_report(\n",
                      "  account_id=account_id, type=\"mfa_status\"\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(create_report_response, indent=2))\n",
                      "report_reference_mfa = create_report_response['reference']"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/mfa/accounts/{account_id}/report/{reference}": {
      "get": {
        "tags": [
          "MFA enrollment status"
        ],
        "summary": "Get MFA enrollment status report for the account",
        "description": "Get MFA enrollment status report for the account by specifying the account ID and the reference that is generated by triggering the report. Reports older than a day are deleted when generating a new report.",
        "operationId": "get_mfa_report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reference",
            "in": "path",
            "description": "Reference for the report to be generated, You can use 'latest' to get the latest report for the given account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful - report retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportMfaEnrollmentStatus"
                },
                "example": {
                  "created_by": "iam-id",
                  "reference": "abc11111-b222-c333-d444-abc123def456",
                  "report_time": "2022-01-24T19:07:37:999+0000",
                  "account_id": "BSS_account_id",
                  "ims_account_id": "IMS_account_id",
                  "users": {
                    "iam_id": "IBMid-12345678",
                    "name": "Name123",
                    "username": "user@ibm.com",
                    "email": "user@ibm.com"
                  },
                  "enrollments": {
                    "effective_mfa_type": "id_based_mfa",
                    "id_based_mfa": {
                      "trait_account_default": "LEVEL3",
                      "trait_user_specific\"": "LEVEL2",
                      "trait_effective": "LEVEL2",
                      "complies": true
                    },
                    "account_based_mfa": {
                      "complies": true,
                      "security_questions": {
                        "required": true,
                        "enrolled": true
                      },
                      "totp": {
                        "required\"": true,
                        "enrolled\"": true
                      },
                      "verisign": {
                        "required\"": false,
                        "enrolled": false
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "Report not complete yet."
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Report not found."
          },
          "500": {
            "description": "Internal Server error. Response if unexpected error situation happened."
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.report.get"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET \\\n",
                      "'https://iam.cloud.ibm.com/v1/mfa/accounts/ACCOUNT_ID/report/REFERENCE' \\\n",
                      "-H 'Authorization: Bearer TOKEN' \\\n",
                      "-H 'Content-Type: application/json'\n"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getMfaReportOptions := iamIdentityService.NewGetMfaReportOptions(accountID, \"latest\")\n",
                      "\n",
                      "report, response, err := iamIdentityService.GetMfaReport(getMfaReportOptions)\n",
                      "if err != nil {\n",
                      "  panic(err)\n",
                      "}\n",
                      "b, _ := json.MarshalIndent(report, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetMfaReportOptions getMfaReportOptions = new GetMfaReportOptions.Builder()\n",
                      "    .accountId(accountId)\n",
                      "    .reference(reportReferenceValue)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ReportMfaEnrollmentStatus> response = service.getMfaReport(getMfaReportOptions).execute();\n",
                      "ReportMfaEnrollmentStatus fetchedReport = response.getResult();\n",
                      "\n",
                      "System.out.println(fetchedReport);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  accountId: accountId,\n",
                      "  reference: 'latest',\n",
                      "};\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getMfaReport(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "get_report_response = iam_identity_service.get_mfa_report(\n",
                      "  account_id=account_id, reference=report_reference_mfa\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(get_report_response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/profile_templates": {
      "get": {
        "tags": [
          "Trusted profile template"
        ],
        "summary": "List trusted profile templates",
        "description": "List the trusted profile templates in an enterprise account.",
        "operationId": "list_profile_templates",
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "description": "Account ID of the trusted profile templates to query. This parameter is required unless using a pagetoken.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional size of a single page.",
            "required": false,
            "schema": {
              "type": "string",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "pagetoken",
            "in": "query",
            "description": "Optional Prev or Next page token returned from a previous query execution. Default is start with first page.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Optional sort property. If specified, the returned templates are sorted according to this property.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "last_modified_at",
                "name"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Optional sort order.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response.",
            "required": false,
            "schema": {
              "type": "string",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustedProfileTemplateList"
                },
                "example": {
                  "offset": 0,
                  "limit": 20,
                  "first": "https://iam.cloud.ibm.com/v1/profile_templates?account_id=5bbe28be34524sdbdaa34d37d1f2294a",
                  "profile_templates": [
                    {
                      "id": "ProfileTemplate-2c434aba-38a4-402c-a8a1-c444570b7408",
                      "version": 1,
                      "account_id": "5bbe28be34524sdbdaa34d37d1f2294a",
                      "name": "My new profile template",
                      "committed": true,
                      "profile": {
                        "name": "Profile from template",
                        "description": "this is my spanking profile created from a template v1",
                        "rules": [
                          {
                            "type": "Profile-SAML",
                            "realm_name": "idp_realm_name",
                            "expiration": 43200,
                            "conditions": [
                              {
                                "claim": "name",
                                "operator": "EQUALS",
                                "value": "\"MyName\""
                              }
                            ]
                          }
                        ]
                      },
                      "policy_template_references": [
                        {
                          "id": "Policy_Template-ABCD",
                          "version": "1"
                        },
                        {
                          "id": "Policy_Template-ABCDe",
                          "version": "1"
                        }
                      ],
                      "created_at": "2023-01-12T13:09:59:761+0000",
                      "created_by_id": "IBMid-12345678901",
                      "last_modified_at": "2023-02-24T13:48:44:198+0000",
                      "last_modified_by_id": "IBMid-12345678901",
                      "entity_tag": "6-aa54ac91e59055f80b58da2c5a4c426f",
                      "crn": "crn:v1:staging:public:iam-identity::a/5bbe28be34524sdbdaa34d37d1f2294a::template:ProfileTemplate-2c434aba-38a4-402c-a8a1-c444570b7408"
                    }
                  ]
                }
              }
            },
            "description": "Successful Template retrieval"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile-template.read"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://iam.cloud.ibm.com/v1/profile_templates?account_id=5bbe28be34524sdbdaa34d37d1f2294a' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "listOptions := &iamidentityv1.ListProfileTemplatesOptions{\n",
                      "  AccountID: &enterpriseAccountID,\n",
                      "}\n",
                      "listResponse, response, err := iamIdentityService.ListProfileTemplates(listOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(listResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "ListProfileTemplatesOptions listOptions = new ListProfileTemplatesOptions.Builder()\n",
                      "    .accountId(enterpriseAccountId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<TrustedProfileTemplateList> response = service.listProfileTemplates(listOptions).execute();\n",
                      "TrustedProfileTemplateList listResult = response.getResult();\n",
                      "System.out.println(listResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  accountId: enterpriseAccountId,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.listProfileTemplates(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "list_response = iam_identity_service.list_profile_templates(account_id=enterprise_account_id)\n",
                      "\n",
                      "profile_template_list = list_response.get_result()\n",
                      "print('\\nlist_profile_templates response: ', json.dumps(profile_template_list, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "tags": [
          "Trusted profile template"
        ],
        "summary": "Create a trusted profile template",
        "description": "Create a new trusted profile template in an enterprise account.",
        "operationId": "create_profile_template",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrustedProfileTemplateRequest"
              }
            }
          },
          "description": "Request to create a trusted profile template.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustedProfileTemplateResponse"
                },
                "example": {
                  "id": "ProfileTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9",
                  "version": 1,
                  "account_id": "5bbe28be34524sdbdaa34d37d1f2294a",
                  "name": "db admin template",
                  "committed": false,
                  "profile": {
                    "name": "Profile for DB Admins",
                    "description": "allows users to admin db instances",
                    "rules": [
                      {
                        "type": "Profile-SAML",
                        "realm_name": "${IDP_REALM_NAME}",
                        "expiration": 43200,
                        "conditions": [
                          {
                            "claim": "name",
                            "operator": "EQUALS",
                            "value": "\"My Name\""
                          }
                        ]
                      }
                    ],
                    "identities": [
                      {
                        "iam_id": "IBMid-123456789",
                        "identifier": "IBMid-123456789",
                        "accounts": [
                          "5bbe28be34524sdbdaa34d37d1f2294a"
                        ]
                      }
                    ]
                  },
                  "policy_template_references": [
                    {
                      "id": "Policy Template-12345",
                      "version": "1"
                    }
                  ],
                  "created_at": "2023-03-07T13:55:33:428+0000",
                  "created_by_id": "IBMid-12345678901",
                  "last_modified_at": "2023-03-07T13:55:33:428+0000",
                  "last_modified_by_id": "IBMid-12345678901",
                  "entity_tag": "1-2da85a8f1172fc3527378318d3182778",
                  "crn": "crn:v1:staging:public:iam-identity::a/5bbe28be34524sdbdaa34d37d1f2294a::template:ProfileTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9"
                }
              }
            },
            "description": "Template successfully created"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile-template.create"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://iam.cloud.ibm.com/v1/profile_templates' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN' \\\n",
                      "-d '{\n",
                      "    \"account_id\": \"5bbe28be34524sdbdaa34d37d1f2294a\",\n",
                      "    \"name\": \"db admin template\",\n",
                      "    \"profile\": {\n",
                      "        \"name\": \"Profile for DB Admins\",\n",
                      "        \"description\": \"allows users to admin db instances\",\n",
                      "        \"identities\": [\n",
                      "            {\n",
                      "                \"type\": \"user\",\n",
                      "                \"identifier\": \"IBMid-123456789\",\n",
                      "                \"accounts\": [\n",
                      "                    \"5bbe28be34524sdbdaa34d37d1f2294a\"\n",
                      "                ]\n",
                      "            }\n",
                      "        ],\n",
                      "        \"rules\": [\n",
                      "            {\n",
                      "                \"type\": \"Profile\",\n",
                      "                \"realm_name\": \"${IDP_REALM_NAME}\",\n",
                      "                \"expiration\": 43200,\n",
                      "                \"conditions\": [\n",
                      "                    {\n",
                      "                        \"claim\": \"name\",\n",
                      "                        \"operator\": \"EQUALS\",\n",
                      "                        \"value\": \"\\\"My Name\\\"\"\n",
                      "                    }\n",
                      "                ]\n",
                      "            }\n",
                      "        ]\n",
                      "    },\n",
                      "    \"policy_template_references\": [\n",
                      "        {\n",
                      "            \"id\": \"Policy Template-12345\",\n",
                      "            \"version\": 1\n",
                      "        }\n",
                      "    ]\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "profileClaimRuleConditions := new(iamidentityv1.ProfileClaimRuleConditions)\n",
                      "profileClaimRuleConditions.Claim = core.StringPtr(\"blueGroups\")\n",
                      "profileClaimRuleConditions.Operator = core.StringPtr(\"EQUALS\")\n",
                      "profileClaimRuleConditions.Value = core.StringPtr(\"\\\"cloud-docs-dev\\\"\")\n",
                      "\n",
                      "profileTemplateClaimRule := new(iamidentityv1.TrustedProfileTemplateClaimRule)\n",
                      "profileTemplateClaimRule.Name = core.StringPtr(\"My Rule\")\n",
                      "profileTemplateClaimRule.RealmName = &realmName\n",
                      "profileTemplateClaimRule.Type = &claimRuleType\n",
                      "profileTemplateClaimRule.Expiration = core.Int64Ptr(int64(43200))\n",
                      "profileTemplateClaimRule.Conditions = []iamidentityv1.ProfileClaimRuleConditions{*profileClaimRuleConditions}\n",
                      "\n",
                      "profile := new(iamidentityv1.TemplateProfileComponentRequest)\n",
                      "profile.Name = &profileTemplateProfileName\n",
                      "profile.Description = core.StringPtr(\"Example Profile created from Profile Template\")\n",
                      "profile.Rules = []iamidentityv1.TrustedProfileTemplateClaimRule{*profileTemplateClaimRule}\n",
                      "\n",
                      "createOptions := &iamidentityv1.CreateProfileTemplateOptions{\n",
                      "  Name:        &profileTemplateName,\n",
                      "  Description: core.StringPtr(\"Example Profile Template\"),\n",
                      "  AccountID:   &enterpriseAccountID,\n",
                      "  Profile:     profile,\n",
                      "}\n",
                      "\n",
                      "createResponse, response, err := iamIdentityService.CreateProfileTemplate(createOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(createResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))\n",
                      "\n",
                      "// Grab the ID and Etag value from the response for use in the update operation\n",
                      "profileTemplateId = *createResponse.ID\n",
                      "profileTemplateVersion = *createResponse.Version\n",
                      "profileTemplateEtag = response.GetHeaders().Get(\"Etag\")"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "ProfileClaimRuleConditions condition = new ProfileClaimRuleConditions.Builder()\n",
                      "    .claim(\"blueGroups\")\n",
                      "    .operator(\"EQUALS\")\n",
                      "    .value(\"\\\"cloud-docs-dev\\\"\")\n",
                      "    .build();\n",
                      "List<ProfileClaimRuleConditions> conditions = new ArrayList<>();\n",
                      "conditions.add(condition);\n",
                      "\n",
                      "TrustedProfileTemplateClaimRule claimRule = new TrustedProfileTemplateClaimRule.Builder()\n",
                      "    .name(\"My Rule\")\n",
                      "    .realmName(realmName)\n",
                      "    .type(claimRuleType)\n",
                      "    .expiration(43200)\n",
                      "    .conditions(conditions)\n",
                      "    .build();\n",
                      "\n",
                      "TemplateProfileComponentRequest profile = new TemplateProfileComponentRequest.Builder()\n",
                      "    .addRules(claimRule)\n",
                      "    .name(profileTemplateProfileName)\n",
                      "    .description(\"Trusted profile created from a template\")\n",
                      "    .build();\n",
                      "\n",
                      "CreateProfileTemplateOptions createProfileTemplateOptions = new CreateProfileTemplateOptions.Builder()\n",
                      "    .name(profileTemplateName)\n",
                      "    .description(\"IAM enterprise trusted profile template example\")\n",
                      "    .accountId(enterpriseAccountId)\n",
                      "    .profile(profile)\n",
                      "    .build();\n",
                      "\n",
                      "Response<TrustedProfileTemplateResponse> response = service.createProfileTemplate(createProfileTemplateOptions).execute();\n",
                      "TrustedProfileTemplateResponse trustedProfileTemplateResult = response.getResult();\n",
                      "\n",
                      "// Save the id for use by other test methods.\n",
                      "profileTemplateId = trustedProfileTemplateResult.getId();\n",
                      "profileTemplateVersion = trustedProfileTemplateResult.getVersion().longValue();\n",
                      "\n",
                      "System.out.println(trustedProfileTemplateResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const condition = {\n",
                      "  claim: \"blueGroups\",\n",
                      "  operator: \"EQUALS\",\n",
                      "  value: \"\\\"cloud-docs-dev\\\"\",\n",
                      "}\n",
                      "const claimRule = {\n",
                      "   name: \"My Rule\",\n",
                      "   realm_name: realmName,\n",
                      "   type: 'Profile-SAML',\n",
                      "   expiration: 43200,\n",
                      "   conditions: [condition],\n",
                      "}\n",
                      "const profile = {\n",
                      "  rules: [claimRule],\n",
                      "  name: \"Profile-From-Example-Template\",\n",
                      "  description: \"Trusted profile created from a template\",\n",
                      "}\n",
                      "const templateParams = {\n",
                      "  name: \"Example-Profile-Template\",\n",
                      "  description: \"IAM enterprise trusted profile template example\",\n",
                      "  accountId: enterpriseAccountId,\n",
                      "  profile: profile,\n",
                      "}\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.createProfileTemplate(templateParams);\n",
                      "  profileTemplateEtag = res.headers.etag;\n",
                      "  const { result } = res;\n",
                      "  profileTemplateId = result.id;\n",
                      "  profileTemplateVersion = result.version;\n",
                      "  console.log(JSON.stringify(result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "profile_claim_rule_conditions = {}\n",
                      "profile_claim_rule_conditions['claim'] = 'blueGroups'\n",
                      "profile_claim_rule_conditions['operator'] = 'EQUALS'\n",
                      "profile_claim_rule_conditions['value'] = '\\\"cloud-docs-dev\\\"'\n",
                      "\n",
                      "profile_claim_rule = {}\n",
                      "profile_claim_rule['name'] = 'My Rule'\n",
                      "profile_claim_rule['realm_name'] = 'https://sdk.test.realm/1234'\n",
                      "profile_claim_rule['type'] = 'Profile-SAML'\n",
                      "profile_claim_rule['expiration'] = 43200\n",
                      "profile_claim_rule['conditions'] = [profile_claim_rule_conditions]\n",
                      "\n",
                      "profile = {}\n",
                      "profile['name'] = 'Profile-From-Example-Template'\n",
                      "profile['description'] = 'Trusted profile created from a template'\n",
                      "profile['rules'] = [profile_claim_rule]\n",
                      "\n",
                      "create_response = iam_identity_service.create_profile_template(\n",
                      "  name='Example-Profile-Template',\n",
                      "  description='IAM enterprise trusted profile template example',\n",
                      "  account_id=enterprise_account_id,\n",
                      "  profile=profile,\n",
                      ")\n",
                      "\n",
                      "profile_template = create_response.get_result()\n",
                      "print('\\ncreate_profile_template() response: ', json.dumps(profile_template, indent=2))\n",
                      "\n",
                      "global profile_template_id\n",
                      "profile_template_id = profile_template['id']\n",
                      "global profile_template_version\n",
                      "profile_template_version = profile_template['version']"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/profile_templates/{template_id}": {
      "get": {
        "tags": [
          "Trusted profile template"
        ],
        "summary": "Get latest version of a trusted profile template",
        "description": "Get the latest version of a trusted profile template in an enterprise account.",
        "operationId": "get_latest_profile_template_version",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the trusted profile template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustedProfileTemplateResponse"
                },
                "example": {
                  "id": "ProfileTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9",
                  "version": 1,
                  "account_id": "5bbe28be34524sdbdaa34d37d1f2294a",
                  "name": "db admin template",
                  "committed": false,
                  "profile": {
                    "name": "Profile for DB Admins",
                    "description": "allows users to admin db instances",
                    "rules": [
                      {
                        "type": "Profile-SAML",
                        "realm_name": "${IDP_REALM_NAME}",
                        "expiration": 43200,
                        "conditions": [
                          {
                            "claim": "name",
                            "operator": "EQUALS",
                            "value": "\"My Name\""
                          }
                        ]
                      }
                    ]
                  },
                  "policy_template_references": [
                    {
                      "id": "Policy Template-12345",
                      "version": "1"
                    }
                  ],
                  "created_at": "2023-03-07T13:55:33:428+0000",
                  "created_by_id": "IBMid-12345678901",
                  "last_modified_at": "2023-03-07T13:55:33:428+0000",
                  "last_modified_by_id": "IBMid-12345678901",
                  "entity_tag": "1-2da85a8f1172fc3527378318d3182778",
                  "crn": "crn:v1:staging:public:iam-identity::a/5bbe28be34524sdbdaa34d37d1f2294a::template:ProfileTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9"
                }
              }
            },
            "description": "Successful Template retrieval"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Template not found."
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile-template.read"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://iam.cloud.ibm.com/v1/profile_templates/ProfileTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getOptions := &iamidentityv1.GetLatestProfileTemplateVersionOptions{\n",
                      "  TemplateID: &profileTemplateId,\n",
                      "}\n",
                      "\n",
                      "getResponse, response, err := iamIdentityService.GetLatestProfileTemplateVersion(getOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(getResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetLatestProfileTemplateVersionOptions getOptions = new GetLatestProfileTemplateVersionOptions.Builder()\n",
                      "    .templateId(profileTemplateId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<TrustedProfileTemplateResponse> getResponse = service.getLatestProfileTemplateVersion(getOptions).execute();\n",
                      "TrustedProfileTemplateResponse getResult = getResponse.getResult();\n",
                      "\n",
                      "System.out.println(getResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  templateId: profileTemplateId,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getLatestProfileTemplateVersion(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "get_response = iam_identity_service.get_latest_profile_template_version(template_id=profile_template_id)\n",
                      "\n",
                      "profile_template = get_response.get_result()\n",
                      "print('\\nget_latest_profile_template_version response: ', json.dumps(profile_template, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Trusted profile template"
        ],
        "summary": "Delete all versions of a trusted profile template",
        "description": "Delete all versions of a trusted profile template in an enterprise account. If any version is assigned to child accounts, you must first delete the assignment.",
        "operationId": "delete_all_versions_of_profile_template",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the trusted profile template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Template Deletion"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile-template.delete"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE 'https://iam.cloud.ibm.com/v1/profile_templates/ProfileTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "deleteOptions := &iamidentityv1.DeleteAllVersionsOfProfileTemplateOptions{\n",
                      "  TemplateID: &profileTemplateId,\n",
                      "}\n",
                      "\n",
                      "response, err := iamIdentityService.DeleteAllVersionsOfProfileTemplate(deleteOptions)"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "DeleteAllVersionsOfProfileTemplateOptions deleteTeplateOptions = new DeleteAllVersionsOfProfileTemplateOptions.Builder()\n",
                      "    .templateId(profileTemplateId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<Void> deleteResponse = service.deleteAllVersionsOfProfileTemplate(deleteTeplateOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  templateId: profileTemplateId,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.deleteAllVersionsOfProfileTemplate(params);\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "delete_response = iam_identity_service.delete_all_versions_of_profile_template(\n",
                      "  template_id=profile_template_id\n",
                      ")"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/profile_templates/{template_id}/versions": {
      "get": {
        "tags": [
          "Trusted profile template"
        ],
        "summary": "List trusted profile template versions",
        "description": "List the versions of a trusted profile template in an enterprise account.",
        "operationId": "list_versions_of_profile_template",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the trusted profile template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional size of a single page.",
            "required": false,
            "schema": {
              "type": "string",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "pagetoken",
            "in": "query",
            "description": "Optional Prev or Next page token returned from a previous query execution. Default is start with first page.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Optional sort property. If specified, the returned templated are sorted according to this property",
            "required": false,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "last_modified_at",
                "name"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Optional sort order.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response",
            "required": false,
            "schema": {
              "type": "string",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustedProfileTemplateList"
                },
                "example": {
                  "offset": 0,
                  "limit": 20,
                  "first": "https://iam.cloud.ibm.com/v1/profile_templates/{template_id}/versions",
                  "profile_templates": [
                    {
                      "id": "ProfileTemplate-2c434aba-38a4-402c-a8a1-c444570b7408",
                      "version": 1,
                      "account_id": "5bbe28be34524sdbdaa34d37d1f2294a",
                      "name": "My new profile template",
                      "committed": true,
                      "profile": {
                        "name": "Profile from template",
                        "description": "this is my spanking profile created from a template v1",
                        "rules": [
                          {
                            "type": "Profile-SAML",
                            "realm_name": "idp_realm_name",
                            "expiration": 43200,
                            "conditions": [
                              {
                                "claim": "name",
                                "operator": "EQUALS",
                                "value": "\"MyName\""
                              }
                            ]
                          }
                        ]
                      },
                      "policy_template_references": [
                        {
                          "id": "Policy_Template-ABCD",
                          "version": "1"
                        },
                        {
                          "id": "Policy_Template-ABCDe",
                          "version": "1"
                        }
                      ],
                      "created_at": "2023-01-12T13:09:59:761+0000",
                      "created_by_id": "IBMid-12345678901",
                      "last_modified_at": "2023-02-24T13:48:44:198+0000",
                      "last_modified_by_id": "IBMid-12345678901",
                      "entity_tag": "6-aa54ac91e59055f80b58da2c5a4c426f",
                      "crn": "crn:v1:staging:public:iam-identity::a/5bbe28be34524sdbdaa34d37d1f2294a::template:ProfileTemplate-2c434aba-38a4-402c-a8a1-c444570b7408"
                    }
                  ]
                }
              }
            },
            "description": "Successful Template retrieval"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile-template.read"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://iam.cloud.ibm.com/v1/profile_templates/ProfileTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9/versions/' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "listOptions := &iamidentityv1.ListVersionsOfProfileTemplateOptions{\n",
                      "  TemplateID: &profileTemplateId,\n",
                      "}\n",
                      "listResponse, response, err := iamIdentityService.ListVersionsOfProfileTemplate(listOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(listResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "ListVersionsOfProfileTemplateOptions listOptions = new ListVersionsOfProfileTemplateOptions.Builder()\n",
                      "    .templateId(profileTemplateId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<TrustedProfileTemplateList> listResponse = service.listVersionsOfProfileTemplate(listOptions).execute();\n",
                      "TrustedProfileTemplateList listResult = listResponse.getResult();\n",
                      "\n",
                      "System.out.println(listResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  templateId: profileTemplateId,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.listVersionsOfProfileTemplate(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "list_response = iam_identity_service.list_versions_of_profile_template(template_id=profile_template_id)\n",
                      "profile_template_list = list_response.get_result()\n",
                      "print('\\nlist_profile_template_versions response: ', json.dumps(profile_template_list, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "tags": [
          "Trusted profile template"
        ],
        "summary": "Create new version of a trusted profile template",
        "description": "Create a new version of a trusted profile template in an enterprise account.",
        "operationId": "create_profile_template_version",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the trusted profile template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrustedProfileTemplateRequest"
              }
            }
          },
          "description": "Request to create new version of a Trusted Profile Template",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustedProfileTemplateResponse"
                },
                "example": {
                  "id": "ProfileTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9",
                  "version": 2,
                  "account_id": "5bbe28be34524sdbdaa34d37d1f2294a",
                  "name": "db admin template",
                  "committed": false,
                  "profile": {
                    "name": "Profile for DB Admins",
                    "description": "allows users to admin db instances",
                    "rules": [
                      {
                        "type": "Profile-SAML",
                        "realm_name": "${IDP_REALM_NAME}",
                        "expiration": 43200,
                        "conditions": [
                          {
                            "claim": "name",
                            "operator": "EQUALS",
                            "value": "\"My Name\""
                          }
                        ]
                      }
                    ]
                  },
                  "policy_template_references": [
                    {
                      "id": "Policy Template-12345",
                      "version": "1"
                    }
                  ],
                  "created_at": "2023-03-07T13:55:33:428+0000",
                  "created_by_id": "IBMid-12345678901",
                  "last_modified_at": "2023-03-07T15:05:00:000+0000",
                  "last_modified_by_id": "IBMid-12345678901",
                  "entity_tag": "1-2da85a8f1172fc3527378318d3182778",
                  "crn": "crn:v1:staging:public:iam-identity::a/5bbe28be34524sdbdaa34d37d1f2294a::template:ProfileTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9"
                }
              }
            },
            "description": "Template version created successfully"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile-template.create"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://iam.cloud.ibm.com/v1/profile_templates/{template_id}/versions/' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN' \\\n",
                      "-d '{\n",
                      "    \"account_id\": \"5bbe28be34524sdbdaa34d37d1f2294a\",\n",
                      "    \"name\": \"db admin template\",\n",
                      "    \"profile\": {\n",
                      "        \"name\": \"Profile for DB Admins\",\n",
                      "        \"description\": \"allows users to admin db instances\",\n",
                      "        \"rules\": [\n",
                      "            {\n",
                      "                \"type\": \"Profile\",\n",
                      "                \"realm_name\": \"${IDP_REALM_NAME}\",\n",
                      "                \"expiration\": 43200,\n",
                      "                \"conditions\": [\n",
                      "                    {\n",
                      "                        \"claim\": \"name\",\n",
                      "                        \"operator\": \"EQUALS\",\n",
                      "                        \"value\": \"\\\"My Name\\\"\"\n",
                      "                    }\n",
                      "                ]\n",
                      "            }\n",
                      "        ]\n",
                      "    },\n",
                      "    \"policy_template_references\": [\n",
                      "        {\n",
                      "            \"id\": \"Policy Template-12345\",\n",
                      "            \"version\": 1\n",
                      "        }\n",
                      "    ]\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "profileClaimRuleConditions := new(iamidentityv1.ProfileClaimRuleConditions)\n",
                      "profileClaimRuleConditions.Claim = core.StringPtr(\"blueGroups\")\n",
                      "profileClaimRuleConditions.Operator = core.StringPtr(\"EQUALS\")\n",
                      "profileClaimRuleConditions.Value = core.StringPtr(\"\\\"cloud-docs-dev\\\"\")\n",
                      "\n",
                      "profileTemplateClaimRule := new(iamidentityv1.TrustedProfileTemplateClaimRule)\n",
                      "profileTemplateClaimRule.Name = core.StringPtr(\"My Rule\")\n",
                      "profileTemplateClaimRule.RealmName = &realmName\n",
                      "profileTemplateClaimRule.Type = &claimRuleType\n",
                      "profileTemplateClaimRule.Expiration = core.Int64Ptr(int64(43200))\n",
                      "profileTemplateClaimRule.Conditions = []iamidentityv1.ProfileClaimRuleConditions{*profileClaimRuleConditions}\n",
                      "\n",
                      "profile := new(iamidentityv1.TemplateProfileComponentRequest)\n",
                      "profile.Name = &profileTemplateProfileName\n",
                      "profile.Description = core.StringPtr(\"Example Profile created from Profile Template - new version\")\n",
                      "profile.Rules = []iamidentityv1.TrustedProfileTemplateClaimRule{*profileTemplateClaimRule}\n",
                      "\n",
                      "createOptions := &iamidentityv1.CreateProfileTemplateVersionOptions{\n",
                      "  Name:        &profileTemplateName,\n",
                      "  Description: core.StringPtr(\"Example Profile Template - new version\"),\n",
                      "  AccountID:   &enterpriseAccountID,\n",
                      "  TemplateID:  &profileTemplateId,\n",
                      "  Profile:     profile,\n",
                      "}\n",
                      "\n",
                      "createResponse, response, err := iamIdentityService.CreateProfileTemplateVersion(createOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(createResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))\n",
                      "\n",
                      "// save the new version to be used in subsequent calls\n",
                      "profileTemplateVersion = *createResponse.Version"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "ProfileClaimRuleConditions condition = new ProfileClaimRuleConditions.Builder()\n",
                      "    .claim(\"blueGroups\")\n",
                      "    .operator(\"EQUALS\")\n",
                      "    .value(\"\\\"cloud-docs-dev\\\"\")\n",
                      "    .build();\n",
                      "List<ProfileClaimRuleConditions> conditions = new ArrayList<>();\n",
                      "conditions.add(condition);\n",
                      "\n",
                      "TrustedProfileTemplateClaimRule claimRule = new TrustedProfileTemplateClaimRule.Builder()\n",
                      "    .name(\"My Rule\")\n",
                      "    .realmName(realmName)\n",
                      "    .type(claimRuleType)\n",
                      "    .expiration(43200)\n",
                      "    .conditions(conditions)\n",
                      "    .build();\n",
                      "\n",
                      "List<String> accounts = new ArrayList<String>();\n",
                      "accounts.add(enterpriseAccountId);\n",
                      "ProfileIdentityRequest profileIdentity = new ProfileIdentityRequest.Builder()\n",
                      "    .identifier(iamId)\n",
                      "    .accounts(accounts)\n",
                      "    .type(\"user\")\n",
                      "    .description(\"Identity description\")\n",
                      "    .build();\n",
                      "List<ProfileIdentityRequest> identities = new ArrayList<ProfileIdentityRequest>();\n",
                      "identities.add(profileIdentity);\n",
                      "\n",
                      "TemplateProfileComponentRequest profile = new TemplateProfileComponentRequest.Builder()\n",
                      "    .addRules(claimRule)\n",
                      "    .name(profileTemplateProfileName)\n",
                      "    .description(\"Trusted profile created from a template - new version\")\n",
                      "    .identities(identities)\n",
                      "    .build();\n",
                      "\n",
                      "CreateProfileTemplateVersionOptions createOptions = new CreateProfileTemplateVersionOptions.Builder()\n",
                      "    .accountId(enterpriseAccountId)\n",
                      "    .templateId(profileTemplateId)\n",
                      "    .name(profileTemplateName)\n",
                      "    .description(\"IAM enterprise trusted profile template example - new version\")\n",
                      "    .profile(profile)\n",
                      "    .build();\n",
                      "\n",
                      "Response<TrustedProfileTemplateResponse> createResponse = service.createProfileTemplateVersion(createOptions).execute();\n",
                      "TrustedProfileTemplateResponse createResult = createResponse.getResult();\n",
                      "\n",
                      "// Save the version for use by other test methods.\n",
                      "profileTemplateVersion = createResult.getVersion().longValue();\n",
                      "System.out.println(createResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      " const condition = {\n",
                      "   claim: \"blueGroups\",\n",
                      "   operator: \"EQUALS\",\n",
                      "   value: \"\\\"cloud-docs-dev\\\"\",\n",
                      " }\n",
                      " const claimRule = {\n",
                      "    name: \"My Rule\",\n",
                      "    realm_name: realmName,\n",
                      "    type: 'Profile-SAML',\n",
                      "    expiration: 43200,\n",
                      "    conditions: [condition],\n",
                      " }\n",
                      " const identity = {\n",
                      "   identifier: iamId,\n",
                      "   accounts: [enterpriseAccountId],\n",
                      "   type: \"user\",\n",
                      "   description: \"Identity description\",\n",
                      "}\n",
                      "const profile = {\n",
                      "   rules: [claimRule],\n",
                      "   name: \"Profile-From-Example-Template\",\n",
                      "   description: \"Trusted profile created from a template - new version\",\n",
                      "   identities: [identity],\n",
                      " }\n",
                      " const templateParams = {\n",
                      "   templateId: profileTemplateId,\n",
                      "   name: \"Example-Profile-Template\",\n",
                      "   description: \"IAM enterprise trusted profile template example - new version\",\n",
                      "   accountId: enterpriseAccountId,\n",
                      "   profile: profile,\n",
                      " }\n",
                      "  \n",
                      " try {\n",
                      "   const res = await iamIdentityService.createProfileTemplateVersion(templateParams);\n",
                      "   const { result } = res;\n",
                      "   profileTemplateVersion = result.version;\n",
                      "   console.log(JSON.stringify(result, null, 2));\n",
                      " } catch (err) {\n",
                      "   console.warn(err);\n",
                      " }"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "profile_claim_rule_conditions = {}\n",
                      "profile_claim_rule_conditions['claim'] = 'blueGroups'\n",
                      "profile_claim_rule_conditions['operator'] = 'EQUALS'\n",
                      "profile_claim_rule_conditions['value'] = '\\\"cloud-docs-dev\\\"'\n",
                      "\n",
                      "profile_claim_rule = {}\n",
                      "profile_claim_rule['name'] = 'My Rule'\n",
                      "profile_claim_rule['realm_name'] = 'https://sdk.test.realm/1234'\n",
                      "profile_claim_rule['type'] = 'Profile-SAML'\n",
                      "profile_claim_rule['expiration'] = 43200\n",
                      "profile_claim_rule['conditions'] = [profile_claim_rule_conditions]\n",
                      "\n",
                      "profile_identity = {}\n",
                      "profile_identity['identifier'] = iam_id\n",
                      "profile_identity['accounts'] = [enterprise_account_id]\n",
                      "profile_identity['type'] = 'user'\n",
                      "profile_identity['description'] = 'Identity description'\n",
                      "\n",
                      "profile = {}\n",
                      "profile['name'] = 'Profile-From-Example-Template'\n",
                      "profile['description'] = 'Trusted profile created from a template - new version'\n",
                      "profile['rules'] = [profile_claim_rule]\n",
                      "profile['identities'] = [profile_identity]\n",
                      "\n",
                      "create_response = iam_identity_service.create_profile_template_version(\n",
                      "  template_id=profile_template_id,\n",
                      "  name='Example-Profile-Template',\n",
                      "  description='IAM enterprise trusted profile template example - new version',\n",
                      "  account_id=enterprise_account_id,\n",
                      "  profile=profile,\n",
                      ")\n",
                      "\n",
                      "profile_template = create_response.get_result()\n",
                      "print('\\ncreate_profile_template_version() response: ', json.dumps(profile_template, indent=2))\n",
                      "\n",
                      "global profile_template_version\n",
                      "profile_template_version = profile_template['version']"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/profile_templates/{template_id}/versions/{version}": {
      "get": {
        "tags": [
          "Trusted profile template"
        ],
        "summary": "Get version of trusted profile template",
        "description": "Get a specific version of a trusted profile template in an enterprise account.",
        "operationId": "get_profile_template_version",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the trusted profile template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of the Profile Template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustedProfileTemplateResponse"
                },
                "example": {
                  "id": "ProfileTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9",
                  "version": 1,
                  "account_id": "5bbe28be34524sdbdaa34d37d1f2294a",
                  "name": "db admin template",
                  "committed": false,
                  "profile": {
                    "name": "Profile for DB Admins",
                    "description": "allows users to admin db instances",
                    "rules": [
                      {
                        "type": "Profile-SAML",
                        "realm_name": "${IDP_REALM_NAME}",
                        "expiration": 43200,
                        "conditions": [
                          {
                            "claim": "name",
                            "operator": "EQUALS",
                            "value": "\"My Name\""
                          }
                        ]
                      }
                    ]
                  },
                  "policy_template_references": [
                    {
                      "id": "Policy Template-12345",
                      "version": "1"
                    }
                  ],
                  "created_at": "2023-03-07T13:55:33:428+0000",
                  "created_by_id": "IBMid-12345678901",
                  "last_modified_at": "2023-03-07T13:55:33:428+0000",
                  "last_modified_by_id": "IBMid-12345678901",
                  "entity_tag": "1-2da85a8f1172fc3527378318d3182778",
                  "crn": "crn:v1:staging:public:iam-identity::a/5bbe28be34524sdbdaa34d37d1f2294a::template:ProfileTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9"
                }
              }
            },
            "description": "Successful Template retrieval"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Template version not found."
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile-template.read"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://iam.cloud.ibm.com/v1/profile_templates/{template_id}/versions/{version}' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getOptions := &iamidentityv1.GetProfileTemplateVersionOptions{\n",
                      "  TemplateID: &profileTemplateId,\n",
                      "  Version:    core.StringPtr(strconv.FormatInt(profileTemplateVersion, 10)),\n",
                      "}\n",
                      "getResponse, response, err := iamIdentityService.GetProfileTemplateVersion(getOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(getResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))\n",
                      "\n",
                      "// Grab the Etag value from the response for use in the update operation\n",
                      "profileTemplateEtag = response.GetHeaders().Get(\"Etag\")"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetProfileTemplateVersionOptions getProfileTemplateOptions = new GetProfileTemplateVersionOptions.Builder()\n",
                      "    .templateId(profileTemplateId)\n",
                      "    .version(Long.toString(profileTemplateVersion))\n",
                      "    .build();\n",
                      "\n",
                      "Response<TrustedProfileTemplateResponse> response = service.getProfileTemplateVersion(getProfileTemplateOptions).execute();\n",
                      "TrustedProfileTemplateResponse profileTemplateResult = response.getResult();\n",
                      "\n",
                      "// Grab the Etag value from the response for use in the update operation.\n",
                      "profileTemplateEtag = response.getHeaders().values(\"Etag\").get(0);\n",
                      "\n",
                      "System.out.println(profileTemplateResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  templateId: profileTemplateId,\n",
                      "  version: profileTemplateVersion,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getProfileTemplateVersion(params);\n",
                      "  profileTemplateEtag = res.headers.etag;\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "get_response = iam_identity_service.get_profile_template_version(\n",
                      "  template_id=profile_template_id, version=str(profile_template_version)\n",
                      ")\n",
                      "\n",
                      "profile_template = get_response.get_result()\n",
                      "print('\\nget_profile_template response: ', json.dumps(profile_template, indent=2))\n",
                      "\n",
                      "global profile_template_etag\n",
                      "profile_template_etag = get_response.get_headers()['Etag']\n",
                      "profile_template_etag is not None"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "put": {
        "tags": [
          "Trusted profile template"
        ],
        "summary": "Update version of trusted profile template",
        "description": "Update a specific version of a trusted profile template in an enterprise account.",
        "operationId": "update_profile_template_version",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "description": "Entity tag of the Template to be updated. Specify the tag that you retrieved when reading the Profile Template. This value\nhelps identifying parallel usage of this API. Pass * to indicate to update any version available. This might result in stale updates.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the trusted profile template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of the Profile Template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrustedProfileTemplateRequest"
              }
            }
          },
          "description": "Request to create a trusted profile template.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustedProfileTemplateResponse"
                },
                "example": {
                  "id": "ProfileTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9",
                  "version": 1,
                  "account_id": "5bbe28be34524sdbdaa34d37d1f2294a",
                  "name": "db admin template",
                  "committed": false,
                  "profile": {
                    "name": "Profile for DB Admins",
                    "description": "allows users to admin db instances",
                    "rules": [
                      {
                        "type": "Profile-SAML",
                        "realm_name": "${IDP_REALM_NAME}",
                        "expiration": 43200,
                        "conditions": [
                          {
                            "claim": "name",
                            "operator": "EQUALS",
                            "value": "\"My Name\""
                          }
                        ]
                      }
                    ]
                  },
                  "policy_template_references": [
                    {
                      "id": "Policy Template-12345",
                      "version": "1"
                    }
                  ],
                  "created_at": "2023-03-07T13:55:33:428+0000",
                  "created_by_id": "IBMid-12345678901",
                  "last_modified_at": "2023-03-07T13:55:33:428+0000",
                  "last_modified_by_id": "IBMid-12345678901",
                  "entity_tag": "1-2da85a8f1172fc3527378318d3182778",
                  "crn": "crn:v1:staging:public:iam-identity::a/5bbe28be34524sdbdaa34d37d1f2294a::template:ProfileTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9"
                }
              }
            },
            "description": "Successful updated template"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Template version not found."
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile-template.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PUT 'https://iam.cloud.ibm.com/v1/profile_templates/{template_id}/versions/{version}' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN' \\\n",
                      "-d '{\n",
                      "    \"account_id\": \"5bbe28be34524sdbdaa34d37d1f2294a\",\n",
                      "    \"name\": \"db admin template\",\n",
                      "    \"profile\": {\n",
                      "        \"name\": \"Profile for DB Admins\",\n",
                      "        \"description\": \"allows users to admin db instances\",\n",
                      "        \"rules\": [\n",
                      "            {\n",
                      "                \"type\": \"Profile\",\n",
                      "                \"realm_name\": \"${IDP_REALM_NAME}\",\n",
                      "                \"expiration\": 43200,\n",
                      "                \"conditions\": [\n",
                      "                    {\n",
                      "                        \"claim\": \"name\",\n",
                      "                        \"operator\": \"EQUALS\",\n",
                      "                        \"value\": \"\\\"My Name\\\"\"\n",
                      "                    }\n",
                      "                ]\n",
                      "            }\n",
                      "        ]\n",
                      "    },\n",
                      "    \"policy_template_references\": [\n",
                      "        {\n",
                      "            \"id\": \"Policy Template-12345\",\n",
                      "            \"version\": 1\n",
                      "        }\n",
                      "    ]\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "updateOptions := &iamidentityv1.UpdateProfileTemplateVersionOptions{\n",
                      "  AccountID:   &enterpriseAccountID,\n",
                      "  TemplateID:  &profileTemplateId,\n",
                      "  Version:     core.StringPtr(strconv.FormatInt(profileTemplateVersion, 10)),\n",
                      "  IfMatch:     &profileTemplateEtag,\n",
                      "  Name:        &profileTemplateName,\n",
                      "  Description: core.StringPtr(\"Example Profile Template - updated\"),\n",
                      "}\n",
                      "updateResponse, response, err := iamIdentityService.UpdateProfileTemplateVersion(updateOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(updateResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))\n",
                      "\n",
                      "// Grab the Etag value from the response for use in the update operation.\n",
                      "profileTemplateEtag = response.GetHeaders().Get(\"Etag\")"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "UpdateProfileTemplateVersionOptions updateOptions = new UpdateProfileTemplateVersionOptions.Builder()\n",
                      "    .accountId(enterpriseAccountId)\n",
                      "    .templateId(profileTemplateId)\n",
                      "    .version(Long.toString(profileTemplateVersion))\n",
                      "    .ifMatch(profileTemplateEtag)\n",
                      "    .name(profileTemplateName)\n",
                      "    .description(\"IAM enterprise trusted profile template example - updated\")\n",
                      "    .build();\n",
                      "\n",
                      "Response<TrustedProfileTemplateResponse> updateResponse = service.updateProfileTemplateVersion(updateOptions).execute();\n",
                      "TrustedProfileTemplateResponse updateResult = updateResponse.getResult();\n",
                      "\n",
                      "// Grab the Etag value from the response for use in the update operation.\n",
                      "profileTemplateEtag = updateResponse.getHeaders().values(\"Etag\").get(0);\n",
                      "\n",
                      "System.out.println(updateResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  accountId: enterpriseAccountId,\n",
                      "  templateId: profileTemplateId,\n",
                      "  version: profileTemplateVersion,\n",
                      "  ifMatch: profileTemplateEtag,\n",
                      "  name: \"Example-Profile-Template\",\n",
                      "  description: \"IAM enterprise trusted profile template example - updated\",\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.updateProfileTemplateVersion(params);\n",
                      "  profileTemplateEtag = res.headers.etag;\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "update_response = iam_identity_service.update_profile_template_version(\n",
                      "  account_id=enterprise_account_id,\n",
                      "  template_id=profile_template_id,\n",
                      "  version=str(profile_template_version),\n",
                      "  if_match=profile_template_etag,\n",
                      "  name='Example-Profile-Template',\n",
                      "  description='IAM enterprise trusted profile template example - updated',\n",
                      ")\n",
                      "\n",
                      "profile_template = update_response.get_result()\n",
                      "print('\\nupdate_profile_template() response: ', json.dumps(profile_template, indent=2))\n",
                      "\n",
                      "profile_template_etag = update_response.get_headers()['Etag']"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Trusted profile template"
        ],
        "summary": "Delete version of trusted profile template",
        "description": "Delete a specific version of a trusted profile template in an enterprise account. If the version is assigned to child accounts, you must first delete the assignment.",
        "operationId": "delete_profile_template_version",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the trusted profile template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of the Profile Template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Template Version delete successful"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile-template.delete"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE 'https://iam.cloud.ibm.com/v1/profile_templates/{template_id}/versions/{version}' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "deleteOptions := &iamidentityv1.DeleteProfileTemplateVersionOptions{\n",
                      "  TemplateID: &profileTemplateId,\n",
                      "  Version:    core.StringPtr(\"1\"),\n",
                      "}\n",
                      "\n",
                      "response, err := iamIdentityService.DeleteProfileTemplateVersion(deleteOptions)"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "DeleteProfileTemplateVersionOptions deleteOptions = new DeleteProfileTemplateVersionOptions.Builder()\n",
                      "    .templateId(profileTemplateId)\n",
                      "    .version(\"1\")\n",
                      "    .build();\n",
                      "\n",
                      "Response<Void> deleteResponse = service.deleteProfileTemplateVersion(deleteOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  templateId: profileTemplateId,\n",
                      "  version: 1,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.deleteProfileTemplateVersion(params);\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "delete_response = iam_identity_service.delete_profile_template_version(\n",
                      "  template_id=profile_template_id, version='1'\n",
                      ")"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/profile_templates/{template_id}/versions/{version}/commit": {
      "post": {
        "tags": [
          "Trusted profile template"
        ],
        "summary": "Commit a template version",
        "description": "Commit a specific version of a trusted profile template in an enterprise account. You must commit a template before you can assign it to child accounts. Once a template is committed, you can no longer modify the template.",
        "operationId": "commit_profile_template",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the trusted profile template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of the Profile Template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Template Version committed"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile-template.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://iam.cloud.ibm.com/v1/profile_templates/{template_id}/{version}/commit' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "commitOptions := &iamidentityv1.CommitProfileTemplateOptions{\n",
                      "  TemplateID: &profileTemplateId,\n",
                      "  Version:    core.StringPtr(strconv.FormatInt(profileTemplateVersion, 10)),\n",
                      "}\n",
                      "\n",
                      "response, err := iamIdentityService.CommitProfileTemplate(commitOptions)"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CommitProfileTemplateOptions commitOptions = new CommitProfileTemplateOptions.Builder()\n",
                      "    .templateId(profileTemplateId)\n",
                      "    .version(Long.toString(profileTemplateVersion))\n",
                      "    .build();\n",
                      "\n",
                      "Response<Void> commitResponse = service.commitProfileTemplate(commitOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const commitParams = {\n",
                      "  templateId: profileTemplateId,\n",
                      "  version: profileTemplateVersion,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.commitProfileTemplate(commitParams);\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "commit_response = iam_identity_service.commit_profile_template(\n",
                      "  template_id=profile_template_id, version=str(profile_template_version)\n",
                      ")"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/account_settings_templates": {
      "get": {
        "tags": [
          "Account settings template"
        ],
        "summary": "List account settings templates",
        "description": "List account settings templates in an enterprise account",
        "operationId": "list_account_settings_templates",
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "description": "Account ID of the account settings templates to query. This parameter is required unless using a pagetoken.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional size of a single page.",
            "required": false,
            "schema": {
              "type": "string",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "pagetoken",
            "in": "query",
            "description": "Optional Prev or Next page token returned from a previous query execution. Default is start with first page.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Optional sort property. If specified, the returned templated are sorted according to this property",
            "required": false,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "last_modified_at",
                "name"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Optional sort order.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response",
            "required": false,
            "schema": {
              "type": "string",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSettingsTemplateList"
                },
                "example": {
                  "offset": 0,
                  "limit": 20,
                  "first": "https://iam.cloud.ibm.com/v1/account_settings_templates?account_id=5bbe28be34524sdbdaa34d37d1f2294a",
                  "account_settings_templates": [
                    {
                      "id": "AccountSettingsTemplate-2c434aba-38a4-402c-a8a1-c444570b7408",
                      "version": 1,
                      "account_id": "5bbe28be34524sdbdaa34d37d1f2294a",
                      "name": "My new account settings template",
                      "committed": true,
                      "account_settings": {
                        "restrict_create_platform_apikey": "RESTRICTED",
                        "restrict_create_service_id": "NOT_RESTRICTED",
                        "max_sessions_per_identity": 5,
                        "mfa": "LEVEL3"
                      },
                      "created_at": "2023-01-12T13:09:59:761+0000",
                      "created_by_id": "IBMid-12345678901",
                      "last_modified_at": "2023-02-24T13:48:44:198+0000",
                      "last_modified_by_id": "IBMid-12345678901",
                      "entity_tag": "6-aa54ac91e59055f80b58da2c5a4c426f",
                      "crn": "crn:v1:staging:public:iam-identity::a/5bbe28be34524sdbdaa34d37d1f2294a::template:AccountSettingsTemplate-2c434aba-38a4-402c-a8a1-c444570b7408"
                    }
                  ]
                }
              }
            },
            "description": "Successful Template retrieval"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account-settings-template.read"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://iam.cloud.ibm.com/v1/account_settings_templates?account_id=5bbe28be34524sdbdaa34d37d1f2294a' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "listOptions := &iamidentityv1.ListAccountSettingsTemplatesOptions{\n",
                      "  AccountID: &enterpriseAccountID,\n",
                      "}\n",
                      "\n",
                      "listResponse, response, err := iamIdentityService.ListAccountSettingsTemplates(listOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(listResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "ListAccountSettingsTemplatesOptions listOptions = new ListAccountSettingsTemplatesOptions.Builder()\n",
                      "    .accountId(enterpriseAccountId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<AccountSettingsTemplateList> response = service.listAccountSettingsTemplates(listOptions).execute();\n",
                      "AccountSettingsTemplateList result = response.getResult();\n",
                      "\n",
                      "System.out.println(result);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  accountId: enterpriseAccountId,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.listAccountSettingsTemplates(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "list_response = iam_identity_service.list_account_settings_templates(account_id=enterprise_account_id)\n",
                      "\n",
                      "account_settings_template_list = list_response.get_result()\n",
                      "print('\\nlist_account_settings_templates response: ', json.dumps(account_settings_template_list, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "tags": [
          "Account settings template"
        ],
        "summary": "Create an account settings template",
        "description": "Create a new account settings template in an enterprise account.",
        "operationId": "create_account_settings_template",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountSettingsTemplateRequest"
              }
            }
          },
          "description": "Request to create an account settings template.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSettingsTemplateResponse"
                },
                "example": {
                  "id": "AccountSettingsTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9",
                  "version": 1,
                  "account_id": "5bbe28be34524sdbdaa34d37d1f2294a",
                  "name": "my template name",
                  "committed": false,
                  "account_settings": {
                    "restrict_create_platform_apikey": "RESTRICTED",
                    "restrict_create_service_id": "NOT_RESTRICTED",
                    "max_sessions_per_identity": 5,
                    "mfa": "LEVEL3"
                  },
                  "created_at": "2023-03-07T13:55:33:428+0000",
                  "created_by_id": "IBMid-12345678901",
                  "last_modified_at": "2023-03-07T13:55:33:428+0000",
                  "last_modified_by_id": "IBMid-12345678901",
                  "entity_tag": "1-2da85a8f1172fc3527378318d3182778",
                  "crn": "crn:v1:staging:public:iam-identity::a/5bbe28be34524sdbdaa34d37d1f2294a::template:AccountSettingsTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9"
                }
              }
            },
            "description": "Template successfully created"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account-settings-template.create"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://iam.cloud.ibm.com/v1/account_settings_templates' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN' \\\n",
                      "-d '{\n",
                      "    \"account_id\": \"5bbe28be34524sdbdaa34d37d1f2294a\",\n",
                      "    \"name\": \"my template\",\n",
                      "    \"account_settings\": {\n",
                      "        \"restrict_create_platform_apikey\": \"RESTRICTED\",\n",
                      "        \"restrict_create_service_id\":  \"NOT_RESTRICTED\",\n",
                      "        \"max_sessions_per_identity\": 5,\n",
                      "        \"mfa\": \"LEVEL3\",\n",
                      "    },\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "settings := &iamidentityv1.AccountSettingsComponent{\n",
                      "  Mfa:                                  core.StringPtr(\"LEVEL1\"),\n",
                      "  SystemAccessTokenExpirationInSeconds: core.StringPtr(\"3000\"),\n",
                      "}\n",
                      "\n",
                      "createOptions := &iamidentityv1.CreateAccountSettingsTemplateOptions{\n",
                      "  Name:            &accountSettingsTemplateName,\n",
                      "  Description:     core.StringPtr(\"GoSDK test Account Settings Template\"),\n",
                      "  AccountID:       &enterpriseAccountID,\n",
                      "  AccountSettings: settings,\n",
                      "}\n",
                      "\n",
                      "createResponse, response, err := iamIdentityService.CreateAccountSettingsTemplate(createOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(createResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))\n",
                      "\n",
                      "// Grab the ID and Etag value from the response for use in the update operation.\n",
                      "accountSettingsTemplateId = *createResponse.ID\n",
                      "accountSettingsTemplateVersion = *createResponse.Version\n",
                      "accountSettingsTemplateEtag = response.GetHeaders().Get(\"Etag\")"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "AccountSettingsComponent accountSettings = new AccountSettingsComponent.Builder()\n",
                      "    .mfa(\"LEVEL1\")\n",
                      "    .systemAccessTokenExpirationInSeconds(\"3000\")\n",
                      "    .build();\n",
                      "\n",
                      "CreateAccountSettingsTemplateOptions createOptions = new CreateAccountSettingsTemplateOptions.Builder()\n",
                      "    .accountId(enterpriseAccountId)\n",
                      "    .name(accountSettingsTemplateName)\n",
                      "    .description(\"IAM enterprise account settings template example\")\n",
                      "    .accountSettings(accountSettings)\n",
                      "    .build();\n",
                      "\n",
                      "Response<AccountSettingsTemplateResponse> createResponse = service.createAccountSettingsTemplate(createOptions).execute();\n",
                      "AccountSettingsTemplateResponse createResult = createResponse.getResult();\n",
                      "\n",
                      "// Save the id for use by other test methods.\n",
                      "accountSettingsTemplateId = createResult.getId();\n",
                      "accountSettingsTemplateVersion = createResult.getVersion().longValue();\n",
                      "\n",
                      "System.out.println(createResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const settings = {\n",
                      "  mfa: \"LEVEL1\",\n",
                      "  system_access_token_expiration_in_seconds: \"3000\",\n",
                      "}\n",
                      "const templateParams = {\n",
                      "  name: \"Example-Account-Settings-Template\",\n",
                      "  description: \"IAM enterprise account settings template example\",\n",
                      "  accountId: enterpriseAccountId,\n",
                      "  accountSettings: settings,\n",
                      "}\n",
                      "\n",
                      "try {\n",
                      "  const res = await iamIdentityService.createAccountSettingsTemplate(templateParams);\n",
                      "  accountSettingsTemplateEtag = res.headers.etag;\n",
                      "  const { result } = res;\n",
                      "  accountSettingsTemplateId = result.id;\n",
                      "  accountSettingsTemplateVersion = result.version;\n",
                      "  console.log(JSON.stringify(result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "account_settings = {}\n",
                      "account_settings['mfa'] = 'LEVEL1'\n",
                      "account_settings['system_access_token_expiration_in_seconds'] = 3000\n",
                      "\n",
                      "create_response = iam_identity_service.create_account_settings_template(\n",
                      "  name='Example-Account-Settings-Template',\n",
                      "  description='IAM enterprise account settings template example',\n",
                      "  account_id=enterprise_account_id,\n",
                      "  account_settings=account_settings,\n",
                      ")\n",
                      "\n",
                      "account_settings_template = create_response.get_result()\n",
                      "print('\\ncreate_account_settings_template() response: ', json.dumps(account_settings_template, indent=2))\n",
                      "\n",
                      "global account_settings_template_id\n",
                      "account_settings_template_id = account_settings_template['id']\n",
                      "global account_settings_template_version\n",
                      "account_settings_template_version = account_settings_template['version']"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/account_settings_templates/{template_id}": {
      "get": {
        "tags": [
          "Account settings template"
        ],
        "summary": "Get latest version of an account settings template",
        "description": "Get the latest version of a specific account settings template in an enterprise account.",
        "operationId": "get_latest_account_settings_template_version",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the account settings template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSettingsTemplateResponse"
                },
                "example": {
                  "id": "AccountSettingsTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9",
                  "version": 1,
                  "account_id": "5bbe28be34524sdbdaa34d37d1f2294a",
                  "name": "my template name",
                  "committed": false,
                  "account_settings": {
                    "restrict_create_platform_apikey": "RESTRICTED",
                    "restrict_create_service_id": "NOT_RESTRICTED",
                    "max_sessions_per_identity": 5,
                    "mfa": "LEVEL3"
                  },
                  "created_at": "2023-03-07T13:55:33:428+0000",
                  "created_by_id": "IBMid-12345678901",
                  "last_modified_at": "2023-03-07T13:55:33:428+0000",
                  "last_modified_by_id": "IBMid-12345678901",
                  "entity_tag": "1-2da85a8f1172fc3527378318d3182778",
                  "crn": "crn:v1:staging:public:iam-identity::a/5bbe28be34524sdbdaa34d37d1f2294a::template:AccountSettingsTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9"
                }
              }
            },
            "description": "Successful Template retrieval"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Template not found."
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account-settings-template.read"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://iam.cloud.ibm.com/v1/account_settings_templates/AccountSettingsTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getOptions := &iamidentityv1.GetLatestAccountSettingsTemplateVersionOptions{\n",
                      "  TemplateID: &accountSettingsTemplateId,\n",
                      "}\n",
                      "\n",
                      "getResponse, response, err := iamIdentityService.GetLatestAccountSettingsTemplateVersion(getOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(getResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetLatestAccountSettingsTemplateVersionOptions getOptions = new GetLatestAccountSettingsTemplateVersionOptions.Builder()\n",
                      "    .templateId(accountSettingsTemplateId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<AccountSettingsTemplateResponse> getResponse = service.getLatestAccountSettingsTemplateVersion(getOptions).execute();\n",
                      "AccountSettingsTemplateResponse getResult = getResponse.getResult();\n",
                      "\n",
                      "System.out.println(getResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  templateId: accountSettingsTemplateId,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getLatestAccountSettingsTemplateVersion(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "get_response = iam_identity_service.get_latest_account_settings_template_version(\n",
                      "  template_id=account_settings_template_id\n",
                      ")\n",
                      "account_settings_template = get_response.get_result()\n",
                      "print(\n",
                      "  '\\nget_latest_account_settings_template_version response: ',\n",
                      "  json.dumps(account_settings_template, indent=2),\n",
                      ")"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Account settings template"
        ],
        "summary": "Delete all versions of an account settings template",
        "description": "Delete all versions of an account settings template in an enterprise account. If any version is assigned to child accounts, you must first delete the assignment.",
        "operationId": "delete_all_versions_of_account_settings_template",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the account settings template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Template Deletion"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account-settings-template.delete"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE 'https://iam.cloud.ibm.com/v1/account_settings_templates/AccountSettingsTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "deleteOptions := &iamidentityv1.DeleteAllVersionsOfAccountSettingsTemplateOptions{\n",
                      "  TemplateID: &accountSettingsTemplateId,\n",
                      "}\n",
                      "\n",
                      "response, err := iamIdentityService.DeleteAllVersionsOfAccountSettingsTemplate(deleteOptions)"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "DeleteAllVersionsOfAccountSettingsTemplateOptions deleteTeplateOptions = new DeleteAllVersionsOfAccountSettingsTemplateOptions.Builder()\n",
                      "    .templateId(accountSettingsTemplateId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<Void> deleteResponse = service.deleteAllVersionsOfAccountSettingsTemplate(deleteTeplateOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  templateId: accountSettingsTemplateId,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.deleteAllVersionsOfAccountSettingsTemplate(params);\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "delete_response = iam_identity_service.delete_all_versions_of_account_settings_template(\n",
                      "  template_id=account_settings_template_id\n",
                      ")"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/account_settings_templates/{template_id}/versions": {
      "get": {
        "tags": [
          "Account settings template"
        ],
        "summary": "List account settings template versions",
        "description": "List the versions of a specific account settings template in an enterprise account.",
        "operationId": "list_versions_of_account_settings_template",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the account settings template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional size of a single page.",
            "required": false,
            "schema": {
              "type": "string",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "pagetoken",
            "in": "query",
            "description": "Optional Prev or Next page token returned from a previous query execution. Default is start with first page.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Optional sort property. If specified, the returned templated are sorted according to this property",
            "required": false,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "last_modified_at",
                "name"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Optional sort order.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response",
            "required": false,
            "schema": {
              "type": "string",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSettingsTemplateList"
                },
                "example": {
                  "offset": 0,
                  "limit": 20,
                  "first": "https://iam.cloud.ibm.com/v1/account_settings_templates?account_id=5bbe28be34524sdbdaa34d37d1f2294a",
                  "account_settings_templates": [
                    {
                      "id": "AccountSettingsTemplate-2c434aba-38a4-402c-a8a1-c444570b7408",
                      "version": 1,
                      "account_id": "5bbe28be34524sdbdaa34d37d1f2294a",
                      "name": "My new account settings template",
                      "committed": true,
                      "account_settings": {
                        "restrict_create_platform_apikey": "RESTRICTED",
                        "restrict_create_service_id": "NOT_RESTRICTED",
                        "max_sessions_per_identity": 5,
                        "mfa": "LEVEL3"
                      },
                      "created_at": "2023-01-12T13:09:59:761+0000",
                      "created_by_id": "IBMid-12345678901",
                      "last_modified_at": "2023-02-24T13:48:44:198+0000",
                      "last_modified_by_id": "IBMid-12345678901",
                      "entity_tag": "6-aa54ac91e59055f80b58da2c5a4c426f",
                      "crn": "crn:v1:staging:public:iam-identity::a/5bbe28be34524sdbdaa34d37d1f2294a::template:AccountSettingsTemplate-2c434aba-38a4-402c-a8a1-c444570b7408"
                    }
                  ]
                }
              }
            },
            "description": "Successful Template retrieval"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account-settings-template.read"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://iam.cloud.ibm.com/v1/account_settings_templates/AccountSettingsTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9/versions/' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "listOptions := &iamidentityv1.ListVersionsOfAccountSettingsTemplateOptions{\n",
                      "  TemplateID: &accountSettingsTemplateId,\n",
                      "}\n",
                      "\n",
                      "listResponse, response, err := iamIdentityService.ListVersionsOfAccountSettingsTemplate(listOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(listResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "ListVersionsOfAccountSettingsTemplateOptions listOptions = new ListVersionsOfAccountSettingsTemplateOptions.Builder()\n",
                      "    .templateId(accountSettingsTemplateId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<AccountSettingsTemplateList> listResponse = service.listVersionsOfAccountSettingsTemplate(listOptions).execute();\n",
                      "AccountSettingsTemplateList listResult = listResponse.getResult();\n",
                      "\n",
                      "System.out.println(listResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  templateId: accountSettingsTemplateId,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.listVersionsOfAccountSettingsTemplate(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "list_response = iam_identity_service.list_versions_of_account_settings_template(\n",
                      "  template_id=account_settings_template_id\n",
                      ")\n",
                      "account_settings_template_list = list_response.get_result()\n",
                      "print(\n",
                      "  '\\nlist_account_settings_template_versions response: ',\n",
                      "  json.dumps(account_settings_template_list, indent=2),\n",
                      ")"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "tags": [
          "Account settings template"
        ],
        "summary": "Create a new version of an account settings template",
        "description": "Create a new version of an account settings template in an Enterprise Account",
        "operationId": "create_account_settings_template_version",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the account settings template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountSettingsTemplateRequest"
              }
            }
          },
          "description": "Request to create new version of an account settings template",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSettingsTemplateResponse"
                },
                "example": {
                  "id": "AccountSettingsTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9",
                  "version": 2,
                  "account_id": "5bbe28be34524sdbdaa34d37d1f2294a",
                  "name": "my template name",
                  "committed": false,
                  "account_settings": {
                    "restrict_create_platform_apikey": "RESTRICTED",
                    "restrict_create_service_id": "NOT_RESTRICTED",
                    "max_sessions_per_identity": 5,
                    "mfa": "LEVEL3"
                  },
                  "created_at": "2023-03-07T13:55:33:428+0000",
                  "created_by_id": "IBMid-12345678901",
                  "last_modified_at": "2023-03-07T13:55:33:428+0000",
                  "last_modified_by_id": "IBMid-12345678901",
                  "entity_tag": "1-2da85a8f1172fc3527378318d3182778",
                  "crn": "crn:v1:staging:public:iam-identity::a/5bbe28be34524sdbdaa34d37d1f2294a::template:AccountSettingsTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9"
                }
              }
            },
            "description": "Template version created successfully"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account-settings-template.create"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://iam.cloud.ibm.com/v1/account_settings_templates/{template_id}/version' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN' \\\n",
                      "-d '{\n",
                      "    \"account_id\": \"5bbe28be34524sdbdaa34d37d1f2294a\",\n",
                      "    \"name\": \"my template name\",\n",
                      "    \"account_settings\": {\n",
                      "        \"restrict_create_platform_apikey\": \"RESTRICTED\",\n",
                      "        \"restrict_create_service_id\": \"NOT_RESTRICTED\",\n",
                      "        \"max_sessions_per_identity\": 5,\n",
                      "        \"mfa\": \"LEVEL3\",\n",
                      "    },\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "settings := &iamidentityv1.AccountSettingsComponent{\n",
                      "  Mfa:                                  core.StringPtr(\"LEVEL1\"),\n",
                      "  SystemAccessTokenExpirationInSeconds: core.StringPtr(\"2600\"),\n",
                      "  RestrictCreatePlatformApikey:         core.StringPtr(\"RESTRICTED\"),\n",
                      "  RestrictCreateServiceID:              core.StringPtr(\"RESTRICTED\"),\n",
                      "}\n",
                      "\n",
                      "createOptions := &iamidentityv1.CreateAccountSettingsTemplateVersionOptions{\n",
                      "  Name:            &accountSettingsTemplateName,\n",
                      "  Description:     core.StringPtr(\"GoSDK test Account Settings Template - new version\"),\n",
                      "  AccountID:       &enterpriseAccountID,\n",
                      "  TemplateID:      &accountSettingsTemplateId,\n",
                      "  AccountSettings: settings,\n",
                      "}\n",
                      "\n",
                      "createResponse, response, err := iamIdentityService.CreateAccountSettingsTemplateVersion(createOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(createResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))\n",
                      "\n",
                      "// save the new version to be used in subsequent calls\n",
                      "accountSettingsTemplateVersion = *createResponse.Version"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "AccountSettingsComponent accountSettings = new AccountSettingsComponent.Builder()\n",
                      "    .mfa(\"LEVEL1\")\n",
                      "    .systemAccessTokenExpirationInSeconds(\"2600\")\n",
                      "    .restrictCreatePlatformApikey(\"RESTRICTED\")\n",
                      "    .restrictCreateServiceId(\"RESTRICTED\")\n",
                      "    .build();\n",
                      "CreateAccountSettingsTemplateVersionOptions createOptions = new CreateAccountSettingsTemplateVersionOptions.Builder()\n",
                      "    .accountId(enterpriseAccountId)\n",
                      "    .templateId(accountSettingsTemplateId)\n",
                      "    .name(accountSettingsTemplateName)\n",
                      "    .description(\"IAM enterprise account settings template example - new version\")\n",
                      "    .accountSettings(accountSettings)\n",
                      "    .build();\n",
                      "\n",
                      "Response<AccountSettingsTemplateResponse> createResponse = service.createAccountSettingsTemplateVersion(createOptions).execute();\n",
                      "AccountSettingsTemplateResponse createResult = createResponse.getResult();\n",
                      "\n",
                      "// Save the version for use by other test methods.\n",
                      "accountSettingsTemplateVersion = createResult.getVersion().longValue();\n",
                      "\n",
                      "System.out.println(createResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "    const settings = {\n",
                      "      mfa: \"LEVEL1\",\n",
                      "      system_access_token_expiration_in_seconds: \"2600\",\n",
                      "      restrict_create_platform_apikey: \"RESTRICTED\",\n",
                      "      restrict_create_service_id: \"RESTRICTED\",\n",
                      "    }\n",
                      "    const templateParams = {\n",
                      "      templateId: accountSettingsTemplateId,\n",
                      "      name: \"Example-Account-Settings-Template\",\n",
                      "      description: \"IAM enterprise account settings template example - new version\",\n",
                      "      accountId: enterpriseAccountId,\n",
                      "      accountSettings: settings,\n",
                      "    }\n",
                      "",
                      "    try {\n",
                      "      const res = await iamIdentityService.createAccountSettingsTemplateVersion(templateParams);\n",
                      "      const { result } = res;\n",
                      "      accountSettingsTemplateVersion = result.version;\n",
                      "      console.log(JSON.stringify(result, null, 2));\n",
                      "    } catch (err) {\n",
                      "      console.warn(err);\n",
                      "    }"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "account_settings = {}\n",
                      "account_settings['mfa'] = 'LEVEL1'\n",
                      "account_settings['system_access_token_expiration_in_seconds'] = 2600\n",
                      "account_settings['restrict_create_platform_apikey'] = 'RESTRICTED'\n",
                      "account_settings['restrict_create_service_id'] = 'RESTRICTED'\n",
                      "\n",
                      "create_response = iam_identity_service.create_account_settings_template_version(\n",
                      "  template_id=account_settings_template_id,\n",
                      "  name='Example-Account-Settings-Template',\n",
                      "  description='IAM enterprise account settings template example - new version',\n",
                      "  account_id=enterprise_account_id,\n",
                      "  account_settings=account_settings,\n",
                      ")\n",
                      "\n",
                      "account_settings_template = create_response.get_result()\n",
                      "print(\n",
                      "  '\\ncreate_account_settings_template_version() response: ',\n",
                      "  json.dumps(account_settings_template, indent=2),\n",
                      ")\n",
                      "\n",
                      "global account_settings_template_version\n",
                      "account_settings_template_version = account_settings_template['version']"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/account_settings_templates/{template_id}/versions/{version}": {
      "get": {
        "tags": [
          "Account settings template"
        ],
        "summary": "Get version of an account settings template",
        "description": "Get a specific version of an account settings template in an Enterprise Account",
        "operationId": "get_account_settings_template_version",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the account settings template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of the account settings template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSettingsTemplateResponse"
                },
                "example": {
                  "id": "AccountSettingsTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9",
                  "version": 1,
                  "account_id": "5bbe28be34524sdbdaa34d37d1f2294a",
                  "name": "my template name",
                  "committed": false,
                  "account_settings": {
                    "restrict_create_platform_apikey": "RESTRICTED",
                    "restrict_create_service_id": "NOT_RESTRICTED",
                    "max_sessions_per_identity": 5,
                    "mfa": "LEVEL3"
                  },
                  "created_at": "2023-03-07T13:55:33:428+0000",
                  "created_by_id": "IBMid-12345678901",
                  "last_modified_at": "2023-03-07T13:55:33:428+0000",
                  "last_modified_by_id": "IBMid-12345678901",
                  "entity_tag": "1-2da85a8f1172fc3527378318d3182778",
                  "crn": "crn:v1:staging:public:iam-identity::a/5bbe28be34524sdbdaa34d37d1f2294a::template:AccountSettingsTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9"
                }
              }
            },
            "description": "Successful Template retrieval"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Template version not found."
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account-settings-template.read"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://iam.cloud.ibm.com/v1/account_settings_templates/AccountSettingsTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9/versions/1' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getOptions := &iamidentityv1.GetAccountSettingsTemplateVersionOptions{\n",
                      "  TemplateID: &accountSettingsTemplateId,\n",
                      "  Version:    core.StringPtr(strconv.FormatInt(accountSettingsTemplateVersion, 10)),\n",
                      "}\n",
                      "\n",
                      "getResponse, response, err := iamIdentityService.GetAccountSettingsTemplateVersion(getOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(getResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))\n",
                      "\n",
                      "// Grab the Etag value from the response for use in the update operation.\n",
                      "accountSettingsTemplateEtag = response.GetHeaders().Get(\"Etag\")"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetAccountSettingsTemplateVersionOptions getOptions = new GetAccountSettingsTemplateVersionOptions.Builder()\n",
                      "    .templateId(accountSettingsTemplateId)\n",
                      "    .version(Long.toString(accountSettingsTemplateVersion))\n",
                      "    .build();\n",
                      "\n",
                      "Response<AccountSettingsTemplateResponse> response = service.getAccountSettingsTemplateVersion(getOptions).execute();\n",
                      "AccountSettingsTemplateResponse getResult = response.getResult();\n",
                      "\n",
                      "// Grab the Etag value from the response for use in the update operation.\n",
                      "accountSettingsTemplateEtag = response.getHeaders().values(\"Etag\").get(0);\n",
                      "\n",
                      "System.out.println(getResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  templateId: accountSettingsTemplateId,\n",
                      "  version: accountSettingsTemplateVersion,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getAccountSettingsTemplateVersion(params);\n",
                      "  accountSettingsTemplateEtag = res.headers.etag;\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "get_response = iam_identity_service.get_account_settings_template_version(\n",
                      "  template_id=account_settings_template_id, version=str(account_settings_template_version)\n",
                      ")\n",
                      "\n",
                      "account_settings_template = get_response.get_result()\n",
                      "print('\\nget_account_settings_template response: ', json.dumps(account_settings_template, indent=2))\n",
                      "\n",
                      "global account_settings_template_etag\n",
                      "account_settings_template_etag = get_response.get_headers()['Etag']"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "put": {
        "tags": [
          "Account settings template"
        ],
        "summary": "Update version of an account settings template",
        "description": "Update a specific version of an account settings template in an Enterprise Account",
        "operationId": "update_account_settings_template_version",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "description": "Entity tag of the Template to be updated. Specify the tag that you retrieved when reading the account settings template. This value\nhelps identifying parallel usage of this API. Pass * to indicate to update any version available. This might result in stale updates.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the account settings template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of the account settings template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountSettingsTemplateRequest"
              }
            }
          },
          "description": "Request to create an account settings template.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSettingsTemplateResponse"
                },
                "example": {
                  "id": "AccountSettingsTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9",
                  "version": 1,
                  "account_id": "5bbe28be34524sdbdaa34d37d1f2294a",
                  "name": "my template name",
                  "committed": false,
                  "account_settings": {
                    "restrict_create_platform_apikey": "RESTRICTED",
                    "restrict_create_service_id": "NOT_RESTRICTED",
                    "max_sessions_per_identity": 5,
                    "mfa": "LEVEL3"
                  },
                  "created_at": "2023-03-07T13:55:33:428+0000",
                  "created_by_id": "IBMid-12345678901",
                  "last_modified_at": "2023-03-07T13:55:33:428+0000",
                  "last_modified_by_id": "IBMid-12345678901",
                  "entity_tag": "1-2da85a8f1172fc3527378318d3182778",
                  "crn": "crn:v1:staging:public:iam-identity::a/5bbe28be34524sdbdaa34d37d1f2294a::template:AccountSettingsTemplate-767fc1f6-c77c-4196-b3d6-a009a5a536e9"
                }
              }
            },
            "description": "Successful updated template"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Template version not found."
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account-settings-template.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://iam.cloud.ibm.com/v1/account_settings_templates/{template_id}/version' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN' \\\n",
                      "-d '{\n",
                      "    \"account_id\": \"5bbe28be34524sdbdaa34d37d1f2294a\",\n",
                      "    \"name\": \"my template name\",\n",
                      "    \"account_settings\": {\n",
                      "        \"mfa\": \"NONE\",\n",
                      "    },\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "settings := &iamidentityv1.AccountSettingsComponent{\n",
                      "  Mfa:                                  core.StringPtr(\"LEVEL1\"),\n",
                      "  SystemAccessTokenExpirationInSeconds: core.StringPtr(\"3000\"),\n",
                      "}\n",
                      "\n",
                      "updateOptions := &iamidentityv1.UpdateAccountSettingsTemplateVersionOptions{\n",
                      "  AccountID:       &enterpriseAccountID,\n",
                      "  TemplateID:      &accountSettingsTemplateId,\n",
                      "  Version:         core.StringPtr(strconv.FormatInt(accountSettingsTemplateVersion, 10)),\n",
                      "  IfMatch:         &accountSettingsTemplateEtag,\n",
                      "  Name:            &accountSettingsTemplateName,\n",
                      "  Description:     core.StringPtr(\"GoSDK test Account Settings Template - updated\"),\n",
                      "  AccountSettings: settings,\n",
                      "}\n",
                      "\n",
                      "updateResponse, response, err := iamIdentityService.UpdateAccountSettingsTemplateVersion(updateOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(updateResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))\n",
                      "\n",
                      "// Grab the Etag value from the response for use in the update operation.\n",
                      "accountSettingsTemplateEtag = response.GetHeaders().Get(\"Etag\")"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "AccountSettingsComponent accountSettings = new AccountSettingsComponent.Builder()\n",
                      "    .mfa(\"LEVEL1\")\n",
                      "    .systemAccessTokenExpirationInSeconds(\"3000\")\n",
                      "    .build();\n",
                      "UpdateAccountSettingsTemplateVersionOptions updateOptions = new UpdateAccountSettingsTemplateVersionOptions.Builder()\n",
                      "    .accountId(enterpriseAccountId)\n",
                      "    .templateId(accountSettingsTemplateId)\n",
                      "    .version(Long.toString(accountSettingsTemplateVersion))\n",
                      "    .ifMatch(accountSettingsTemplateEtag)\n",
                      "    .name(accountSettingsTemplateName)\n",
                      "    .description(\"IAM enterprise account settings template example - updated\")\n",
                      "    .accountSettings(accountSettings)\n",
                      "    .build();\n",
                      "\n",
                      "Response<AccountSettingsTemplateResponse> updateResponse = service.updateAccountSettingsTemplateVersion(updateOptions).execute();\n",
                      "AccountSettingsTemplateResponse updateResult = updateResponse.getResult();\n",
                      "\n",
                      "// Grab the Etag value from the response for use in the update operation.\n",
                      "accountSettingsTemplateEtag = updateResponse.getHeaders().values(\"Etag\").get(0);\n",
                      "\n",
                      "System.out.println(updateResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const settings = {\n",
                      "  mfa: \"LEVEL1\",\n",
                      "  system_access_token_expiration_in_seconds: \"3000\",\n",
                      "}\n",
                      "const params = {\n",
                      "  accountId: enterpriseAccountId,\n",
                      "  templateId: accountSettingsTemplateId,\n",
                      "  version: accountSettingsTemplateVersion,\n",
                      "  ifMatch: accountSettingsTemplateEtag,\n",
                      "  name: \"Example-Account-Settings-Template\",\n",
                      "  description: \"IAM enterprise account settings template example - updated\",\n",
                      "  accountSettings: settings,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.updateAccountSettingsTemplateVersion(params);\n",
                      "  accountSettingsTemplateEtag = res.headers.etag;\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "account_settings = {}\n",
                      "account_settings['mfa'] = 'LEVEL1'\n",
                      "account_settings['system_access_token_expiration_in_seconds'] = 3000\n",
                      "\n",
                      "update_response = iam_identity_service.update_account_settings_template_version(\n",
                      "  account_id=enterprise_account_id,\n",
                      "  template_id=account_settings_template_id,\n",
                      "  version=str(account_settings_template_version),\n",
                      "  if_match=account_settings_template_etag,\n",
                      "  name='Example-Account-Settings-Template',\n",
                      "  description='IAM enterprise account settings template example - updated',\n",
                      "  account_settings=account_settings,\n",
                      ")\n",
                      "\n",
                      "account_settings_template = update_response.get_result()\n",
                      "print('\\nupdate_account_settings_template() response: ', json.dumps(account_settings_template, indent=2))\n",
                      "\n",
                      "account_settings_template_etag = update_response.get_headers()['Etag']"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Account settings template"
        ],
        "summary": "Delete version of an account settings template",
        "description": "Delete a specific version of an account settings template in an Enterprise Account",
        "operationId": "delete_account_settings_template_version",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the account settings template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of the account settings template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Template Version delete successful"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account-settings-template.delete"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE 'https://iam.cloud.ibm.com/v1/account_settings_templates/{template_id}/versions/{version}' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "deleteOptions := &iamidentityv1.DeleteAccountSettingsTemplateVersionOptions{\n",
                      "  TemplateID: &accountSettingsTemplateId,\n",
                      "  Version:    core.StringPtr(\"1\"),\n",
                      "}\n",
                      "\n",
                      "response, err := iamIdentityService.DeleteAccountSettingsTemplateVersion(deleteOptions)"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "DeleteAccountSettingsTemplateVersionOptions deleteOptions = new DeleteAccountSettingsTemplateVersionOptions.Builder()\n",
                      "    .templateId(accountSettingsTemplateId)\n",
                      "    .version(\"1\")\n",
                      "    .build();\n",
                      "\n",
                      "Response<Void> deleteResponse = service.deleteAccountSettingsTemplateVersion(deleteOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  templateId: accountSettingsTemplateId,\n",
                      "  version: 1,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.deleteAccountSettingsTemplateVersion(params);\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "delete_response = iam_identity_service.delete_account_settings_template_version(\n",
                      "  template_id=account_settings_template_id, version='1'\n",
                      ")"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/account_settings_templates/{template_id}/versions/{version}/commit": {
      "post": {
        "tags": [
          "Account settings template"
        ],
        "summary": "Commit a template version",
        "description": "Commit a specific version of an account settings template in an Enterprise Account. A Template must be committed before being assigned, and once committed, can no longer be modified.",
        "operationId": "commit_account_settings_template",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the account settings template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of the account settings template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Template Version committed"
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid."
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information."
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action."
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account-settings-template.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://iam.cloud.ibm.com/v1/account_settings_templates/{template_id}/{version}/commit' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "commitOptions := &iamidentityv1.CommitAccountSettingsTemplateOptions{\n",
                      "  TemplateID: &accountSettingsTemplateId,\n",
                      "  Version:    core.StringPtr(strconv.FormatInt(accountSettingsTemplateVersion, 10)),\n",
                      "}\n",
                      "\n",
                      "response, err := iamIdentityService.CommitAccountSettingsTemplate(commitOptions)"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CommitAccountSettingsTemplateOptions commitOptions = new CommitAccountSettingsTemplateOptions.Builder()\n",
                      "    .templateId(accountSettingsTemplateId)\n",
                      "    .version(Long.toString(accountSettingsTemplateVersion))\n",
                      "    .build();\n",
                      "\n",
                      "Response<Void> commitResponse = service.commitAccountSettingsTemplate(commitOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const commitParams = {\n",
                      "  templateId: accountSettingsTemplateId,\n",
                      "  version: accountSettingsTemplateVersion,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.commitAccountSettingsTemplate(commitParams);\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "commit_response = iam_identity_service.commit_account_settings_template(\n",
                      "  template_id=account_settings_template_id, version=str(account_settings_template_version)\n",
                      ")"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/account_settings_assignments/": {
      "get": {
        "tags": [
          "Account settings assignments"
        ],
        "summary": "List assignments",
        "description": "List account settings assignments.",
        "operationId": "list_account_settings_assignments",
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "description": "Account ID of the Assignments to query. This parameter is required unless using a pagetoken.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_id",
            "in": "query",
            "description": "Filter results by Template Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_version",
            "in": "query",
            "description": "Filter results Template Version",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "Filter results by the assignment target",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "target_type",
            "in": "query",
            "description": "Filter results by the assignment's target type",
            "schema": {
              "type": "string",
              "enum": [
                "Account",
                "AccountGroup"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional size of a single page. Default is 20 items per page. Valid range is 1 to 100",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "pagetoken",
            "in": "query",
            "description": "Optional Prev or Next page token returned from a previous query execution. Default is start with first page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "If specified, the items are sorted by the value of this property",
            "schema": {
              "type": "string",
              "enum": [
                "template_id",
                "created_at",
                "last_modified_at"
              ],
              "default": "created_at"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Template retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateAssignmentListResponse"
                },
                "example": {
                  "offset": 0,
                  "limit": 20,
                  "first": "https://iam.cloud.ibm.com/v1/account_settings_assignments?account_id=5bbe28be34524sdbdaa34d37d1f2294a",
                  "assignments": [
                    {
                      "id": "TemplateAssignment-3bbfaa70-ec17-4c92-b81f-acfd013695a0",
                      "account_id": "5bbe28be34524e88a34d37d1f2294a8a",
                      "template_id": "AccountSettingsTemplate-cac1b203-5956-4981-bdec-0a4af4feab4d",
                      "template_version": 1,
                      "target_type": "Account",
                      "target": "5bbe28be34524e88a34d37d1f2294a8a",
                      "status": "succeeded",
                      "created_at": "2023-05-09T13:01:27:946+0000",
                      "created_by_id": "IBMid-550005G0RQ",
                      "last_modified_at": "2023-05-09T13:10:04:480+0000",
                      "last_modified_by_id": "IBMid-550005G0RQ",
                      "entity_tag": "1-a0b520d828d9c0483aa2b623db8d09e6"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account-settings-assignment.read"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://iam.cloud.ibm.com/v1/account_settings_assignments?account_id=5bbe28be34524sdbdaa34d37d1f2294a' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "listOptions := &iamidentityv1.ListAccountSettingsAssignmentsOptions{\n",
                      "  AccountID:  &enterpriseAccountID,\n",
                      "  TemplateID: &accountSettingsTemplateId,\n",
                      "}\n",
                      "\n",
                      "listResponse, response, err := iamIdentityService.ListAccountSettingsAssignments(listOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(listResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "ListAccountSettingsTemplatesOptions listOptions = new ListAccountSettingsTemplatesOptions.Builder()\n",
                      "    .accountId(enterpriseAccountId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<AccountSettingsTemplateList> listResponse = service.listAccountSettingsTemplates(listOptions).execute();\n",
                      "AccountSettingsTemplateList listResult = listResponse.getResult();\n",
                      "\n",
                      "System.out.println(listResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  accountId: enterpriseAccountId,\n",
                      "  templateId: accountSettingsTemplateId,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.listAccountSettingsAssignments(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "list_response = iam_identity_service.list_account_settings_assignments(\n",
                      "  account_id=enterprise_account_id, template_id=account_settings_template_id\n",
                      ")\n",
                      "assignment_list = list_response.get_result()\n",
                      "print('\\ncreate_account_settings_assignment() response: ', json.dumps(assignment_list, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "tags": [
          "Account settings assignments"
        ],
        "summary": "Create assignment",
        "description": "Create an assigment for an account settings template.",
        "operationId": "create_account_settings_assignment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Body parameters to create an account settings template Assignment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateAssignmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Assignment Record creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateAssignmentResponse"
                },
                "example": {
                  "id": "TemplateAssignment-3bbfaa70-ec17-4c92-b81f-acfd013695a0",
                  "account_id": "5bbe28be34524e88a34d37d1f2294a8a",
                  "template_id": "AccountSettingsTemplate-cac1b203-5956-4981-bdec-0a4af4feab4d",
                  "template_version": 1,
                  "target_type": "Account",
                  "target": "5bbe28be34524e88a34d37d1f2294a8a",
                  "status": "accepted",
                  "created_at": "2023-05-09T13:01:27:946+0000",
                  "created_by_id": "IBMid-550005G0RQ",
                  "last_modified_at": "2023-05-09T13:10:04:480+0000",
                  "last_modified_by_id": "IBMid-550005G0RQ",
                  "entity_tag": "18-a0b520d828d9c0483aa2b623db8d09e6"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account-settings-assignment.create"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://iam.cloud.ibm.com/v1/account_settings_assignments' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN' \\\n",
                      "-d '{\n",
                      "    \"template_id\": \"AccountSettingsTemplate-cac1b203-5956-4981-bdec-0a4af4feab4d\",\n",
                      "    \"template_version\": 1,\n",
                      "    \"target_type\": \"Account\",\n",
                      "    \"target\": \"5bbe28be34524e88a34d37d1f2294a8a\"\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "assignOptions := &iamidentityv1.CreateAccountSettingsAssignmentOptions{\n",
                      "  TemplateID:      &accountSettingsTemplateId,\n",
                      "  TemplateVersion: &accountSettingsTemplateVersion,\n",
                      "  TargetType:      core.StringPtr(\"Account\"),\n",
                      "  Target:          &enterpriseSubAccountID,\n",
                      "}\n",
                      "\n",
                      "assignResponse, response, err := iamIdentityService.CreateAccountSettingsAssignment(assignOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(assignResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))\n",
                      "\n",
                      "// Grab the Etag and id for use by other test methods.\n",
                      "accountSettingsTemplateAssignmentEtag = response.GetHeaders().Get(\"Etag\")\n",
                      "accountSettingsTemplateAssignmentId = *assignResponse.ID"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CreateAccountSettingsAssignmentOptions assignOptions = new CreateAccountSettingsAssignmentOptions.Builder()\n",
                      "    .templateId(accountSettingsTemplateId)\n",
                      "    .templateVersion(accountSettingsTemplateVersion)\n",
                      "    .targetType(\"Account\")\n",
                      "    .target(enterpriseSubAccountId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<TemplateAssignmentResponse> assignResponse = service.createAccountSettingsAssignment(assignOptions).execute();\n",
                      "TemplateAssignmentResponse assignmentResult = assignResponse.getResult();\n",
                      "\n",
                      "// Save the id for use by other test methods.\n",
                      "accountSettingsTemplateAssignmentId = assignmentResult.getId();\n",
                      "// Grab the Etag value from the response for use in the update operation.\n",
                      "accountSettingsTemplateAssignmentEtag = assignResponse.getHeaders().values(\"Etag\").get(0);\n",
                      "\n",
                      "System.out.println(assignmentResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const assignParams = {\n",
                      "  templateId: accountSettingsTemplateId,\n",
                      "  templateVersion: accountSettingsTemplateVersion,\n",
                      "  targetType: \"Account\",\n",
                      "  target: enterpriseSubAccountId,\n",
                      "}\n",
                      "\n",
                      "try {\n",
                      "  const assRes = await iamIdentityService.createAccountSettingsAssignment(assignParams);\n",
                      "  const { result } = assRes;\n",
                      "  accountSettingsTemplateAssignmentId = result.id;\n",
                      "  accountSettingsTemplateAssignmentEtag= assRes.headers.etag;\n",
                      "  console.log(JSON.stringify(result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "assign_response = iam_identity_service.create_account_settings_assignment(\n",
                      "  template_id=account_settings_template_id,\n",
                      "  template_version=account_settings_template_version,\n",
                      "  target_type='Account',\n",
                      "  target=enterprise_subaccount_id,\n",
                      ")\n",
                      "assignment = assign_response.get_result()\n",
                      "print('\\ncreate_account_settings_assignment() response: ', json.dumps(assignment, indent=2))\n",
                      "global account_settings_template_assignment_id\n",
                      "account_settings_template_assignment_id = assignment['id']\n",
                      "global account_settings_template_assignment_etag\n",
                      "account_settings_template_assignment_etag = assign_response.get_headers()['Etag']"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/account_settings_assignments/{assignment_id}": {
      "get": {
        "tags": [
          "Account settings assignments"
        ],
        "summary": "Get assignment",
        "description": "Get an assigment for an account settings template.",
        "operationId": "get_account_settings_assignment",
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "description": "ID of the Assignment Record",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateAssignmentResponse"
                },
                "example": {
                  "id": "TemplateAssignment-3bbfaa70-ec17-4c92-b81f-acfd013695a0",
                  "account_id": "5bbe28be34524e88a34d37d1f2294a8a",
                  "template_id": "AccountSettingsTemplate-cac1b203-5956-4981-bdec-0a4af4feab4d",
                  "template_version": 1,
                  "target_type": "Account",
                  "target": "5bbe28be34524e88a34d37d1f2294a8a",
                  "status": "succeeded",
                  "resources": [
                    {
                      "target": "5bbe28be34524e88a34d37d1f2294a8a",
                      "account_settings": {
                        "resource_created": {
                          "id": "5bbe28be34524e88a34d37d1f2294a8a"
                        },
                        "status": "succeeded"
                      }
                    }
                  ],
                  "created_at": "2023-05-09T13:01:27:946+0000",
                  "created_by_id": "IBMid-550005G0RQ",
                  "last_modified_at": "2023-05-09T13:10:04:480+0000",
                  "last_modified_by_id": "IBMid-550005G0RQ",
                  "entity_tag": "1-a0b520d828d9c0483aa2b623db8d09e6"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account-settings-assignment.read"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://iam.cloud.ibm.com/v1/account_settings_assignments/<assignment_id>' \\\n",
                      "-H 'Authorization: Bearer $TOKEN' \\\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getAssignmentOptions := &iamidentityv1.GetAccountSettingsAssignmentOptions{\n",
                      "  AssignmentID: &accountSettingsTemplateAssignmentId,\n",
                      "}\n",
                      "\n",
                      "assignment, response, err := iamIdentityService.GetAccountSettingsAssignment(getAssignmentOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(assignment, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetAccountSettingsAssignmentOptions getOptions = new GetAccountSettingsAssignmentOptions.Builder()\n",
                      "    .assignmentId(accountSettingsTemplateAssignmentId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<TemplateAssignmentResponse> getResponse = service.getAccountSettingsAssignment(getOptions).execute();\n",
                      "TemplateAssignmentResponse getResult = getResponse.getResult();\n",
                      "\n",
                      "// Grab the Etag value from the response for use in the update operation.\n",
                      "accountSettingsTemplateAssignmentEtag = getResponse.getHeaders().values(\"Etag\").get(0);\n",
                      "\n",
                      "System.out.println(getResult);"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = service.get_account_settings_assignment(assignment_id=account_settings_template_assignment_id)\n",
                      "assignment = response.get_result()\n",
                      "print('\\nget_latest_account_settings_template_version response: ', json.dumps(assignment, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Account settings assignments"
        ],
        "summary": "Delete assignment",
        "description": "Delete an account settings template assignment. This removes any IAM resources created by this assignment in child accounts.",
        "operationId": "delete_account_settings_assignment",
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "description": "ID of the Assignment Record",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Request to delete assignment is accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Assignment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account-settings-assignment.delete"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE 'https://iam.cloud.ibm.com/v1/account_settings_assignments/<assignment_id>' \\\n",
                      "-H 'Authorization: Bearer $TOKEN' \\\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "deleteOptions := &iamidentityv1.DeleteAccountSettingsAssignmentOptions{\n",
                      "  AssignmentID: &accountSettingsTemplateAssignmentId,\n",
                      "}\n",
                      "\n",
                      "excResponse, response, err := iamIdentityService.DeleteAccountSettingsAssignment(deleteOptions)"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "DeleteAccountSettingsAssignmentOptions deleteOptions = new DeleteAccountSettingsAssignmentOptions.Builder()\n",
                      "    .assignmentId(accountSettingsTemplateAssignmentId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ExceptionResponse> deleteResponse = service.deleteAccountSettingsAssignment(deleteOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  assignmentId: accountSettingsTemplateAssignmentId,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.deleteAccountSettingsAssignment(params);\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "delete_response = iam_identity_service.delete_account_settings_assignment(\n",
                      "  assignment_id=account_settings_template_assignment_id\n",
                      ")"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "patch": {
        "tags": [
          "Account settings assignments"
        ],
        "summary": "Update assignment",
        "description": "Update an account settings assignment. Call this method to retry failed assignments or migrate the settings in child accounts to a new version.",
        "operationId": "update_account_settings_assignment",
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "description": "ID of the Assignment Record",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Version of the assignment to be updated. Specify the version\nthat you retrieved when reading the assignment. This value \nhelps identifying parallel usage of this API.\nPass * to indicate to update any version available. This\nmight result in stale updates.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request to update an assignment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTemplateAssignmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateAssignmentResponse"
                },
                "example": {
                  "id": "TemplateAssignment-3bbfaa70-ec17-4c92-b81f-acfd013695a0",
                  "account_id": "5bbe28be34524e88a34d37d1f2294a8a",
                  "template_id": "AccountSettingsTemplate-cac1b203-5956-4981-bdec-0a4af4feab4d",
                  "template_version": 2,
                  "target_type": "Account",
                  "target": "5bbe28be34524e88a34d37d1f2294a8a",
                  "status": "accepted",
                  "created_at": "2023-05-09T13:01:27:946+0000",
                  "created_by_id": "IBMid-550005G0RQ",
                  "last_modified_at": "2023-05-09T13:10:04:480+0000",
                  "last_modified_by_id": "IBMid-550005G0RQ",
                  "entity_tag": "1-a0b520d828d9c0483aa2b623db8d09e6"
                }
              }
            }
          },
          "202": {
            "description": "Successful Assignment Record update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateAssignmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.account-settings-assignment.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PATCH 'https://iam.cloud.ibm.com/v1/account_settings_assignments/<assignment_id>' \\\n",
                      "-H 'Authorization: Bearer $TOKEN' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN' \\\n",
                      "-d '{\n",
                      "    \"template_version\": 2\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "updateOptions := &iamidentityv1.UpdateAccountSettingsAssignmentOptions{\n",
                      "  AssignmentID:    &accountSettingsTemplateAssignmentId,\n",
                      "  TemplateVersion: &accountSettingsTemplateVersion,\n",
                      "  IfMatch:         &accountSettingsTemplateAssignmentEtag,\n",
                      "}\n",
                      "\n",
                      "updateResponse, response, err := iamIdentityService.UpdateAccountSettingsAssignment(updateOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(updateResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "UpdateAccountSettingsAssignmentOptions updateOptions = new UpdateAccountSettingsAssignmentOptions.Builder()\n",
                      "    .assignmentId(accountSettingsTemplateAssignmentId)\n",
                      "    .templateVersion(accountSettingsTemplateVersion)\n",
                      "    .ifMatch(accountSettingsTemplateAssignmentEtag)\n",
                      "    .build();\n",
                      "\n",
                      "Response<TemplateAssignmentResponse> updateResponse = service.updateAccountSettingsAssignment(updateOptions).execute();\n",
                      "TemplateAssignmentResponse updateResult = updateResponse.getResult();\n",
                      "\n",
                      "// Grab the Etag value from the response for use in the update operation.\n",
                      "accountSettingsTemplateAssignmentEtag = updateResponse.getHeaders().values(\"Etag\").get(0);\n",
                      "\n",
                      "System.out.println(updateResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const assignParams = {\n",
                      "  assignmentId: accountSettingsTemplateAssignmentId,\n",
                      "  templateVersion: accountSettingsTemplateVersion,\n",
                      "  ifMatch: accountSettingsTemplateAssignmentEtag,\n",
                      "}\n",
                      "\n",
                      "try {\n",
                      "  const assRes = await iamIdentityService.updateAccountSettingsAssignment(assignParams);\n",
                      "  console.log(JSON.stringify(assRes.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "assign_response = iam_identity_service.update_account_settings_assignment(\n",
                      "  assignment_id=account_settings_template_assignment_id,\n",
                      "  template_version=account_settings_template_version,\n",
                      "  if_match=account_settings_template_assignment_etag,\n",
                      ")\n",
                      "assignment = assign_response.get_result()\n",
                      "print('\\nupdate_account_settings_template_assignment response: ', json.dumps(assignment, indent=2))\n",
                      "account_settings_template_assignment_etag = assign_response.get_headers()['Etag']"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/profile_assignments/": {
      "get": {
        "tags": [
          "Trusted profile assignments"
        ],
        "summary": "List assignments",
        "description": "List trusted profile template assignments.",
        "operationId": "list_trusted_profile_assignments",
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "description": "Account ID of the Assignments to query. This parameter is required unless using a pagetoken.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_id",
            "in": "query",
            "description": "Filter results by Template Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_version",
            "in": "query",
            "description": "Filter results Template Version",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "Filter results by the assignment target",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "target_type",
            "in": "query",
            "description": "Filter results by the assignment's target type",
            "schema": {
              "type": "string",
              "enum": [
                "Account",
                "AccountGroup"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional size of a single page. Default is 20 items per page. Valid range is 1 to 100",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "pagetoken",
            "in": "query",
            "description": "Optional Prev or Next page token returned from a previous query execution. Default is start with first page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "If specified, the items are sorted by the value of this property",
            "schema": {
              "type": "string",
              "enum": [
                "template_id",
                "created_at",
                "last_modified_at"
              ],
              "default": "created_at"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Template retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateAssignmentListResponse"
                },
                "example": {
                  "offset": 0,
                  "limit": 20,
                  "first": "https://iam.cloud.ibm.com/v1/profile_assignments?account_id=5bbe28be34524sdbdaa34d37d1f2294a",
                  "assignments": [
                    {
                      "id": "TemplateAssignment-3bbfaa70-ec17-4c92-b81f-acfd013695a0",
                      "account_id": "5bbe28be34524e88a34d37d1f2294a8a",
                      "template_id": "ProfileTemplate-cac1b203-5956-4981-bdec-0a4af4feab4d",
                      "template_version": 1,
                      "target_type": "Account",
                      "target": "5bbe28be34524e88a34d37d1f2294a8a",
                      "status": "succeeded",
                      "created_at": "2023-05-09T13:01:27:946+0000",
                      "created_by_id": "IBMid-550005G0RQ",
                      "last_modified_at": "2023-05-09T13:10:04:480+0000",
                      "last_modified_by_id": "IBMid-550005G0RQ",
                      "entity_tag": "1-a0b520d828d9c0483aa2b623db8d09e6"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile-assignment.read"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://iam.cloud.ibm.com/v1/profile_assignments?account_id=5bbe28be34524sdbdaa34d37d1f2294a' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "listOptions := &iamidentityv1.ListTrustedProfileAssignmentsOptions{\n",
                      "  AccountID:  &enterpriseAccountID,\n",
                      "  TemplateID: &profileTemplateId,\n",
                      "}\n",
                      "\n",
                      "listResponse, response, err := iamIdentityService.ListTrustedProfileAssignments(listOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(listResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "ListTrustedProfileAssignmentsOptions listOptions = new ListTrustedProfileAssignmentsOptions.Builder()\n",
                      "    .accountId(enterpriseAccountId)\n",
                      "    .templateId(profileTemplateId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<TemplateAssignmentListResponse> listResponse = service.listTrustedProfileAssignments(listOptions).execute();\n",
                      "TemplateAssignmentListResponse listResult = listResponse.getResult();\n",
                      "System.out.println(listResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  accountId: enterpriseAccountId,\n",
                      "  templateId: profileTemplateId,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.listTrustedProfileAssignments(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "list_response = iam_identity_service.list_trusted_profile_assignments(\n",
                      "  account_id=enterprise_account_id, template_id=profile_template_id\n",
                      ")\n",
                      "assignment_list = list_response.get_result()\n",
                      "print('\\nlist_trusted_profile_assignments() response: ', json.dumps(assignment_list, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "tags": [
          "Trusted profile assignments"
        ],
        "summary": "Create assignment",
        "description": "Create an assigment for a trusted profile template.",
        "operationId": "create_trusted_profile_assignment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Body parameters to create an account settings template Assignment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateAssignmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Assignment Record creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateAssignmentResponse"
                },
                "example": {
                  "id": "TemplateAssignment-3bbfaa70-ec17-4c92-b81f-acfd013695a0",
                  "account_id": "5bbe28be34524e88a34d37d1f2294a8a",
                  "template_id": "ProfileTemplate-cac1b203-5956-4981-bdec-0a4af4feab4d",
                  "template_version": 1,
                  "target_type": "Account",
                  "target": "5bbe28be34524e88a34d37d1f2294a8a",
                  "status": "accepted",
                  "created_at": "2023-05-09T13:01:27:946+0000",
                  "created_by_id": "IBMid-550005G0RQ",
                  "last_modified_at": "2023-05-09T13:10:04:480+0000",
                  "last_modified_by_id": "IBMid-550005G0RQ",
                  "entity_tag": "18-a0b520d828d9c0483aa2b623db8d09e6"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile-assignment.create"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://iam.cloud.ibm.com/v1/profile_assignments' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN' \\\n",
                      "-d '{\n",
                      "    \"template_id\": \"ProfileTemplate-cac1b203-5956-4981-bdec-0a4af4feab4d\",\n",
                      "    \"template_version\": 1,\n",
                      "    \"target_type\": \"Account\",\n",
                      "    \"target\": \"5bbe28be34524e88a34d37d1f2294a8a\"\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "assignOptions := &iamidentityv1.CreateTrustedProfileAssignmentOptions{\n",
                      "  TemplateID:      &profileTemplateId,\n",
                      "  TemplateVersion: &profileTemplateVersion,\n",
                      "  TargetType:      core.StringPtr(\"Account\"),\n",
                      "  Target:          &enterpriseSubAccountID,\n",
                      "}\n",
                      "\n",
                      "assignResponse, response, err := iamIdentityService.CreateTrustedProfileAssignment(assignOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(assignResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))\n",
                      "\n",
                      "// Grab the Etag and id for use by other test methods.\n",
                      "profileTemplateAssignmentEtag = response.GetHeaders().Get(\"Etag\")\n",
                      "profileTemplateAssignmentId = *assignResponse.ID"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CreateTrustedProfileAssignmentOptions assignOptions = new CreateTrustedProfileAssignmentOptions.Builder()\n",
                      "    .templateId(profileTemplateId)\n",
                      "    .templateVersion(profileTemplateVersion)\n",
                      "    .targetType(\"Account\")\n",
                      "    .target(enterpriseSubAccountId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<TemplateAssignmentResponse> assignResponse = service.createTrustedProfileAssignment(assignOptions).execute();\n",
                      "TemplateAssignmentResponse assignmentResponseResult = assignResponse.getResult();\n",
                      "\n",
                      "// Save the id for use by other test methods.\n",
                      "profileTemplateAssignmentId = assignmentResponseResult.getId();\n",
                      "// Grab the Etag value from the response for use in the update operation.\n",
                      "profileTemplateAssignmentEtag = assignResponse.getHeaders().values(\"Etag\").get(0);\n",
                      "\n",
                      "System.out.println(assignmentResponseResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const assignParams = {\n",
                      "  templateId: profileTemplateId,\n",
                      "  templateVersion: profileTemplateVersion,\n",
                      "  targetType: \"Account\",\n",
                      "  target: enterpriseSubAccountId,\n",
                      "}\n",
                      "\n",
                      "try {\n",
                      "  const assRes = await iamIdentityService.createTrustedProfileAssignment(assignParams);\n",
                      "  const { result } = assRes;\n",
                      "  profileTemplateAssignmentId = result.id;\n",
                      "  profileTemplateAssignmentEtag= assRes.headers.etag;\n",
                      "  console.log(JSON.stringify(result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "assign_response = iam_identity_service.create_trusted_profile_assignment(\n",
                      "  template_id=profile_template_id,\n",
                      "  template_version=profile_template_version,\n",
                      "  target_type='Account',\n",
                      "  target=enterprise_subaccount_id,\n",
                      ")\n",
                      "assignment = assign_response.get_result()\n",
                      "print('\\ncreate_trusted_profile_assignment() response: ', json.dumps(assignment, indent=2))\n",
                      "global profile_template_assignment_id\n",
                      "profile_template_assignment_id = assignment['id']\n",
                      "global profile_template_assignment_etag\n",
                      "profile_template_assignment_etag = assign_response.get_headers()['Etag']"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/profile_assignments/{assignment_id}": {
      "get": {
        "tags": [
          "Trusted profile assignments"
        ],
        "summary": "Get assignment",
        "description": "Get an assigment for a trusted profile template.",
        "operationId": "get_trusted_profile_assignment",
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "description": "ID of the Assignment Record",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_history",
            "in": "query",
            "description": "Defines if the entity history is included in the response",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateAssignmentResponse"
                },
                "example": {
                  "id": "TemplateAssignment-3bbfaa70-ec17-4c92-b81f-acfd013695a0",
                  "account_id": "5bbe28be34524e88a34d37d1f2294a8a",
                  "template_id": "ProfileTemplate-cac1b203-5956-4981-bdec-0a4af4feab4d",
                  "template_version": 1,
                  "target_type": "Account",
                  "target": "5bbe28be34524e88a34d37d1f2294a8a",
                  "status": "succeeded",
                  "resources": [
                    {
                      "target": "5bbe28be34524e88a34d37d1f2294a8a",
                      "profile": {
                        "resource_created": {
                          "id": "Profile-3bbfaa70-ec17-4c92-b81f-dfbda2a3"
                        },
                        "status": "succeeded"
                      }
                    }
                  ],
                  "created_at": "2023-05-09T13:01:27:946+0000",
                  "created_by_id": "IBMid-550005G0RQ",
                  "last_modified_at": "2023-05-09T13:10:04:480+0000",
                  "last_modified_by_id": "IBMid-550005G0RQ",
                  "entity_tag": "1-a0b520d828d9c0483aa2b623db8d09e6"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile-assignment.read"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://iam.cloud.ibm.com/v1/profile_assignments/<assignment_id>' \\\n",
                      "-H 'Authorization: Bearer $TOKEN' \\\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "getAssignmentOptions := &iamidentityv1.GetTrustedProfileAssignmentOptions{\n",
                      "  AssignmentID: &profileTemplateAssignmentId,\n",
                      "}\n",
                      "\n",
                      "assignment, response, err := iamIdentityService.GetTrustedProfileAssignment(getAssignmentOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(assignment, \"\", \"  \")\n",
                      "fmt.Println(string(b))"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "GetTrustedProfileAssignmentOptions getOptions = new GetTrustedProfileAssignmentOptions.Builder()\n",
                      "    .assignmentId(profileTemplateAssignmentId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<TemplateAssignmentResponse> getResponse = service.getTrustedProfileAssignment(getOptions).execute();\n",
                      "TemplateAssignmentResponse getResult = getResponse.getResult();\n",
                      "\n",
                      "System.out.println(getResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  assignmentId: profileTemplateAssignmentId,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.getTrustedProfileAssignment(params);\n",
                      "  console.log(JSON.stringify(res.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "response = iam_identity_service.get_trusted_profile_assignment(assignment_id=profile_template_assignment_id)\n",
                      "assignment = response.get_result()\n",
                      "print('\\nget_trusted_profile_assignment() response: ', json.dumps(assignment, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Trusted profile assignments"
        ],
        "summary": "Delete assignment",
        "description": "Delete a trusted profile assignment. This removes any IAM resources created by this assignment in child accounts.",
        "operationId": "delete_trusted_profile_assignment",
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "description": "ID of the Assignment Record",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Request to delete assignment is accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile-assignment.delete"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE 'https://iam.cloud.ibm.com/v1/profile_assignments/<assignment_id>' \\\n",
                      "-H 'Authorization: Bearer $TOKEN' \\\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "deleteOptions := &iamidentityv1.DeleteTrustedProfileAssignmentOptions{\n",
                      "  AssignmentID: &profileTemplateAssignmentId,\n",
                      "}\n",
                      "excResponse, response, err := iamIdentityService.DeleteTrustedProfileAssignment(deleteOptions)"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "DeleteTrustedProfileAssignmentOptions deleteOptions = new DeleteTrustedProfileAssignmentOptions.Builder()\n",
                      "    .assignmentId(profileTemplateAssignmentId)\n",
                      "    .build();\n",
                      "\n",
                      "Response<ExceptionResponse> deleteResponse = service.deleteTrustedProfileAssignment(deleteOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const params = {\n",
                      "  assignmentId: profileTemplateAssignmentId,\n",
                      "}\n",
                      "try {\n",
                      "  const res = await iamIdentityService.deleteTrustedProfileAssignment(params);\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "delete_response = iam_identity_service.delete_trusted_profile_assignment(\n",
                      "  assignment_id=profile_template_assignment_id\n",
                      ")"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "patch": {
        "tags": [
          "Trusted profile assignments"
        ],
        "summary": "Update assignment",
        "description": "Update a trusted profile assignment. Call this method to retry failed assignments or migrate the trusted profile in child accounts to a new version.",
        "operationId": "update_trusted_profile_assignment",
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "description": "ID of the Assignment Record",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Version of the Assignment to be updated. Specify the version\nthat you retrieved when reading the Assignment. This value \nhelps identifying parallel usage of this API.\nPass * to indicate to update any version available. This\nmight result in stale updates.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token used for the request. The supported token type is a Cloud IAM Access Token. If the token is omitted the request will fail with BXNIM0308E: 'No authorization header found'. Make sure that the provided token has the required authority for the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request to update an assignment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTemplateAssignmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateAssignmentResponse"
                },
                "example": {
                  "id": "TemplateAssignment-3bbfaa70-ec17-4c92-b81f-acfd013695a0",
                  "account_id": "5bbe28be34524e88a34d37d1f2294a8a",
                  "template_id": "ProfileTemplate-cac1b203-5956-4981-bdec-0a4af4feab4d",
                  "template_version": 2,
                  "target_type": "Account",
                  "target": "5bbe28be34524e88a34d37d1f2294a8a",
                  "status": "accepted",
                  "created_at": "2023-05-09T13:01:27:946+0000",
                  "created_by_id": "IBMid-550005G0RQ",
                  "last_modified_at": "2023-05-09T13:10:04:480+0000",
                  "last_modified_by_id": "IBMid-550005G0RQ",
                  "entity_tag": "1-a0b520d828d9c0483aa2b623db8d09e6"
                }
              }
            }
          },
          "202": {
            "description": "Successful Assignment Record update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateAssignmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Parameter validation failed. Response if required parameters are missing or if parameter values are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "The incoming request did not contain a valid authentication information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "The incoming request is valid but the user is not allowed to perform the requested action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        },
        "x-ibm-permissions": {
          "actions": [
            {
              "name": "iam-identity.profile-assignment.update"
            }
          ]
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PATCH 'https://iam.cloud.ibm.com/v1/profile_assignments/<assignment_id>' \\\n",
                      "-H 'Authorization: Bearer $TOKEN' \\\n",
                      "-H 'Content-Type: application/json' \\\n",
                      "-H 'Authorization: Bearer $TOKEN' \\\n",
                      "-d '{\n",
                      "    \"template_version\": 2\n",
                      "}'"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "updateOptions := &iamidentityv1.UpdateTrustedProfileAssignmentOptions{\n",
                      "  AssignmentID:    &profileTemplateAssignmentId,\n",
                      "  TemplateVersion: &profileTemplateVersion,\n",
                      "  IfMatch:         &profileTemplateAssignmentEtag,\n",
                      "}\n",
                      "\n",
                      "updateResponse, response, err := iamIdentityService.UpdateTrustedProfileAssignment(updateOptions)\n",
                      "\n",
                      "b, _ := json.MarshalIndent(updateResponse, \"\", \"  \")\n",
                      "fmt.Println(string(b))\n",
                      "\n",
                      "// Grab the Etag and id for use by other test methods.\n",
                      "profileTemplateAssignmentEtag = response.GetHeaders().Get(\"Etag\")"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "UpdateTrustedProfileAssignmentOptions updateOptions = new UpdateTrustedProfileAssignmentOptions.Builder()\n",
                      "    .assignmentId(profileTemplateAssignmentId)\n",
                      "    .templateVersion(profileTemplateVersion)\n",
                      "    .ifMatch(profileTemplateAssignmentEtag)\n",
                      "    .build();\n",
                      "\n",
                      "Response<TemplateAssignmentResponse> updateResponse = service.updateTrustedProfileAssignment(updateOptions).execute();\n",
                      "TemplateAssignmentResponse updateResult = updateResponse.getResult();\n",
                      "\n",
                      "// Grab the Etag value from the response for use in the update operation.\n",
                      "profileTemplateAssignmentEtag = updateResponse.getHeaders().values(\"Etag\").get(0);\n",
                      "\n",
                      "System.out.println(updateResult);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const assignParams = {\n",
                      "  assignmentId: profileTemplateAssignmentId,\n",
                      "  templateVersion: profileTemplateVersion,\n",
                      "  ifMatch: profileTemplateAssignmentEtag,\n",
                      "}\n",
                      "\n",
                      "try {\n",
                      "  const assRes = await iamIdentityService.updateTrustedProfileAssignment(assignParams);\n",
                      "  console.log(JSON.stringify(assRes.result, null, 2));\n",
                      "} catch (err) {\n",
                      "  console.warn(err);\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "assign_response = iam_identity_service.update_trusted_profile_assignment(\n",
                      "  assignment_id=profile_template_assignment_id,\n",
                      "  template_version=profile_template_version,\n",
                      "  if_match=profile_template_assignment_etag,\n",
                      ")\n",
                      "assignment = assign_response.get_result()\n",
                      "print('\\nupdate_profile_template_assignment response: ', json.dumps(assignment, indent=2))\n",
                      "profile_template_assignment_etag = assign_response.get_headers()['Etag']"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    }
  },
  "x-ibm-services": [
    ""
  ],
  "servers": [
    {
      "url": "https://iam.cloud.ibm.com"
    }
  ],
  "components": {
    "schemas": {
      "AccountSettingsRequest": {
        "type": "object",
        "description": "Input body parameters for the Account Settings REST request.",
        "properties": {
          "restrict_create_service_id": {
            "type": "string",
            "description": "Defines whether or not creating a service ID is access controlled. Valid values:\n  * RESTRICTED - only users assigned the 'Service ID creator' role on the IAM Identity Service can create service IDs, including the account owner\n  * NOT_RESTRICTED - all members of an account can create service IDs\n  * NOT_SET - to 'unset' a previous set value",
            "enum": [
              "RESTRICTED",
              "NOT_RESTRICTED",
              "NOT_SET"
            ]
          },
          "restrict_create_platform_apikey": {
            "type": "string",
            "enum": [
              "RESTRICTED",
              "NOT_RESTRICTED",
              "NOT_SET"
            ],
            "description": "Defines whether or not creating platform API keys is access controlled. Valid values:\n  * RESTRICTED - only users assigned the 'User API key creator' role on the IAM Identity Service can create API keys, including the account owner\n  * NOT_RESTRICTED - all members of an account can create platform API keys\n  * NOT_SET - to 'unset' a previous set value\n"
          },
          "allowed_ip_addresses": {
            "type": "string",
            "description": "Defines the IP addresses and subnets from which IAM tokens can be created for the account."
          },
          "mfa": {
            "type": "string",
            "enum": [
              "NONE",
              "NONE_NO_ROPC",
              "TOTP",
              "TOTP4ALL",
              "LEVEL1",
              "LEVEL2",
              "LEVEL3"
            ],
            "description": "Defines the MFA trait for the account. Valid values:\n  * NONE - No MFA trait set\n  * NONE_NO_ROPC- No MFA, disable CLI logins with only a password\n  * TOTP - For all non-federated IBMId users\n  * TOTP4ALL - For all users\n  * LEVEL1 - Email-based MFA for all users\n  * LEVEL2 - TOTP-based MFA for all users\n  * LEVEL3 - U2F MFA for all users\n"
          },
          "user_mfa": {
            "type": "array",
            "description": "List of users that are exempted from the MFA requirement of the account.",
            "items": {
              "$ref": "#/components/schemas/AccountSettingsUserMFA"
            }
          },
          "session_expiration_in_seconds": {
            "type": "string",
            "description": "Defines the session expiration in seconds for the account. Valid values:\n  * Any whole number between between '900' and '86400'\n  * NOT_SET - To unset account setting and use service default",
            "default": 86400
          },
          "session_invalidation_in_seconds": {
            "type": "string",
            "description": "Defines the period of time in seconds in which a session will be invalidated due to inactivity. Valid values:\n  * Any whole number between '900' and '7200'\n  * NOT_SET - To unset account setting and use service default",
            "default": 7200
          },
          "max_sessions_per_identity": {
            "type": "string",
            "description": "Defines the max allowed sessions per identity required by the account. Value values:\n  * Any whole number greater than 0\n  * NOT_SET - To unset account setting and use service default"
          },
          "system_access_token_expiration_in_seconds": {
            "type": "string",
            "description": "Defines the access token expiration in seconds. Valid values:\n  * Any whole number between '900' and '3600'\n  * NOT_SET - To unset account setting and use service default",
            "default": 3600
          },
          "system_refresh_token_expiration_in_seconds": {
            "type": "string",
            "description": "Defines the refresh token expiration in seconds. Valid values:\n  * Any whole number between '900' and '259200'\n  * NOT_SET - To unset account setting and use service default",
            "default": 259200
          }
        }
      },
      "AccountSettingsResponse": {
        "type": "object",
        "description": "Response body format for Account Settings REST requests.",
        "required": [
          "account_id",
          "entity_tag",
          "mfa",
          "user_mfa",
          "allowed_ip_addresses",
          "restrict_create_platform_apikey",
          "restrict_create_service_id",
          "session_expiration_in_seconds",
          "session_invalidation_in_seconds",
          "max_sessions_per_identity",
          "system_access_token_expiration_in_seconds",
          "system_refresh_token_expiration_in_seconds"
        ],
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ResponseContext"
          },
          "account_id": {
            "type": "string",
            "description": "Unique ID of the account."
          },
          "restrict_create_service_id": {
            "type": "string",
            "description": "Defines whether or not creating a service ID is access controlled. Valid values:\n  * RESTRICTED - only users assigned the 'Service ID creator' role on the IAM Identity Service can create service IDs, including the account owner\n  * NOT_RESTRICTED - all members of an account can create service IDs\n  * NOT_SET - to 'unset' a previous set value",
            "enum": [
              "RESTRICTED",
              "NOT_RESTRICTED",
              "NOT_SET"
            ],
            "default": "NOT_SET"
          },
          "restrict_create_platform_apikey": {
            "type": "string",
            "description": "Defines whether or not creating platform API keys is access controlled. Valid values:\n  * RESTRICTED - to apply access control\n  * NOT_RESTRICTED - to remove access control\n  * NOT_SET - to 'unset' a previous set value",
            "enum": [
              "RESTRICTED",
              "NOT_RESTRICTED",
              "NOT_SET"
            ],
            "default": "NOT_SET"
          },
          "allowed_ip_addresses": {
            "type": "string",
            "description": "Defines the IP addresses and subnets from which IAM tokens can be created for the account."
          },
          "entity_tag": {
            "type": "string",
            "description": "Version of the account settings."
          },
          "mfa": {
            "type": "string",
            "description": "Defines the MFA trait for the account. Valid values:\n  * NONE - No MFA trait set\n  * NONE_NO_ROPC- No MFA, disable CLI logins with only a password\n  * TOTP - For all non-federated IBMId users\n  * TOTP4ALL - For all users\n  * LEVEL1 - Email-based MFA for all users\n  * LEVEL2 - TOTP-based MFA for all users\n  * LEVEL3 - U2F MFA for all users\n",
            "enum": [
              "NONE",
              "NONE_NO_ROPC",
              "TOTP",
              "TOTP4ALL",
              "LEVEL1",
              "LEVEL2",
              "LEVEL3"
            ]
          },
          "user_mfa": {
            "type": "array",
            "description": "List of users that are exempted from the MFA requirement of the account.",
            "items": {
              "$ref": "#/components/schemas/AccountSettingsUserMFA"
            }
          },
          "history": {
            "type": "array",
            "description": "History of the Account Settings.",
            "items": {
              "$ref": "#/components/schemas/EnityHistoryRecord"
            }
          },
          "session_expiration_in_seconds": {
            "type": "string",
            "description": "Defines the session expiration in seconds for the account. Valid values:\n  * Any whole number between between '900' and '86400'\n  * NOT_SET - To unset account setting and use service default",
            "default": 86400
          },
          "session_invalidation_in_seconds": {
            "type": "string",
            "description": "Defines the period of time in seconds in which a session will be invalidated due to inactivity. Valid values:\n  * Any whole number between '900' and '7200'\n  * NOT_SET - To unset account setting and use service default",
            "default": 7200
          },
          "max_sessions_per_identity": {
            "type": "string",
            "description": "Defines the max allowed sessions per identity required by the account. Valid values:\n  * Any whole number greater than 0\n  * NOT_SET - To unset account setting and use service default"
          },
          "system_access_token_expiration_in_seconds": {
            "type": "string",
            "description": "Defines the access token expiration in seconds. Valid values:\n  * Any whole number between '900' and '3600'\n  * NOT_SET - To unset account setting and use service default",
            "default": 3600
          },
          "system_refresh_token_expiration_in_seconds": {
            "type": "string",
            "description": "Defines the refresh token expiration in seconds. Valid values:\n  * Any whole number between '900' and '259200'\n  * NOT_SET - To unset account setting and use service default",
            "default": 259200
          }
        }
      },
      "AccountSettingsUserMFA": {
        "type": "object",
        "required": [
          "iam_id",
          "mfa"
        ],
        "properties": {
          "iam_id": {
            "type": "string",
            "description": "The iam_id of the user."
          },
          "mfa": {
            "type": "string",
            "description": "Defines the MFA requirement for the user. Valid values:\n  * NONE - No MFA trait set\n  * NONE_NO_ROPC- No MFA, disable CLI logins with only a password\n  * TOTP - For all non-federated IBMId users\n  * TOTP4ALL - For all users\n  * LEVEL1 - Email-based MFA for all users\n  * LEVEL2 - TOTP-based MFA for all users\n  * LEVEL3 - U2F MFA for all users",
            "enum": [
              "NONE",
              "NONE_NO_ROPC",
              "TOTP",
              "TOTP4ALL",
              "LEVEL1",
              "LEVEL2",
              "LEVEL3"
            ]
          }
        }
      },
      "ApiKeyList": {
        "type": "object",
        "required": [
          "apikeys"
        ],
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ResponseContext"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset of the current page."
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Optional size of a single page. Default is 20 items per page. Valid range is 1 to 100"
          },
          "first": {
            "type": "string",
            "description": "Link to the first page."
          },
          "previous": {
            "type": "string",
            "description": "Link to the previous available page. If 'previous' property is not part of the response no previous page is available."
          },
          "next": {
            "type": "string",
            "description": "Link to the next available page. If 'next' property is not part of the response no next page is available."
          },
          "apikeys": {
            "type": "array",
            "description": "List of API keys based on the query paramters and the page size. The apikeys array is always part of the response but might be empty depending on the query parameters values provided.",
            "items": {
              "$ref": "#/components/schemas/ApiKey"
            }
          }
        },
        "description": "Response body format for the List API keys V1 REST request."
      },
      "ExceptionResponse": {
        "type": "object",
        "required": [
          "errors",
          "status_code"
        ],
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ResponseContext"
          },
          "status_code": {
            "type": "string",
            "description": "Error message code of the REST Exception.\n"
          },
          "errors": {
            "type": "array",
            "description": "List of errors that occured.\n",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          },
          "trace": {
            "type": "string",
            "description": "Unique ID of the requst.\n"
          }
        },
        "description": "Response body parameters in case of error situations."
      },
      "CreateApiKeyRequest": {
        "type": "object",
        "required": [
          "iam_id",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the API key. The name is not checked for uniqueness. Therefore multiple names with the same value can exist. Access is done via the UUID of the API key."
          },
          "description": {
            "type": "string",
            "description": "The optional description of the API key. The 'description' property is only available if a description was provided during a create of an API key."
          },
          "iam_id": {
            "type": "string",
            "description": "The iam_id that this API key authenticates."
          },
          "account_id": {
            "type": "string",
            "description": "The account ID of the API key."
          },
          "apikey": {
            "type": "string",
            "description": "You can optionally passthrough the API key value for this API key. If passed, NO validation of that apiKey value is done, i.e. the value can be non-URL safe. If omitted, the API key management will create an URL safe opaque API key value. The value of the API key is checked for uniqueness. Ensure enough variations when passing in this value."
          },
          "store_value": {
            "type": "boolean",
            "description": "Send true or false to set whether the API key value is retrievable in the future by using the Get details of an API key request. If you create an API key for a user, you must specify `false` or omit the value. We don't allow storing of API keys for users."
          }
        },
        "description": "Input body parameters for the Create API key V1 REST request."
      },
      "ApiKeyInsideCreateServiceIdRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the API key. The name is not checked for uniqueness. Therefore multiple names with the same value can exist. Access is done via the UUID of the API key."
          },
          "description": {
            "type": "string",
            "description": "The optional description of the API key. The 'description' property is only available if a description was provided during a create of an API key."
          },
          "apikey": {
            "type": "string",
            "description": "You can optionally passthrough the API key value for this API key. If passed, NO validation of that apiKey value is done, i.e. the value can be non-URL safe. If omitted, the API key management will create an URL safe opaque API key value. The value of the API key is checked for uniqueness. Please ensure enough variations when passing in this value."
          },
          "store_value": {
            "type": "boolean",
            "description": "Send true or false to set whether the API key value is retrievable in the future by using the Get details of an API key request. If you create an API key for a user, you must specify `false` or omit the value. We don't allow storing of API keys for users."
          }
        },
        "description": "Parameters for the API key in the Create service Id V1 REST request."
      },
      "ApiKey": {
        "type": "object",
        "required": [
          "account_id",
          "apikey",
          "created_by",
          "crn",
          "iam_id",
          "id",
          "locked",
          "name"
        ],
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ResponseContext"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of this API Key."
          },
          "entity_tag": {
            "type": "string",
            "description": "Version of the API Key details object. You need to specify this value when updating the API key to avoid stale updates."
          },
          "crn": {
            "type": "string",
            "description": "Cloud Resource Name of the item. Example Cloud Resource Name: 'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::apikey:1234-9012-5678'"
          },
          "locked": {
            "type": "boolean",
            "description": "The API key cannot be changed if set to true."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "If set contains a date time string of the creation date in ISO format."
          },
          "created_by": {
            "type": "string",
            "description": "IAM ID of the user or service which created the API key."
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "If set contains a date time string of the last modification date in ISO format."
          },
          "name": {
            "type": "string",
            "description": "Name of the API key. The name is not checked for uniqueness. Therefore multiple names with the same value can exist. Access is done via the UUID of the API key."
          },
          "description": {
            "type": "string",
            "description": "The optional description of the API key. The 'description' property is only available if a description was provided during a create of an API key."
          },
          "iam_id": {
            "type": "string",
            "description": "The iam_id that this API key authenticates."
          },
          "account_id": {
            "type": "string",
            "description": "ID of the account that this API key authenticates for."
          },
          "apikey": {
            "type": "string",
            "description": "The API key value. This property only contains the API key value for the following cases: create an API key, update a service ID API key that stores the API key value as retrievable, or get a service ID API key that stores the API key value as retrievable. All other operations don't return the API key value, for example all user API key related operations, except for create, don't contain the API key value."
          },
          "history": {
            "type": "array",
            "description": "History of the API key.",
            "items": {
              "$ref": "#/components/schemas/EnityHistoryRecord"
            }
          },
          "activity": {
            "$ref": "#/components/schemas/Activity"
          }
        },
        "description": "Response body format for API key V1 REST requests."
      },
      "UpdateApiKeyRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the API key to update. If specified in the request the parameter must not be empty. The name is not checked for uniqueness. Failure to this will result in an Error condition."
          },
          "description": {
            "type": "string",
            "description": "The description of the API key to update. If specified an empty description will clear the description of the API key. If a non empty value is provided the API key will be updated."
          }
        },
        "description": "Input body parameters for the Update API key V1 REST request."
      },
      "ServiceIdList": {
        "type": "object",
        "required": [
          "serviceids"
        ],
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ResponseContext"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset of the current page."
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Optional size of a single page. Default is 20 items per page. Valid range is 1 to 100."
          },
          "first": {
            "type": "string",
            "description": "Link to the first page."
          },
          "previous": {
            "type": "string",
            "description": "Link to the previous available page. If 'previous' property is not part of the response no previous page is available."
          },
          "next": {
            "type": "string",
            "description": "Link to the next available page. If 'next' property is not part of the response no next page is available."
          },
          "serviceids": {
            "type": "array",
            "description": "List of service IDs based on the query paramters and the page size. The service IDs array is always part of the response but might be empty depending on the query parameter values provided.",
            "items": {
              "$ref": "#/components/schemas/ServiceId"
            }
          }
        },
        "description": "Response body format for the list service ID V1 REST request."
      },
      "CreateServiceIdRequest": {
        "type": "object",
        "required": [
          "account_id",
          "name"
        ],
        "properties": {
          "account_id": {
            "type": "string",
            "description": "ID of the account the service ID belongs to."
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Id. The name is not checked for uniqueness. Therefore multiple names with the same value can exist. Access is done via the UUID of the Service Id."
          },
          "description": {
            "type": "string",
            "description": "The optional description of the Service Id. The 'description' property is only available if a description was provided during a create of a Service Id."
          },
          "unique_instance_crns": {
            "type": "array",
            "description": "Optional list of CRNs (string array) which point to the services connected to the service ID.",
            "items": {
              "type": "string"
            }
          },
          "apikey": {
            "$ref": "#/components/schemas/ApiKeyInsideCreateServiceIdRequest"
          }
        },
        "description": "Input body parameters for the Create service ID V1 REST request."
      },
      "ServiceId": {
        "type": "object",
        "required": [
          "account_id",
          "crn",
          "iam_id",
          "id",
          "locked",
          "name",
          "entity_tag",
          "created_at",
          "modified_at"
        ],
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ResponseContext"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of this Service Id."
          },
          "iam_id": {
            "type": "string",
            "description": "Cloud wide identifier for identities of this service ID."
          },
          "entity_tag": {
            "type": "string",
            "description": "Version of the service ID details object. You need to specify this value when updating the service ID to avoid stale updates."
          },
          "crn": {
            "type": "string",
            "description": "Cloud Resource Name of the item. Example Cloud Resource Name: 'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::serviceid:1234-5678-9012'"
          },
          "locked": {
            "type": "boolean",
            "description": "The service ID cannot be changed if set to true."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "If set contains a date time string of the creation date in ISO format."
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "If set contains a date time string of the last modification date in ISO format."
          },
          "account_id": {
            "type": "string",
            "description": "ID of the account the service ID belongs to."
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Id. The name is not checked for uniqueness. Therefore multiple names with the same value can exist. Access is done via the UUID of the Service Id."
          },
          "description": {
            "type": "string",
            "description": "The optional description of the Service Id. The 'description' property is only available if a description was provided during a create of a Service Id."
          },
          "unique_instance_crns": {
            "type": "array",
            "description": "Optional list of CRNs (string array) which point to the services connected to the service ID.",
            "items": {
              "type": "string"
            }
          },
          "history": {
            "type": "array",
            "description": "History of the Service ID.",
            "items": {
              "$ref": "#/components/schemas/EnityHistoryRecord"
            }
          },
          "apikey": {
            "$ref": "#/components/schemas/ApiKey"
          },
          "activity": {
            "$ref": "#/components/schemas/Activity"
          }
        },
        "description": "Response body format for service ID V1 REST requests."
      },
      "UpdateServiceIdRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the service ID to update. If specified in the request the parameter must not be empty. The name is not checked for uniqueness. Failure to this will result in an Error condition."
          },
          "description": {
            "type": "string",
            "description": "The description of the service ID to update. If specified an empty description will clear the description of the service ID. If an non empty value is provided the service ID will be updated."
          },
          "unique_instance_crns": {
            "type": "array",
            "description": "List of CRNs which point to the services connected to this service ID. If specified an empty list will clear all existing unique instance crns of the service ID.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Input body parameters for the Update service ID V1 REST request."
      },
      "ResponseContext": {
        "type": "object",
        "properties": {
          "transaction_id": {
            "type": "string",
            "description": "The transaction ID of the inbound REST request.\n"
          },
          "operation": {
            "type": "string",
            "description": "The operation of the inbound REST request.\n"
          },
          "user_agent": {
            "type": "string",
            "description": "The user agent of the inbound REST request.\n"
          },
          "url": {
            "type": "string",
            "description": "The URL of that cluster.\n"
          },
          "instance_id": {
            "type": "string",
            "description": "The instance ID of the server instance processing the request.\n"
          },
          "thread_id": {
            "type": "string",
            "description": "The thread ID of the server instance processing the request.\n"
          },
          "host": {
            "type": "string",
            "description": "The host of the server instance processing the request.\n"
          },
          "start_time": {
            "type": "string",
            "description": "The start time of the request.\n"
          },
          "end_time": {
            "type": "string",
            "description": "The finish time of the request.\n"
          },
          "elapsed_time": {
            "type": "string",
            "description": "The elapsed time in msec.\n"
          },
          "cluster_name": {
            "type": "string",
            "description": "The cluster name.\n"
          }
        },
        "description": "Context with key properties for problem determination."
      },
      "Error": {
        "type": "object",
        "required": [
          "code",
          "message",
          "message_code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code of the REST Exception.\n"
          },
          "message_code": {
            "type": "string",
            "description": "Error message code of the REST Exception.\n"
          },
          "message": {
            "type": "string",
            "description": "Error message of the REST Exception. Error messages are derived base on the input locale of the REST request and the available Message catalogs. Dynamic fallback to 'us-english' is happening if no message catalog is available for the provided input locale."
          },
          "details": {
            "type": "string",
            "description": "Error details of the REST Exception.\n"
          }
        },
        "description": "Error information."
      },
      "EnityHistoryRecord": {
        "type": "object",
        "required": [
          "action",
          "iam_id",
          "iam_id_account",
          "message",
          "params",
          "timestamp"
        ],
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "Timestamp when the action was triggered."
          },
          "iam_id": {
            "type": "string",
            "description": "IAM ID of the identity which triggered the action."
          },
          "iam_id_account": {
            "type": "string",
            "description": "Account of the identity which triggered the action."
          },
          "action": {
            "type": "string",
            "description": "Action of the history entry."
          },
          "params": {
            "type": "array",
            "description": "Params of the history entry.",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string",
            "description": "Message which summarizes the executed action."
          }
        },
        "description": "Response body format for an entity history record."
      },
      "token-response": {
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The IAM access token that can be used to invoke various IBM Cloud APIs. Use this token with the prefix Bearer in the HTTP header Authorization for invocations of IAM compatible APIs."
          },
          "refresh_token": {
            "type": "string",
            "description": "(optional) A refresh token that can be used to get a new IAM access token if that token is expired. When using the default client (no basic authorization header) as described in this documentation, this refresh_token cannot be used to retrieve a new IAM access token. When the IAM access token is about to be expired, use the API key to create a new access token."
          },
          "delegated_refresh_token": {
            "type": "string",
            "description": "(optional) A delegated refresh token that can only be consumed by the clients that have been specified in the API call as 'receiver_client_ids'"
          },
          "token_type": {
            "type": "string",
            "description": "The type of the token. Currently, only Bearer is returned."
          },
          "expires_in": {
            "type": "integer",
            "description": "Number of seconds until the IAM access token will expire.",
            "format": "int32"
          },
          "expiration": {
            "type": "integer",
            "description": "Number of seconds counted since January 1st, 1970, until the IAM access token will expire.",
            "format": "int32"
          }
        },
        "additionalProperties": true,
        "description": "Response body for POST /identity/token."
      },
      "OidcExceptionResponse": {
        "type": "object",
        "required": [
          "errorCode",
          "errorMessage"
        ],
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ExceptionResponseContext"
          },
          "errorCode": {
            "type": "string",
            "description": "Error message code of the REST Exception.\n"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message of the REST Exception. Error messages are derived base on the input locale of the REST request and the available Message catalogs. Dynamic fallback to 'us-english' is happening if no message catalog is available for the provided input locale."
          },
          "errorDetails": {
            "type": "string",
            "description": "Error details of the REST Exception.\n"
          },
          "requirements": {
            "$ref": "#/components/schemas/MFARequirementsResponse"
          }
        },
        "description": "Response body parameters in case of oidc error situations."
      },
      "ExceptionResponseContext": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "The request ID of the inbound REST request.\n"
          },
          "requestType": {
            "type": "string",
            "description": "The request type of the inbound REST request.\n"
          },
          "userAgent": {
            "type": "string",
            "description": "The user agent of the inbound REST request.\n"
          },
          "url": {
            "type": "string",
            "description": "The URL of that cluster.\n"
          },
          "instanceId": {
            "type": "string",
            "description": "The instance ID of the server instance processing the request.\n"
          },
          "threadId": {
            "type": "string",
            "description": "The thread ID of the server instance processing the request.\n"
          },
          "host": {
            "type": "string",
            "description": "The host of the server instance processing the request.\n"
          },
          "startTime": {
            "type": "string",
            "description": "The start time of the request.\n"
          },
          "endTime": {
            "type": "string",
            "description": "The finish time of the request.\n"
          },
          "elapsedTime": {
            "type": "string",
            "description": "The elapsed time in msec.\n"
          },
          "locale": {
            "type": "string",
            "description": "The language used to present the error message.\n"
          },
          "clusterName": {
            "type": "string",
            "description": "The cluster name.\n"
          }
        },
        "description": "Context fill with key properties for problem determination."
      },
      "MFARequirementsResponse": {
        "type": "object",
        "required": [
          "authorizationToken",
          "code",
          "error"
        ],
        "properties": {
          "error": {
            "type": "string",
            "description": "MFA error."
          },
          "code": {
            "type": "string",
            "description": "MFA Code."
          },
          "authorizationToken": {
            "type": "string",
            "description": "MFA AuthorizationToken."
          }
        },
        "description": "Response properties for MFA requirements."
      },
      "CreateTrustedProfileRequest": {
        "type": "object",
        "required": [
          "name",
          "account_id"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the trusted profile. The name is checked for uniqueness. Therefore trusted profiles with the same names can not exist in the same account."
          },
          "description": {
            "type": "string",
            "description": "The optional description of the trusted profile. The 'description' property is only available if a description was provided during creation of trusted profile."
          },
          "account_id": {
            "type": "string",
            "description": "The account ID of the trusted profile."
          }
        },
        "description": "Input body parameters for the Create trusted profile V1 REST request."
      },
      "TrustedProfile": {
        "type": "object",
        "required": [
          "iam_id",
          "crn",
          "id",
          "entity_tag",
          "account_id",
          "name"
        ],
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ResponseContext"
          },
          "id": {
            "type": "string",
            "description": "the unique identifier of the trusted profile. Example:'Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c'"
          },
          "entity_tag": {
            "type": "string",
            "description": "Version of the trusted profile details object. You need to specify this value when updating the trusted profile to avoid stale updates."
          },
          "crn": {
            "type": "string",
            "description": "Cloud Resource Name of the item. Example Cloud Resource Name: 'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::profile:Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c'"
          },
          "name": {
            "type": "string",
            "description": "Name of the trusted profile. The name is checked for uniqueness. Therefore trusted profiles with the same names can not exist in the same account."
          },
          "description": {
            "type": "string",
            "description": "The optional description of the trusted profile. The 'description' property is only available if a description was provided during a create of a trusted profile."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "If set contains a date time string of the creation date in ISO format."
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "If set contains a date time string of the last modification date in ISO format."
          },
          "iam_id": {
            "type": "string",
            "description": "The iam_id of this trusted profile."
          },
          "account_id": {
            "type": "string",
            "description": "ID of the account that this trusted profile belong to."
          },
          "template_id": {
            "type": "string",
            "description": "ID of the IAM template that was used to create an enterprise-managed trusted profile in your account. When returned, this indicates that the trusted profile is created from and managed by a template in the root enterprise account."
          },
          "assignment_id": {
            "type": "string",
            "description": "ID of the assignment that was used to create an enterprise-managed trusted profile in your account. When returned, this indicates that the trusted profile is created from and managed by a template in the root enterprise account."
          },
          "ims_account_id": {
            "type": "integer",
            "format": "int64",
            "description": "IMS acount ID of the trusted profile"
          },
          "ims_user_id": {
            "type": "integer",
            "format": "int64",
            "description": "IMS user ID of the trusted profile"
          },
          "history": {
            "type": "array",
            "description": "History of the trusted profile.",
            "items": {
              "$ref": "#/components/schemas/EnityHistoryRecord"
            }
          },
          "activity": {
            "$ref": "#/components/schemas/Activity"
          }
        },
        "description": "Response body format for trusted profile V1 REST requests."
      },
      "UpdateTrustedProfileRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the trusted profile to update. If specified in the request the parameter must not be empty. The name is checked for uniqueness. Failure to this will result in an Error condition."
          },
          "description": {
            "type": "string",
            "description": "The description of the trusted profile to update. If specified an empty description will clear the description of the trusted profile. If a non empty value is provided the trusted profile will be updated."
          }
        },
        "description": "Input body parameters for the Update trusted profile V1 REST request."
      },
      "TrustedProfilesList": {
        "type": "object",
        "required": [
          "profiles"
        ],
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ResponseContext"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset of the current page."
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Optional size of a single page. Default is 20 items per page. Valid range is 1 to 100"
          },
          "first": {
            "type": "string",
            "description": "Link to the first page."
          },
          "previous": {
            "type": "string",
            "description": "Link to the previous available page. If 'previous' property is not part of the response no previous page is available."
          },
          "next": {
            "type": "string",
            "description": "Link to the next available page. If 'next' property is not part of the response no next page is available."
          },
          "profiles": {
            "type": "array",
            "description": "List of trusted profiles",
            "items": {
              "$ref": "#/components/schemas/TrustedProfile"
            }
          }
        },
        "description": "Response body format for the List trusted profiles V1 REST request."
      },
      "ProfileClaimRuleRequest": {
        "type": "object",
        "required": [
          "type",
          "conditions"
        ],
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ResponseContext"
          },
          "name": {
            "type": "string",
            "description": "Name of the claim rule to be created or updated"
          },
          "type": {
            "type": "string",
            "description": "Type of the claim rule, either 'Profile-SAML' or 'Profile-CR'"
          },
          "realm_name": {
            "type": "string",
            "description": "The realm name of the Idp this claim rule applies to. This field is required only if the type is specified as 'Profile-SAML'."
          },
          "cr_type": {
            "type": "string",
            "description": "The compute resource type the rule applies to, required only if type is specified as 'Profile-CR'. Valid values are VSI, IKS_SA, ROKS_SA."
          },
          "expiration": {
            "type": "integer",
            "description": "Session expiration in seconds, only required if type is 'Profile-SAML'."
          },
          "conditions": {
            "type": "array",
            "description": "Conditions of this claim rule.",
            "items": {
              "$ref": "#/components/schemas/ProfileClaimRuleConditions"
            }
          }
        }
      },
      "TrustedProfileTemplateClaimRule": {
        "type": "object",
        "required": [
          "type",
          "conditions"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the claim rule to be created or updated"
          },
          "type": {
            "type": "string",
            "description": "Type of the claim rule",
            "enum": [
              "Profile-SAML"
            ]
          },
          "realm_name": {
            "type": "string",
            "description": "The realm name of the Idp this claim rule applies to. This field is required only if the type is specified as 'Profile-SAML'."
          },
          "expiration": {
            "type": "integer",
            "description": "Session expiration in seconds, only required if type is 'Profile-SAML'."
          },
          "conditions": {
            "type": "array",
            "description": "Conditions of this claim rule.",
            "items": {
              "$ref": "#/components/schemas/ProfileClaimRuleConditions"
            }
          }
        }
      },
      "ProfileClaimRuleConditions": {
        "type": "object",
        "required": [
          "claim",
          "operator",
          "value"
        ],
        "properties": {
          "claim": {
            "type": "string",
            "description": "The claim to evaluate against."
          },
          "operator": {
            "type": "string",
            "description": "The operation to perform on the claim. valid values are EQUALS, NOT_EQUALS, EQUALS_IGNORE_CASE, NOT_EQUALS_IGNORE_CASE, CONTAINS, IN"
          },
          "value": {
            "type": "string",
            "description": "The stringified JSON value that the claim is compared to using the operator"
          }
        }
      },
      "ProfileClaimRuleList": {
        "type": "object",
        "required": [
          "rules"
        ],
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ResponseContext"
          },
          "rules": {
            "type": "array",
            "description": "List of claim rules",
            "items": {
              "$ref": "#/components/schemas/ProfileClaimRule"
            }
          }
        }
      },
      "ProfileClaimRule": {
        "type": "object",
        "required": [
          "id",
          "entity_tag",
          "created_at",
          "modified_ at",
          "type",
          "expiration",
          "conditions"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "the unique identifier of the claim rule"
          },
          "entity_tag": {
            "type": "string",
            "description": "version of the claim rule"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "If set contains a date time string of the creation date in ISO format."
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "If set contains a date time string of the last modification date in ISO format."
          },
          "name": {
            "type": "string",
            "description": "The optional claim rule name"
          },
          "type": {
            "type": "string",
            "description": "Type of the claim rule, either 'Profile-SAML' or 'Profile-CR'"
          },
          "realm_name": {
            "type": "string",
            "description": "The realm name of the Idp this claim rule applies to"
          },
          "expiration": {
            "type": "integer",
            "description": "Session expiration in seconds"
          },
          "cr_type": {
            "type": "string",
            "description": "The compute resource type. Not required if type is Profile-SAML. Valid values are VSI, IKS_SA, ROKS_SA."
          },
          "conditions": {
            "type": "array",
            "description": "Conditions of this claim rule.",
            "items": {
              "$ref": "#/components/schemas/ProfileClaimRuleConditions"
            }
          }
        }
      },
      "ProfileLinkList": {
        "type": "object",
        "required": [
          "links"
        ],
        "properties": {
          "links": {
            "type": "array",
            "description": "List of links to a trusted profile",
            "items": {
              "$ref": "#/components/schemas/ProfileLink"
            }
          }
        }
      },
      "ProfileLink": {
        "type": "object",
        "description": "Link details",
        "required": [
          "id",
          "entity_tag",
          "created_at",
          "modified_at",
          "cr_type",
          "link"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "the unique identifier of the link"
          },
          "entity_tag": {
            "type": "string",
            "description": "version of the link"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "If set contains a date time string of the creation date in ISO format."
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "If set contains a date time string of the last modification date in ISO format."
          },
          "name": {
            "type": "string",
            "description": "Optional name of the Link"
          },
          "cr_type": {
            "type": "string",
            "description": "The compute resource type. Valid values are VSI, IKS_SA, ROKS_SA"
          },
          "link": {
            "type": "object",
            "properties": {
              "crn": {
                "type": "string",
                "description": "The CRN of the compute resource"
              },
              "namespace": {
                "type": "string",
                "description": "The compute resource namespace, only required if cr_type is IKS_SA or ROKS_SA"
              },
              "name": {
                "type": "string",
                "description": "Name of the compute resource, only required if cr_type is IKS_SA or ROKS_SA"
              }
            }
          }
        }
      },
      "CreateProfileLinkRequest": {
        "type": "object",
        "required": [
          "cr_type",
          "link"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Optional name of the Link"
          },
          "cr_type": {
            "type": "string",
            "description": "The compute resource type. Valid values are VSI, IKS_SA, ROKS_SA"
          },
          "link": {
            "type": "object",
            "description": "Link details",
            "required": [
              "crn",
              "namespace"
            ],
            "properties": {
              "crn": {
                "type": "string",
                "description": "The CRN of the compute resource"
              },
              "namespace": {
                "type": "string",
                "description": "The compute resource namespace, only required if cr_type is IKS_SA or ROKS_SA"
              },
              "name": {
                "type": "string",
                "description": "Name of the compute resource, only required if cr_type is IKS_SA or ROKS_SA"
              }
            }
          }
        }
      },
      "ReportReference": {
        "type": "object",
        "required": [
          "reference"
        ],
        "properties": {
          "reference": {
            "type": "string",
            "description": "Reference for the report to be generated."
          }
        }
      },
      "Report": {
        "type": "object",
        "required": [
          "created_by",
          "reference",
          "report_duration",
          "report_start_time",
          "report_end_time"
        ],
        "properties": {
          "created_by": {
            "type": "string",
            "description": "IAMid of the user who triggered the report"
          },
          "reference": {
            "type": "string",
            "description": "Unique reference used to generate the report"
          },
          "report_duration": {
            "type": "string",
            "description": "Duration in hours for which the report is generated."
          },
          "report_start_time": {
            "type": "string",
            "description": "Start time of the report"
          },
          "report_end_time": {
            "type": "string",
            "description": "End time of the report"
          },
          "users": {
            "type": "array",
            "description": "List of users",
            "items": {
              "$ref": "#/components/schemas/UserActivity"
            }
          },
          "apikeys": {
            "type": "array",
            "description": "List of apikeys",
            "items": {
              "$ref": "#/components/schemas/ApikeyActivity"
            }
          },
          "serviceids": {
            "type": "array",
            "description": "List of serviceids",
            "items": {
              "$ref": "#/components/schemas/EntityActivity"
            }
          },
          "profiles": {
            "type": "array",
            "description": "List of profiles",
            "items": {
              "$ref": "#/components/schemas/EntityActivity"
            }
          }
        }
      },
      "EntityActivity": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id of the entity"
          },
          "name": {
            "type": "string",
            "description": "Name provided during creation of the entity."
          },
          "last_authn": {
            "type": "string",
            "description": "Time when the entity was last authenticated."
          }
        }
      },
      "UserActivity": {
        "type": "object",
        "required": [
          "iam_id",
          "username"
        ],
        "properties": {
          "iam_id": {
            "type": "string",
            "description": "IAMid of the user"
          },
          "name": {
            "type": "string",
            "description": "Name of the user"
          },
          "username": {
            "type": "string",
            "description": "Username of the user"
          },
          "email": {
            "type": "string",
            "description": "Email of the user"
          },
          "last_authn": {
            "type": "string",
            "description": "Time when the user was last authenticated."
          }
        }
      },
      "ApikeyActivity": {
        "type": "object",
        "description": "Apikeys activity details",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id of the apikey."
          },
          "name": {
            "type": "string",
            "description": "Name provided during creation of the apikey."
          },
          "type": {
            "type": "string",
            "description": "Type of the apikey. Supported values are `serviceid` and `user`."
          },
          "serviceid": {
            "type": "object",
            "description": "serviceid details will be present if type is `serviceid`",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of this Service Id."
              },
              "name": {
                "type": "string",
                "description": "Name provided during creation of the serviceid."
              }
            }
          },
          "user": {
            "type": "object",
            "description": "user details will be present if type is `user`",
            "properties": {
              "iam_id": {
                "type": "string",
                "description": "IAMid of the user"
              },
              "name": {
                "type": "string",
                "description": "Name of the user"
              },
              "username": {
                "type": "string",
                "description": "Username of the user"
              },
              "email": {
                "type": "string",
                "description": "Email of the user"
              }
            }
          },
          "last_authn": {
            "type": "string",
            "description": "Time when the apikey was last authenticated."
          }
        }
      },
      "Activity": {
        "type": "object",
        "required": [
          "authn_count"
        ],
        "properties": {
          "last_authn": {
            "type": "string",
            "description": "Time when the entity was last authenticated."
          },
          "authn_count": {
            "type": "integer",
            "format": "int64",
            "description": "Authentication count, number of times the entity was authenticated."
          }
        }
      },
      "UserMfaEnrollments": {
        "type": "object",
        "required": [
          "iam_id"
        ],
        "properties": {
          "iam_id": {
            "type": "string",
            "description": "IAMid of the user"
          },
          "effective_mfa_type": {
            "type": "string",
            "description": "currently effective mfa type i.e. id_based_mfa or account_based_mfa"
          },
          "id_based_mfa": {
            "type": "object",
            "description": "list of mfa traits associated with the identity",
            "$ref": "#/components/schemas/IdBasedMfaEnrollment"
          },
          "account_based_mfa": {
            "type": "object",
            "description": "list of account based mfa types for the identity",
            "$ref": "#/components/schemas/AccountBasedMfaEnrollment"
          }
        }
      },
      "ReportMfaEnrollmentStatus": {
        "type": "object",
        "required": [
          "created_by",
          "reference",
          "report_time",
          "account_id"
        ],
        "properties": {
          "created_by": {
            "type": "string",
            "description": "IAMid of the user who triggered the report"
          },
          "reference": {
            "type": "string",
            "description": "Unique reference used to generate the report"
          },
          "report_time": {
            "type": "string",
            "description": "Date time at which report is generated. Date is in ISO format."
          },
          "account_id": {
            "type": "string",
            "description": "BSS account id of the user who triggered the report"
          },
          "ims_account_id": {
            "type": "string",
            "description": "IMS account id of the user who triggered the report"
          },
          "users": {
            "type": "array",
            "description": "List of users",
            "items": {
              "$ref": "#/components/schemas/UserReportMfaEnrollmentStatus"
            }
          }
        }
      },
      "UserReportMfaEnrollmentStatus": {
        "type": "object",
        "required": [
          "iam_id",
          "username",
          "enrollments"
        ],
        "properties": {
          "iam_id": {
            "type": "string",
            "description": "IAMid of the user"
          },
          "name": {
            "type": "string",
            "description": "Name of the user"
          },
          "username": {
            "type": "string",
            "description": "Username of the user"
          },
          "email": {
            "type": "string",
            "description": "Email of the user"
          },
          "enrollments": {
            "type": "object",
            "description": "List the associated mfa enrollments for the user",
            "$ref": "#/components/schemas/MfaEnrollments"
          }
        }
      },
      "MfaEnrollments": {
        "type": "object",
        "required": [
          "effective_mfa_type"
        ],
        "properties": {
          "effective_mfa_type": {
            "type": "string",
            "description": "currently effective mfa type i.e. id_based_mfa or account_based_mfa"
          },
          "id_based_mfa": {
            "type": "object",
            "description": "list of mfa traits associated with the identity",
            "$ref": "#/components/schemas/IdBasedMfaEnrollment"
          },
          "account_based_mfa": {
            "type": "object",
            "description": "list of account based mfa types for the identity",
            "$ref": "#/components/schemas/AccountBasedMfaEnrollment"
          }
        }
      },
      "IdBasedMfaEnrollment": {
        "type": "object",
        "required": [
          "trait_account_default",
          "trait_effective",
          "complies"
        ],
        "properties": {
          "trait_account_default": {
            "type": "string",
            "description": "Defines the MFA trait for the account. Valid values:\n  * NONE - No MFA trait set\n  * NONE_NO_ROPC- No MFA, disable CLI logins with only a password\n  * TOTP - For all non-federated IBMId users\n  * TOTP4ALL - For all users\n  * LEVEL1 - Email-based MFA for all users\n  * LEVEL2 - TOTP-based MFA for all users\n  * LEVEL3 - U2F MFA for all users\n",
            "enum": [
              "NONE",
              "NONE_NO_ROPC",
              "TOTP",
              "TOTP4ALL",
              "LEVEL1",
              "LEVEL2",
              "LEVEL3"
            ]
          },
          "trait_user_specific": {
            "type": "string",
            "description": "Defines the MFA trait for the account. Valid values:\n  * NONE - No MFA trait set\n  * NONE_NO_ROPC- No MFA, disable CLI logins with only a password\n  * TOTP - For all non-federated IBMId users\n  * TOTP4ALL - For all users\n  * LEVEL1 - Email-based MFA for all users\n  * LEVEL2 - TOTP-based MFA for all users\n  * LEVEL3 - U2F MFA for all users\n",
            "enum": [
              "NONE",
              "NONE_NO_ROPC",
              "TOTP",
              "TOTP4ALL",
              "LEVEL1",
              "LEVEL2",
              "LEVEL3"
            ]
          },
          "trait_effective": {
            "type": "string",
            "description": "Defines the MFA trait for the account. Valid values:\n  * NONE - No MFA trait set\n  * NONE_NO_ROPC- No MFA, disable CLI logins with only a password\n  * TOTP - For all non-federated IBMId users\n  * TOTP4ALL - For all users\n  * LEVEL1 - Email-based MFA for all users\n  * LEVEL2 - TOTP-based MFA for all users\n  * LEVEL3 - U2F MFA for all users\n",
            "enum": [
              "NONE",
              "NONE_NO_ROPC",
              "TOTP",
              "TOTP4ALL",
              "LEVEL1",
              "LEVEL2",
              "LEVEL3"
            ]
          },
          "complies": {
            "type": "boolean",
            "description": "The enrollment complies to the effective requirement."
          }
        }
      },
      "AccountBasedMfaEnrollment": {
        "type": "object",
        "required": [
          "security_questions",
          "totp",
          "verisign",
          "complies"
        ],
        "properties": {
          "security_questions": {
            "type": "object",
            "description": "describes whether security questions are required and enrolled",
            "$ref": "#/components/schemas/MfaEnrollmentTypeStatus"
          },
          "totp": {
            "type": "object",
            "description": "describes whether totp is required and enrolled",
            "$ref": "#/components/schemas/MfaEnrollmentTypeStatus"
          },
          "verisign": {
            "type": "object",
            "description": "describes whether verisign is required and enrolled",
            "$ref": "#/components/schemas/MfaEnrollmentTypeStatus"
          },
          "complies": {
            "type": "boolean",
            "description": "The enrollment complies to the effective requirement."
          }
        }
      },
      "MfaEnrollmentTypeStatus": {
        "type": "object",
        "required": [
          "required",
          "enrolled"
        ],
        "properties": {
          "required": {
            "type": "boolean",
            "description": "Describes whether the enrollment type is required."
          },
          "enrolled": {
            "type": "boolean",
            "description": "Describes whether the enrollment type is enrolled."
          }
        }
      },
      "TrustedProfileTemplateList": {
        "type": "object",
        "required": [
          "profile_templates"
        ],
        "properties": {
          "context": {
            "description": "Context for problem determination.",
            "$ref": "#/components/schemas/ResponseContext"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset of the current page."
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Optional size of a single page.",
            "default": 20,
            "minimum": 1,
            "maximum": 100
          },
          "first": {
            "type": "string",
            "description": "Link to the first page."
          },
          "previous": {
            "type": "string",
            "description": "Link to the previous available page. If 'previous' property is not part of the response no previous page is available."
          },
          "next": {
            "type": "string",
            "description": "Link to the next available page. If 'next' property is not part of the response no next page is available."
          },
          "profile_templates": {
            "type": "array",
            "description": "List of Profile Templates based on the query paramters and the page size. The profile_templates array is always part of the response but might be empty depending on the query parameter values provided.",
            "items": {
              "$ref": "#/components/schemas/TrustedProfileTemplateResponse"
            }
          }
        }
      },
      "TrustedProfileTemplateResponse": {
        "type": "object",
        "required": [
          "id",
          "version",
          "account_id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the the template"
          },
          "version": {
            "type": "integer",
            "format": "int64",
            "description": "Version of the the template"
          },
          "account_id": {
            "type": "string",
            "description": "ID of the account where the template resides."
          },
          "name": {
            "type": "string",
            "description": "The name of the trusted profile template. This is visible only in the enterprise account."
          },
          "description": {
            "type": "string",
            "description": "The description of the trusted profile template. Describe the template for enterprise account users."
          },
          "committed": {
            "type": "boolean",
            "description": "Committed flag determines if the template is ready for assignment"
          },
          "profile": {
            "description": "The trusted profile to be assigned in child accounts.",
            "$ref": "#/components/schemas/TemplateProfileComponentResponse"
          },
          "policy_template_references": {
            "type": "array",
            "description": "Existing policy templates that you can reference to assign access in the trusted profile component.",
            "items": {
              "$ref": "#/components/schemas/PolicyTemplateReference"
            }
          },
          "history": {
            "type": "array",
            "description": "History of the trusted profile template.",
            "items": {
              "$ref": "#/components/schemas/EnityHistoryRecord"
            }
          },
          "entity_tag": {
            "type": "string",
            "description": "Entity tag for this templateId-version combination"
          },
          "crn": {
            "type": "string",
            "description": "Cloud resource name"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp of when the template was created"
          },
          "created_by_id": {
            "type": "string",
            "description": "IAMid of the creator"
          },
          "last_modified_at": {
            "type": "string",
            "description": "Timestamp of when the template was last modified"
          },
          "last_modified_by_id": {
            "type": "string",
            "description": "IAMid of the identity that made the latest modification"
          }
        },
        "description": "Response body format for Trusted Profile Template REST requests"
      },
      "TrustedProfileTemplateRequest": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "ID of the account where the template resides."
          },
          "name": {
            "type": "string",
            "description": "The name of the trusted profile template. This is visible only in the enterprise account. Required field when creating a new template. Otherwise this field is optional. If the field is included it will change the name value for all existing versions of the template."
          },
          "description": {
            "type": "string",
            "description": "The description of the trusted profile template. Describe the template for enterprise account users."
          },
          "profile": {
            "description": "The trusted profile to be assigned in child accounts.",
            "$ref": "#/components/schemas/TemplateProfileComponentRequest"
          },
          "policy_template_references": {
            "type": "array",
            "description": "Existing policy templates that you can reference to assign access in the trusted profile component.",
            "items": {
              "$ref": "#/components/schemas/PolicyTemplateReference"
            }
          }
        },
        "description": "Request body format for Trusted Profile Template REST requests. When creating a template properties account_id and name are mandatory."
      },
      "TemplateProfileComponentResponse": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Profile"
          },
          "description": {
            "type": "string",
            "description": "Description of the Profile"
          },
          "rules": {
            "type": "array",
            "description": "Rules for the Profile",
            "items": {
              "$ref": "#/components/schemas/TrustedProfileTemplateClaimRule"
            }
          },
          "identities": {
            "type": "array",
            "description": "Identities for the Profile",
            "items": {
              "$ref": "#/components/schemas/ProfileIdentityResponse"
            }
          }
        },
        "description": "Input body parameters for the TemplateProfileComponent"
      },
      "TemplateProfileComponentRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Profile"
          },
          "description": {
            "type": "string",
            "description": "Description of the Profile"
          },
          "rules": {
            "type": "array",
            "description": "Rules for the Profile",
            "items": {
              "$ref": "#/components/schemas/TrustedProfileTemplateClaimRule"
            }
          },
          "identities": {
            "type": "array",
            "description": "Identities for the Profile",
            "items": {
              "$ref": "#/components/schemas/ProfileIdentityRequest"
            }
          }
        },
        "description": "Input body parameters for the TemplateProfileComponent"
      },
      "PolicyTemplateReference": {
        "type": "object",
        "required": [
          "id",
          "version"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of Access Policy Template"
          },
          "version": {
            "type": "string",
            "description": "Version of Access Policy Template"
          }
        },
        "description": "Metadata for external access policy"
      },
      "AccountSettingsTemplateList": {
        "type": "object",
        "required": [
          "account_settings_templates"
        ],
        "properties": {
          "context": {
            "description": "Context for problem determination.",
            "$ref": "#/components/schemas/ResponseContext"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset of the current page."
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Optional size of a single page.",
            "default": 20,
            "minimum": 1,
            "maximum": 100
          },
          "first": {
            "type": "string",
            "description": "Link to the first page."
          },
          "previous": {
            "type": "string",
            "description": "Link to the previous available page. If 'previous' property is not part of the response no previous page is available."
          },
          "next": {
            "type": "string",
            "description": "Link to the next available page. If 'next' property is not part of the response no next page is available."
          },
          "account_settings_templates": {
            "type": "array",
            "description": "List of account settings templates based on the query paramters and the page size. The account_settings_templates array is always part of the response but might be empty depending on the query parameter values provided.",
            "items": {
              "$ref": "#/components/schemas/AccountSettingsTemplateResponse"
            }
          }
        }
      },
      "AccountSettingsTemplateResponse": {
        "type": "object",
        "required": [
          "id",
          "version",
          "account_settings",
          "name",
          "account_id",
          "committed",
          "entity_tag",
          "crn"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the the template"
          },
          "version": {
            "type": "integer",
            "format": "int64",
            "description": "Version of the the template"
          },
          "account_id": {
            "type": "string",
            "description": "ID of the account where the template resides."
          },
          "name": {
            "type": "string",
            "description": "The name of the trusted profile template. This is visible only in the enterprise account."
          },
          "description": {
            "type": "string",
            "description": "The description of the trusted profile template. Describe the template for enterprise account users."
          },
          "committed": {
            "type": "boolean",
            "description": "Committed flag determines if the template is ready for assignment"
          },
          "account_settings": {
            "description": "IAM account settings to be assigned in child accounts.",
            "$ref": "#/components/schemas/AccountSettingsComponent"
          },
          "history": {
            "type": "array",
            "description": "History of the Template.",
            "items": {
              "$ref": "#/components/schemas/EnityHistoryRecord"
            }
          },
          "entity_tag": {
            "type": "string",
            "description": "Entity tag for this templateId-version combination"
          },
          "crn": {
            "type": "string",
            "description": "Cloud resource name"
          },
          "created_at": {
            "type": "string",
            "description": "Template Created At"
          },
          "created_by_id": {
            "type": "string",
            "description": "IAMid of the creator"
          },
          "last_modified_at": {
            "type": "string",
            "description": "Template last modified at"
          },
          "last_modified_by_id": {
            "type": "string",
            "description": "IAMid of the identity that made the latest modification"
          }
        },
        "description": "Response body format for account settings template REST requests"
      },
      "AccountSettingsComponent": {
        "type": "object",
        "properties": {
          "restrict_create_service_id": {
            "type": "string",
            "description": "Defines whether or not creating a service ID is access controlled. Valid values:\n  * RESTRICTED - only users assigned the 'Service ID creator' role on the IAM Identity Service can create service IDs, including the account owner\n  * NOT_RESTRICTED - all members of an account can create service IDs\n  * NOT_SET - to 'unset' a previous set value",
            "enum": [
              "RESTRICTED",
              "NOT_RESTRICTED",
              "NOT_SET"
            ],
            "default": "NOT_SET"
          },
          "restrict_create_platform_apikey": {
            "type": "string",
            "description": "Defines whether or not creating platform API keys is access controlled. Valid values:\n  * RESTRICTED - to apply access control\n  * NOT_RESTRICTED - to remove access control\n  * NOT_SET - to 'unset' a previous set value",
            "enum": [
              "RESTRICTED",
              "NOT_RESTRICTED",
              "NOT_SET"
            ],
            "default": "NOT_SET"
          },
          "allowed_ip_addresses": {
            "type": "string",
            "description": "Defines the IP addresses and subnets from which IAM tokens can be created for the account."
          },
          "mfa": {
            "type": "string",
            "description": "Defines the MFA trait for the account. Valid values:\n  * NONE - No MFA trait set\n  * TOTP - For all non-federated IBMId users\n  * TOTP4ALL - For all users\n  * LEVEL1 - Email-based MFA for all users\n  * LEVEL2 - TOTP-based MFA for all users\n  * LEVEL3 - U2F MFA for all users\n",
            "enum": [
              "NONE",
              "TOTP",
              "TOTP4ALL",
              "LEVEL1",
              "LEVEL2",
              "LEVEL3"
            ]
          },
          "user_mfa": {
            "type": "array",
            "description": "List of users that are exempted from the MFA requirement of the account.",
            "items": {
              "$ref": "#/components/schemas/AccountSettingsUserMFA"
            }
          },
          "session_expiration_in_seconds": {
            "type": "string",
            "description": "Defines the session expiration in seconds for the account. Valid values:\n  * Any whole number between between '900' and '86400'\n  * NOT_SET - To unset account setting and use service default",
            "default": 86400
          },
          "session_invalidation_in_seconds": {
            "type": "string",
            "description": "Defines the period of time in seconds in which a session will be invalidated due to inactivity. Valid values:\n  * Any whole number between '900' and '7200'\n  * NOT_SET - To unset account setting and use service default",
            "default": 7200
          },
          "max_sessions_per_identity": {
            "type": "string",
            "description": "Defines the max allowed sessions per identity required by the account. Valid values:\n  * Any whole number greater than 0\n  * NOT_SET - To unset account setting and use service default"
          },
          "system_access_token_expiration_in_seconds": {
            "type": "string",
            "description": "Defines the access token expiration in seconds. Valid values:\n  * Any whole number between '900' and '3600'\n  * NOT_SET - To unset account setting and use service default",
            "default": 3600
          },
          "system_refresh_token_expiration_in_seconds": {
            "type": "string",
            "description": "Defines the refresh token expiration in seconds. Valid values:\n  * Any whole number between '900' and '259200'\n  * NOT_SET - To unset account setting and use service default",
            "default": 259200
          }
        }
      },
      "AccountSettingsTemplateRequest": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "ID of the account where the template resides."
          },
          "name": {
            "type": "string",
            "description": "The name of the trusted profile template. This is visible only in the enterprise account."
          },
          "description": {
            "type": "string",
            "description": "The description of the trusted profile template. Describe the template for enterprise account users."
          },
          "account_settings": {
            "description": "IAM account settings to be assigned in child accounts.",
            "$ref": "#/components/schemas/AccountSettingsComponent"
          }
        },
        "description": "Request body format for Account Settings Template REST requests. When creating a template properties account_id and name are mandatory."
      },
      "TemplateAssignmentListResponse": {
        "required": [
          "assignments"
        ],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ResponseContext"
          },
          "offset": {
            "type": "integer",
            "description": "The offset of the current page.",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "description": "Optional size of a single page. Default is 20 items per page. Valid range is 1 to 100",
            "format": "int64"
          },
          "first": {
            "type": "string",
            "description": "Link to the first page."
          },
          "previous": {
            "type": "string",
            "description": "Link to the previous available page. If 'previous' property is not part of the response no previous page is available."
          },
          "next": {
            "type": "string",
            "description": "Link to the next available page. If 'next' property is not part of the response no next page is available."
          },
          "assignments": {
            "type": "array",
            "description": "List of Assignments based on the query paramters and the page size. The assignments array is always part of the response but might be empty depending on the query parameter values provided.",
            "items": {
              "$ref": "#/components/schemas/TemplateAssignmentResponse"
            }
          }
        },
        "description": "List Response body format for Template Assignments Records"
      },
      "TemplateAssignmentResponse": {
        "required": [
          "id",
          "account_id",
          "template_id",
          "template_version",
          "target_type",
          "target",
          "status",
          "created_at",
          "created_by_id",
          "last_modified_at",
          "last_modified_by_id",
          "entity_tag"
        ],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ResponseContext"
          },
          "id": {
            "type": "string",
            "description": "Assignment record Id"
          },
          "account_id": {
            "type": "string",
            "description": "Enterprise account Id"
          },
          "template_id": {
            "type": "string",
            "description": "Template Id"
          },
          "template_version": {
            "type": "integer",
            "description": "Template version",
            "format": "int64"
          },
          "target_type": {
            "type": "string",
            "description": "Assignment target type"
          },
          "target": {
            "type": "string",
            "description": "Assignment target"
          },
          "status": {
            "type": "string",
            "description": "Assignment status"
          },
          "resources": {
            "type": "array",
            "description": "Status breakdown per target account of IAM resources created or errors encountered in attempting to create those IAM resources. IAM resources are only included in the response providing the assignment is not in progress. IAM resources are also only included when getting a single assignment, and excluded by list APIs.",
            "items": {
              "$ref": "#/components/schemas/TemplateAssignmentResponseResource"
            }
          },
          "history": {
            "type": "array",
            "description": "Assignment history",
            "items": {
              "$ref": "#/components/schemas/EnityHistoryRecord"
            }
          },
          "href": {
            "type": "string",
            "description": "Href"
          },
          "created_at": {
            "type": "string",
            "description": "Assignment created at"
          },
          "created_by_id": {
            "type": "string",
            "description": "IAMid of the identity that created the assignment"
          },
          "last_modified_at": {
            "type": "string",
            "description": "Assignment modified at"
          },
          "last_modified_by_id": {
            "type": "string",
            "description": "IAMid of the identity that last modified the assignment"
          },
          "entity_tag": {
            "type": "string",
            "description": "Entity tag for this assignment record"
          }
        },
        "description": "Response body format for Template Assignment Record"
      },
      "CreateTemplateAssignmentRequest": {
        "required": [
          "target",
          "target_type",
          "template_id",
          "template_version"
        ],
        "type": "object",
        "properties": {
          "template_id": {
            "type": "string",
            "description": "ID of the template to assign"
          },
          "template_version": {
            "type": "integer",
            "description": "Version of the template to assign",
            "format": "int64",
            "minimum": 1
          },
          "target_type": {
            "type": "string",
            "enum": [
              "Account",
              "AccountGroup"
            ],
            "description": "Type of target to deploy to"
          },
          "target": {
            "type": "string",
            "description": "Identifier of target to deploy to"
          }
        },
        "description": "Body parameters for create assignment request"
      },
      "UpdateTemplateAssignmentRequest": {
        "required": [
          "template_version"
        ],
        "type": "object",
        "properties": {
          "template_version": {
            "type": "integer",
            "description": "Template version to be applied to the assignment. To retry all failed assignemtns, provide the existing version. To migrate to a different version, provide the new version number.",
            "format": "int64",
            "minimum": 1
          }
        },
        "description": "Input body parameters for the Assignment update"
      },
      "TemplateAssignmentResponseResource": {
        "required": [
          "target"
        ],
        "type": "object",
        "properties": {
          "target": {
            "type": "string",
            "description": "Target account where the IAM resource is created."
          },
          "profile": {
            "type": "object",
            "description": "Profile resource included only for trusted profile assignments.",
            "$ref": "#/components/schemas/TemplateAssignmentResponseResourceDetail"
          },
          "account_settings": {
            "type": "object",
            "description": "Account settings resource included only for account settings assignments.",
            "$ref": "#/components/schemas/TemplateAssignmentResponseResourceDetail"
          },
          "policy_template_refs": {
            "type": "array",
            "description": "Policy resource(s) included only for trusted profile assignments with policy references.",
            "items": {
              "$ref": "#/components/schemas/TemplateAssignmentResponseResourceDetail"
            }
          }
        },
        "description": "Overview of resources assignment per target account"
      },
      "TemplateAssignmentResponseResourceDetail": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Policy Template Id, only returned for a profile assignment with policy references."
          },
          "version": {
            "type": "string",
            "description": "Policy version, only returned for a profile assignment with policy references."
          },
          "resource_created": {
            "type": "object",
            "description": "Metadata for IAM resource created in the target account",
            "$ref": "#/components/schemas/TemplateAssignmentResource"
          },
          "error_message": {
            "type": "object",
            "description": "Error details in case the assignment failed for the target account",
            "$ref": "#/components/schemas/TemplateAssignmentResourceError"
          },
          "status": {
            "type": "string",
            "description": "Status for the target account's assignment"
          }
        }
      },
      "TemplateAssignmentResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the created resource"
          }
        },
        "description": "Body parameters for created resource"
      },
      "TemplateAssignmentResourceError": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the error"
          },
          "errorCode": {
            "type": "string",
            "description": "Internal error code"
          },
          "message": {
            "type": "string",
            "description": "Error message detailing the nature of the error"
          },
          "statusCode": {
            "type": "string",
            "description": "Internal status code for the error"
          }
        },
        "description": "Body parameters for assignment error"
      },
      "ProfileIdentitiesResponse": {
        "type": "object",
        "properties": {
          "entity_tag": {
            "type": "string",
            "description": "Entity tag of the profile identities response"
          },
          "identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfileIdentityResponse"
            },
            "description": "List of identities"
          }
        }
      },
      "ProfileIdentitiesUpdateRequest": {
        "type": "object",
        "properties": {
          "identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfileIdentityRequest"
            },
            "description": "List of identities that can assume the trusted profile"
          }
        }
      },
      "ProfileIdentityRequest": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Identifier of the identity that can assume the trusted profiles. This can be a user identifier (IAM id), serviceid or crn. Internally it uses account id of the service id for the identifier 'serviceid' and for the identifier 'crn' it uses account id contained in the CRN."
          },
          "type": {
            "type": "string",
            "enum": [
              "user",
              "serviceid",
              "crn"
            ],
            "description": "Type of the identity"
          },
          "accounts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Only valid for the type user. Accounts from which a user can assume the trusted profile."
          },
          "description": {
            "type": "string",
            "description": "Description of the identity that can assume the trusted profile. This is optional field for all the types of identities. When this field is not set for the identity type 'serviceid' then the description of the service id is used. Description is recommended for the identity type 'crn' E.g. 'Instance 1234 of IBM Cloud Service project'"
          }
        }
      },
      "ProfileIdentityResponse": {
        "type": "object",
        "required": [
          "iam_id",
          "identifier",
          "type"
        ],
        "properties": {
          "iam_id": {
            "type": "string",
            "description": "IAM ID of the identity"
          },
          "identifier": {
            "type": "string",
            "description": "Identifier of the identity that can assume the trusted profiles. This can be a user identifier (IAM id), serviceid or crn. Internally it uses account id of the service id for the identifier 'serviceid' and for the identifier 'crn' it uses account id contained in the CRN."
          },
          "type": {
            "type": "string",
            "enum": [
              "user",
              "serviceid",
              "crn"
            ],
            "description": "Type of the identity"
          },
          "accounts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Only valid for the type user. Accounts from which a user can assume the trusted profile."
          },
          "description": {
            "type": "string",
            "description": "Description of the identity that can assume the trusted profile. This is optional field for all the types of identities. When this field is not set for the identity type 'serviceid' then the description of the service id is used. Description is recommended for the identity type 'crn' E.g. 'Instance 1234 of IBM Cloud Service project'"
          }
        }
      }
    }
  }
}